{
  "address": "0x488b62261D2D5ba4d2dcB446aCc355979405953D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "resolver",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "width",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "zoom",
          "type": "uint8"
        }
      ],
      "name": "dotnuggToBytes",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "res",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "resolver",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "width",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "zoom",
          "type": "uint8"
        }
      ],
      "name": "dotnuggToData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "version",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "renderedAt",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "desc",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "proof",
              "type": "uint256"
            },
            {
              "internalType": "uint8[]",
              "name": "ids",
              "type": "uint8[]"
            },
            {
              "internalType": "uint8[]",
              "name": "extras",
              "type": "uint8[]"
            },
            {
              "internalType": "uint8[]",
              "name": "xovers",
              "type": "uint8[]"
            },
            {
              "internalType": "uint8[]",
              "name": "yovers",
              "type": "uint8[]"
            }
          ],
          "internalType": "struct IdotnuggV1Data.Data",
          "name": "res",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "resolver",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "width",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "zoom",
          "type": "uint8"
        }
      ],
      "name": "dotnuggToRaw",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "res",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "resolver",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "width",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "zoom",
          "type": "uint8"
        }
      ],
      "name": "dotnuggToString",
      "outputs": [
        {
          "internalType": "string",
          "name": "res",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "width",
          "type": "uint8"
        }
      ],
      "name": "process",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "resp",
          "type": "uint256[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "version",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "renderedAt",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "desc",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "proof",
              "type": "uint256"
            },
            {
              "internalType": "uint8[]",
              "name": "ids",
              "type": "uint8[]"
            },
            {
              "internalType": "uint8[]",
              "name": "extras",
              "type": "uint8[]"
            },
            {
              "internalType": "uint8[]",
              "name": "xovers",
              "type": "uint8[]"
            },
            {
              "internalType": "uint8[]",
              "name": "yovers",
              "type": "uint8[]"
            }
          ],
          "internalType": "struct IdotnuggV1Data.Data",
          "name": "dat",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[][]",
          "name": "files",
          "type": "uint256[][]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "version",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "renderedAt",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "desc",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "proof",
              "type": "uint256"
            },
            {
              "internalType": "uint8[]",
              "name": "ids",
              "type": "uint8[]"
            },
            {
              "internalType": "uint8[]",
              "name": "extras",
              "type": "uint8[]"
            },
            {
              "internalType": "uint8[]",
              "name": "xovers",
              "type": "uint8[]"
            },
            {
              "internalType": "uint8[]",
              "name": "yovers",
              "type": "uint8[]"
            }
          ],
          "internalType": "struct IdotnuggV1Data.Data",
          "name": "data",
          "type": "tuple"
        },
        {
          "internalType": "uint8",
          "name": "width",
          "type": "uint8"
        }
      ],
      "name": "processCore",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "resp",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "file",
          "type": "uint256[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "version",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "renderedAt",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "desc",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "proof",
              "type": "uint256"
            },
            {
              "internalType": "uint8[]",
              "name": "ids",
              "type": "uint8[]"
            },
            {
              "internalType": "uint8[]",
              "name": "extras",
              "type": "uint8[]"
            },
            {
              "internalType": "uint8[]",
              "name": "xovers",
              "type": "uint8[]"
            },
            {
              "internalType": "uint8[]",
              "name": "yovers",
              "type": "uint8[]"
            }
          ],
          "internalType": "struct IdotnuggV1Data.Data",
          "name": "data",
          "type": "tuple"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "resolveBytes",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "res",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "version",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "renderedAt",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "desc",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "proof",
              "type": "uint256"
            },
            {
              "internalType": "uint8[]",
              "name": "ids",
              "type": "uint8[]"
            },
            {
              "internalType": "uint8[]",
              "name": "extras",
              "type": "uint8[]"
            },
            {
              "internalType": "uint8[]",
              "name": "xovers",
              "type": "uint8[]"
            },
            {
              "internalType": "uint8[]",
              "name": "yovers",
              "type": "uint8[]"
            }
          ],
          "internalType": "struct IdotnuggV1Data.Data",
          "name": "data",
          "type": "tuple"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "resolveData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "version",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "renderedAt",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "desc",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "proof",
              "type": "uint256"
            },
            {
              "internalType": "uint8[]",
              "name": "ids",
              "type": "uint8[]"
            },
            {
              "internalType": "uint8[]",
              "name": "extras",
              "type": "uint8[]"
            },
            {
              "internalType": "uint8[]",
              "name": "xovers",
              "type": "uint8[]"
            },
            {
              "internalType": "uint8[]",
              "name": "yovers",
              "type": "uint8[]"
            }
          ],
          "internalType": "struct IdotnuggV1Data.Data",
          "name": "res",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "file",
          "type": "uint256[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "version",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "renderedAt",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "desc",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "proof",
              "type": "uint256"
            },
            {
              "internalType": "uint8[]",
              "name": "ids",
              "type": "uint8[]"
            },
            {
              "internalType": "uint8[]",
              "name": "extras",
              "type": "uint8[]"
            },
            {
              "internalType": "uint8[]",
              "name": "xovers",
              "type": "uint8[]"
            },
            {
              "internalType": "uint8[]",
              "name": "yovers",
              "type": "uint8[]"
            }
          ],
          "internalType": "struct IdotnuggV1Data.Data",
          "name": "",
          "type": "tuple"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "resolveRaw",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "res",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "file",
          "type": "uint256[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "version",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "renderedAt",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "desc",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "proof",
              "type": "uint256"
            },
            {
              "internalType": "uint8[]",
              "name": "ids",
              "type": "uint8[]"
            },
            {
              "internalType": "uint8[]",
              "name": "extras",
              "type": "uint8[]"
            },
            {
              "internalType": "uint8[]",
              "name": "xovers",
              "type": "uint8[]"
            },
            {
              "internalType": "uint8[]",
              "name": "yovers",
              "type": "uint8[]"
            }
          ],
          "internalType": "struct IdotnuggV1Data.Data",
          "name": "data",
          "type": "tuple"
        },
        {
          "internalType": "uint8",
          "name": "zoom",
          "type": "uint8"
        }
      ],
      "name": "resolveString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x417c11865004d870863e955dd156fdf3cb0494d3fbb62c77ad2a40c8f4a2ba7e",
  "receipt": {
    "to": null,
    "from": "0xB666C13b621568FeC210724DF161604adccfA257",
    "contractAddress": "0x488b62261D2D5ba4d2dcB446aCc355979405953D",
    "transactionIndex": 5,
    "gasUsed": "4694413",
    "logsBloom": "0x
    "blockHash": "0xb6cf151c3e450783b1672afca907bc29fcfa8d00d06126f9f4da3a319ecafc8f",
    "transactionHash": "0x417c11865004d870863e955dd156fdf3cb0494d3fbb62c77ad2a40c8f4a2ba7e",
    "logs": [],
    "blockNumber": 11659744,
    "cumulativeGasUsed": "7010101",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "65fcdffc03c880e9d9861e80ac2a6fe6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"width\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"zoom\",\"type\":\"uint8\"}],\"name\":\"dotnuggToBytes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"res\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"width\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"zoom\",\"type\":\"uint8\"}],\"name\":\"dotnuggToData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"renderedAt\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"desc\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proof\",\"type\":\"uint256\"},{\"internalType\":\"uint8[]\",\"name\":\"ids\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"extras\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"xovers\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"yovers\",\"type\":\"uint8[]\"}],\"internalType\":\"struct IdotnuggV1Data.Data\",\"name\":\"res\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"width\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"zoom\",\"type\":\"uint8\"}],\"name\":\"dotnuggToRaw\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"res\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"width\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"zoom\",\"type\":\"uint8\"}],\"name\":\"dotnuggToString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"res\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"width\",\"type\":\"uint8\"}],\"name\":\"process\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"resp\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"renderedAt\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"desc\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proof\",\"type\":\"uint256\"},{\"internalType\":\"uint8[]\",\"name\":\"ids\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"extras\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"xovers\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"yovers\",\"type\":\"uint8[]\"}],\"internalType\":\"struct IdotnuggV1Data.Data\",\"name\":\"dat\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[][]\",\"name\":\"files\",\"type\":\"uint256[][]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"renderedAt\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"desc\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proof\",\"type\":\"uint256\"},{\"internalType\":\"uint8[]\",\"name\":\"ids\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"extras\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"xovers\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"yovers\",\"type\":\"uint8[]\"}],\"internalType\":\"struct IdotnuggV1Data.Data\",\"name\":\"data\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"width\",\"type\":\"uint8\"}],\"name\":\"processCore\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"resp\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"file\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"renderedAt\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"desc\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proof\",\"type\":\"uint256\"},{\"internalType\":\"uint8[]\",\"name\":\"ids\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"extras\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"xovers\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"yovers\",\"type\":\"uint8[]\"}],\"internalType\":\"struct IdotnuggV1Data.Data\",\"name\":\"data\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"resolveBytes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"res\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"renderedAt\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"desc\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proof\",\"type\":\"uint256\"},{\"internalType\":\"uint8[]\",\"name\":\"ids\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"extras\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"xovers\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"yovers\",\"type\":\"uint8[]\"}],\"internalType\":\"struct IdotnuggV1Data.Data\",\"name\":\"data\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"resolveData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"renderedAt\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"desc\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proof\",\"type\":\"uint256\"},{\"internalType\":\"uint8[]\",\"name\":\"ids\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"extras\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"xovers\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"yovers\",\"type\":\"uint8[]\"}],\"internalType\":\"struct IdotnuggV1Data.Data\",\"name\":\"res\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"file\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"renderedAt\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"desc\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proof\",\"type\":\"uint256\"},{\"internalType\":\"uint8[]\",\"name\":\"ids\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"extras\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"xovers\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"yovers\",\"type\":\"uint8[]\"}],\"internalType\":\"struct IdotnuggV1Data.Data\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"resolveRaw\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"res\",\"type\":\"uint256[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"file\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"renderedAt\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"desc\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proof\",\"type\":\"uint256\"},{\"internalType\":\"uint8[]\",\"name\":\"ids\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"extras\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"xovers\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"yovers\",\"type\":\"uint8[]\"}],\"internalType\":\"struct IdotnuggV1Data.Data\",\"name\":\"data\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"zoom\",\"type\":\"uint8\"}],\"name\":\"resolveString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"nugg.xyz - danny7even & dub6ix\",\"details\":\"hold my margarita\",\"kind\":\"dev\",\"methods\":{},\"title\":\"dotnugg Processor V1 - onchain encoder/decoder protocol for dotnugg files\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"yoU CAN'T HaVe ImAgES oN THe BlOCkcHAIn\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/dotnuggV1Processer.sol\":\"dotnuggV1Processor\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"src/dotnuggV1Processer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport './interfaces/IdotnuggV1.sol';\\n\\nimport './logic/Calculator.sol';\\nimport './logic/Matrix.sol';\\nimport './logic/Svg.sol';\\n\\nimport './libraries/Base64.sol';\\n\\nimport './types/Version.sol';\\n\\n/// @title dotnugg Processor V1 - onchain encoder/decoder protocol for dotnugg files\\n/// @author nugg.xyz - danny7even & dub6ix\\n/// @notice yoU CAN'T HaVe ImAgES oN THe BlOCkcHAIn\\n/// @dev hold my margarita\\ncontract dotnuggV1Processor is IdotnuggV1Processor {\\n    function process(\\n        address implementer,\\n        uint256 tokenId,\\n        uint8 width\\n    ) public view override returns (uint256[] memory resp, IdotnuggV1Data.Data memory dat) {\\n        (uint256[][] memory files, IdotnuggV1Data.Data memory data) = IdotnuggV1Implementer(implementer).prepareFiles(tokenId);\\n        dat = data;\\n        resp = processCore(files, data, width);\\n    }\\n\\n    function processCore(\\n        uint256[][] memory files,\\n        IdotnuggV1Data.Data memory data,\\n        uint8 width\\n    ) public view override returns (uint256[] memory resp) {\\n        require(data.version == 1, 'V1');\\n\\n        require(width < 64 && width % 2 == 1, 'V1:SIZE');\\n\\n        Version.Memory[][] memory versions = Version.parse(files, data.xovers, data.yovers);\\n\\n        Types.Matrix memory old = Calculator.combine(8, width, versions);\\n\\n        resp = Version.bigMatrixWithData(old.version);\\n    }\\n\\n    function resolveRaw(\\n        uint256[] memory file,\\n        IdotnuggV1Data.Data memory,\\n        uint8\\n    ) public pure override returns (uint256[] memory res) {\\n        res = file;\\n    }\\n\\n    function resolveBytes(\\n        uint256[] memory file,\\n        IdotnuggV1Data.Data memory data,\\n        uint8\\n    ) public pure override returns (bytes memory res) {\\n        res = abi.encode(file, data);\\n    }\\n\\n    function resolveData(\\n        uint256[] memory,\\n        IdotnuggV1Data.Data memory data,\\n        uint8\\n    ) public pure override returns (IdotnuggV1Data.Data memory res) {\\n        res = data;\\n    }\\n\\n    function resolveString(\\n        uint256[] memory file,\\n        IdotnuggV1Data.Data memory data,\\n        uint8 zoom\\n    ) public pure override returns (string memory) {\\n        uint256 width = (file[file.length - 1] >> 63) & ShiftLib.mask(6);\\n        uint256 height = (file[file.length - 1] >> 69) & ShiftLib.mask(6);\\n\\n        bytes memory working = Svg.buildSvg(file, width, height, zoom);\\n\\n        working = Base64._encode(working);\\n\\n        working = abi.encodePacked(\\n            Base64.PREFIX_JSON,\\n            Base64._encode(\\n                bytes(\\n                    abi.encodePacked(\\n                        '{\\\"name\\\":\\\"',\\n                        data.name,\\n                        '\\\",\\\"description\\\":\\\"',\\n                        data.desc,\\n                        '\\\",\\\"dotnuggVersion\\\":\\\"',\\n                        Uint256.toString(data.version),\\n                        '\\\",\\\"tokenId\\\":\\\"',\\n                        Uint256.toString(data.tokenId),\\n                        '\\\",\\\"proof\\\":\\\"',\\n                        Uint256.toHexString(data.proof, 32),\\n                        '\\\",\\\"owner\\\":\\\"',\\n                        Uint256.toHexString(uint160(data.owner), 20),\\n                        '\\\", \\\"image\\\": \\\"',\\n                        Base64.PREFIX_SVG,\\n                        working,\\n                        '\\\"}'\\n                    )\\n                )\\n            )\\n        );\\n\\n        return string(working);\\n    }\\n\\n    function dotnuggToRaw(\\n        address implementer,\\n        uint256 tokenId,\\n        address resolver,\\n        uint8 width,\\n        uint8 zoom\\n    ) public view override returns (uint256[] memory res) {\\n        (uint256[] memory file, IdotnuggV1Data.Data memory data) = process(implementer, tokenId, width);\\n\\n        if (resolver != address(0)) {\\n            res = IdotnuggV1Processor(resolver).resolveRaw(res, data, zoom);\\n        } else {\\n            res = file;\\n        }\\n    }\\n\\n    function dotnuggToBytes(\\n        address implementer,\\n        uint256 tokenId,\\n        address resolver,\\n        uint8 width,\\n        uint8 zoom\\n    ) public view override returns (bytes memory res) {\\n        (uint256[] memory file, IdotnuggV1Data.Data memory data) = process(implementer, tokenId, width);\\n\\n        res = IdotnuggV1Processor(resolver).resolveBytes(file, data, zoom);\\n    }\\n\\n    function dotnuggToString(\\n        address implementer,\\n        uint256 tokenId,\\n        address resolver,\\n        uint8 width,\\n        uint8 zoom\\n    ) public view override returns (string memory res) {\\n        (uint256[] memory file, IdotnuggV1Data.Data memory data) = process(implementer, tokenId, width);\\n\\n        res = IdotnuggV1Processor(resolver).resolveString(file, data, zoom);\\n    }\\n\\n    function dotnuggToData(\\n        address implementer,\\n        uint256 tokenId,\\n        address resolver,\\n        uint8 width,\\n        uint8 zoom\\n    ) public view override returns (IdotnuggV1Data.Data memory res) {\\n        (uint256[] memory file, IdotnuggV1Data.Data memory data) = process(implementer, tokenId, width);\\n\\n        res = IdotnuggV1Processor(resolver).resolveData(file, data, zoom);\\n    }\\n}\\n\",\"keccak256\":\"0x1ceabd8177d0dc8ccb69143ebd5287be55f32f4527c3a48333e2905a9cc8c372\",\"license\":\"MIT\"},\"src/interfaces/IdotnuggV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IdotnuggV1Data {\\n    struct Data {\\n        uint256 version;\\n        uint256 renderedAt;\\n        string name;\\n        string desc;\\n        address owner;\\n        uint256 tokenId;\\n        uint256 proof;\\n        uint8[] ids;\\n        uint8[] extras;\\n        uint8[] xovers;\\n        uint8[] yovers;\\n    }\\n}\\n\\ninterface IdotnuggV1Resolver {\\n    function resolveBytes(\\n        uint256[] memory file,\\n        IdotnuggV1Data.Data memory data,\\n        uint8 zoom\\n    ) external view returns (bytes memory res);\\n\\n    function resolveRaw(\\n        uint256[] memory file,\\n        IdotnuggV1Data.Data memory data,\\n        uint8 zoom\\n    ) external view returns (uint256[] memory res);\\n\\n    function resolveData(\\n        uint256[] memory file,\\n        IdotnuggV1Data.Data memory data,\\n        uint8 zoom\\n    ) external view returns (IdotnuggV1Data.Data memory res);\\n\\n    function resolveString(\\n        uint256[] memory file,\\n        IdotnuggV1Data.Data memory data,\\n        uint8 zoom\\n    ) external view returns (string memory res);\\n}\\n\\ninterface IdotnuggV1Processor is IdotnuggV1Resolver {\\n    function dotnuggToBytes(\\n        address implementer,\\n        uint256 tokenId,\\n        address resolver,\\n        uint8 width,\\n        uint8 zoom\\n    ) external view returns (bytes memory res);\\n\\n    function dotnuggToRaw(\\n        address implementer,\\n        uint256 tokenId,\\n        address resolver,\\n        uint8 width,\\n        uint8 zoom\\n    ) external view returns (uint256[] memory res);\\n\\n    function dotnuggToData(\\n        address implementer,\\n        uint256 tokenId,\\n        address resolver,\\n        uint8 width,\\n        uint8 zoom\\n    ) external view returns (IdotnuggV1Data.Data memory res);\\n\\n    function dotnuggToString(\\n        address implementer,\\n        uint256 tokenId,\\n        address resolver,\\n        uint8 width,\\n        uint8 zoom\\n    ) external view returns (string memory res);\\n\\n    function process(\\n        address implementer,\\n        uint256 tokenId,\\n        uint8 width\\n    ) external view returns (uint256[] memory file, IdotnuggV1Data.Data memory dat);\\n\\n    function processCore(\\n        uint256[][] memory files,\\n        IdotnuggV1Data.Data memory data,\\n        uint8 width\\n    ) external view returns (uint256[] memory file);\\n}\\n\\ninterface IdotnuggV1Implementer {\\n    function setResolver(uint256 tokenId, address to) external;\\n\\n    function resolverOf(uint256 tokenId) external view returns (address resolver);\\n\\n    function prepareFiles(uint256 tokenId) external view returns (uint256[][] memory file, IdotnuggV1Data.Data memory data);\\n}\\n\",\"keccak256\":\"0x183196b8cacf20439ef116622fcdbe0bbbe5138a7cdae895cea7eaa9c30d5749\",\"license\":\"MIT\"},\"src/libraries/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @title Base64\\n * @author Nugg Labs - @danny7even & @dub6ix\\n * @notice library for encoding bytes into base64\\n */\\nlibrary Base64 {\\n    string internal constant _TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    string internal constant PREFIX_JSON = 'data:application/json;base64,';\\n    string internal constant PREFIX_DOTNUGG = 'data:image/dotnugg;base64,';\\n    string internal constant PREFIX_SVG = 'data:image/svg+xml;base64,';\\n\\n    /**\\n     * @notice wrapper for _encode for svg data\\n     * @param data bytes to encode\\n     * @return base64 string representation of input bytes, prefixed with json base64 prefix\\n     */\\n    function encode(bytes memory data, string memory file) internal pure returns (string memory) {\\n        return string(abi.encodePacked('data:', file, ';base64,', _encode(data)));\\n    }\\n\\n    /**\\n     * @notice Encodes some bytes in base64\\n     * @param data bytes to encode\\n     * @return base64 string representation of input bytes\\n     * @dev Credit to Brecht Devos - <brecht@loopring.org> - under MIT license https://github.com/Brechtpd/base64/blob/main/base64.sol\\n     * @dev modified for solidity v8\\n     */\\n    function _encode(bytes memory data) internal pure returns (bytes memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = _TABLE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {\\n\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                dataPtr := add(dataPtr, 3)\\n\\n                // read 3 bytes\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F)))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F)))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(6, input), 0x3F)))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore(resultPtr, shl(248, mload(add(tablePtr, and(input, 0x3F)))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n            }\\n            case 2 {\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x24a45e23f4363421ff4ca2c5bd3f9ade211119cb67606dc017aa4c3e0cb4ddee\",\"license\":\"MIT\"},\"src/libraries/BitReader.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport '../libraries/ShiftLib.sol';\\n\\nlibrary BitReader {\\n    using ShiftLib for uint256;\\n\\n    struct Memory {\\n        uint256[] dat;\\n        uint256 moves;\\n        uint256 pos;\\n    }\\n\\n    function init(uint256[] memory input) internal pure returns (bool err, Memory memory m) {\\n        if (input.length == 0) return (true, m);\\n\\n        m.dat = input;\\n\\n        m.moves = 2;\\n\\n        m.dat = new uint256[](input.length);\\n\\n        for (uint256 i = input.length; i > 0; i--) {\\n            m.dat[i - 1] = input[input.length - i];\\n        }\\n    }\\n\\n    function peek(Memory memory m, uint8 bits) internal pure returns (uint256 res) {\\n        res = m.dat[0] & ShiftLib.mask(bits);\\n    }\\n\\n    function select(Memory memory m, uint8 bits) internal pure returns (uint256 res) {\\n        res = m.dat[0] & ShiftLib.mask(bits);\\n\\n        m.dat[0] = m.dat[0] >> bits;\\n\\n        m.pos += bits;\\n\\n        if (m.pos >= 128) {\\n            uint256 ptr = (m.moves / 2);\\n            if (ptr < m.dat.length) {\\n                m.dat[0] <<= m.pos - 128;\\n                uint256 move = m.dat[ptr] & ShiftLib.mask(128);\\n                m.dat[ptr] >>= 128;\\n                m.dat[0] |= (move << 128);\\n                m.dat[0] >>= (m.pos - 128);\\n                m.moves++;\\n                m.pos -= 128;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1f5c8e79958d83664af4a27d4e2cc8959b074453deca179b038d8e375eee8e9\",\"license\":\"MIT\"},\"src/libraries/SafeCastLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n// OK\\n/// @notice Safe unsigned integer casting library that reverts on overflow.\\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/SafeCast.sol)\\nlibrary SafeCastLib {\\n    function safe160(uint256 x) internal pure returns (uint160 y) {\\n        require(x <= type(uint160).max);\\n        y = uint160(x);\\n    }\\n\\n    function safe96(uint256 x) internal pure returns (uint96 y) {\\n        require(x <= type(uint96).max);\\n        y = uint96(x);\\n    }\\n\\n    function safe64(uint256 x) internal pure returns (uint64 y) {\\n        require(x <= type(uint64).max);\\n        y = uint64(x);\\n    }\\n\\n    function safe32(uint256 x) internal pure returns (uint32 y) {\\n        require(x <= type(uint32).max);\\n        y = uint32(x);\\n    }\\n\\n    function safe16(uint256 x) internal pure returns (uint16 y) {\\n        require(x <= type(uint16).max);\\n        y = uint16(x);\\n    }\\n\\n    function safe8(uint256 x) internal pure returns (uint8 y) {\\n        require(x <= type(uint8).max);\\n        y = uint8(x);\\n    }\\n\\n    function safe6(uint256 x) internal pure returns (uint8 y) {\\n        require(x <= 0xf7);\\n        y = uint8(x);\\n    }\\n}\\n\",\"keccak256\":\"0x797c502d8d81c980d4fd4a2e4e59e22174661f4e973e6798806ecd2ff75d65e4\",\"license\":\"MIT\"},\"src/libraries/ShiftLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {SafeCastLib} from './SafeCastLib.sol';\\n\\nlibrary ShiftLib {\\n    using SafeCastLib for uint256;\\n\\n    /// @notice creates a bit mask\\n    /// @dev res = (2 ^ bits) - 1\\n    /// @param bits d\\n    /// @return res d\\n    /// @dev no need to check if \\\"bits\\\" is < 256 as anything greater than 255 will be treated the same\\n    function mask(uint8 bits) internal pure returns (uint256 res) {\\n        assembly {\\n            res := sub(shl(bits, 1), 1)\\n        }\\n    }\\n\\n    function fullsubmask(uint8 bits, uint8 pos) internal pure returns (uint256 res) {\\n        res = ~(mask(bits) << pos);\\n    }\\n\\n    function set(\\n        uint256 preStore,\\n        uint8 bits,\\n        uint8 pos,\\n        uint256 value\\n    ) internal pure returns (uint256 postStore) {\\n        postStore = preStore & fullsubmask(bits, pos);\\n\\n        assembly {\\n            value := shl(pos, value)\\n        }\\n\\n        postStore |= value;\\n    }\\n\\n    function get(\\n        uint256 store,\\n        uint8 bits,\\n        uint8 pos\\n    ) internal pure returns (uint256 value) {\\n        assembly {\\n            value := shr(pos, store)\\n        }\\n        value &= mask(bits);\\n    }\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                ARRAYS\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function getArray(uint256 store, uint8 pos) internal pure returns (uint8[] memory arr) {\\n        store = get(store, 64, pos);\\n\\n        arr = new uint8[](8);\\n        for (uint256 i = 0; i < 8; i++) {\\n            arr[i] = uint8(store & 0xff);\\n            store >>= 8;\\n        }\\n    }\\n\\n    function setArray(\\n        uint256 store,\\n        uint8 pos,\\n        uint8[] memory arr\\n    ) internal pure returns (uint256 res) {\\n        for (uint256 i = 8; i > 0; i--) {\\n            res |= uint256(arr[i - 1]) << ((8 * (i - 1)));\\n        }\\n\\n        res = set(store, 64, pos, res);\\n    }\\n}\\n\",\"keccak256\":\"0x8510e18448ed3be8b7ddbb4578be829e3c69946eb3e0fcecbb872671c127f8dd\",\"license\":\"MIT\"},\"src/libraries/Uint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/*\\n * @dev Uint operations.\\n */\\nlibrary Uint8 {\\n    function toByte(uint8 u) internal pure returns (bytes1 res) {\\n        res = bytes1(u);\\n    }\\n\\n    function toString(uint8 u) internal pure returns (string memory res) {\\n        res = Uint256.toString(uint256(u));\\n    }\\n}\\n\\n/*\\n * @dev Uint operations.\\n */\\nlibrary Uint256 {\\n    bytes16 private constant ALPHABET = '0123456789abcdef';\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toAscii(uint256 value) internal pure returns (bytes memory buffer) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return '0';\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n\\n        buffer = new bytes(digits);\\n\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return buffer;\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        return string(toAscii(value));\\n    }\\n\\n    /// @notice Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n    /// @dev Credit to Open Zeppelin under MIT license https://github.com/OpenZeppelin/openzeppelin-contracts/blob/243adff49ce1700e0ecb99fe522fb16cff1d1ddc/contracts/utils/Strings.sol#L55\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = '0';\\n        buffer[1] = 'x';\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = ALPHABET[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, 'Strings: hex length insufficient');\\n        return string(buffer);\\n    }\\n\\n    function toHexStringNoPrefix(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length);\\n        for (uint256 i = buffer.length; i > 0; i--) {\\n            buffer[i - 1] = ALPHABET[value & 0xf];\\n            value >>= 4;\\n        }\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x77227ba9d27345aa25ed68c66bfc24437a579ac74aae81be10d0d15757f545ba\",\"license\":\"MIT\"},\"src/logic/Anchor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport '../types/Types.sol';\\nimport './Matrix.sol';\\n\\nlibrary Anchor {\\n    using Matrix for Types.Matrix;\\n    using Version for Version.Memory;\\n\\n    function convertReceiversToAnchors(Types.Mix memory mix) internal pure {\\n        Types.Coordinate[] memory anchors;\\n        uint8 stat = 0;\\n        uint8 cal = 0;\\n\\n        for (uint8 i = 0; i < mix.version.staticReceivers.length; i++) {\\n            Types.Coordinate memory coordinate;\\n            if (mix.version.staticReceivers[i].exists) {\\n                stat++;\\n                coordinate = mix.version.staticReceivers[i];\\n                mix.receivers[i].coordinate.a = coordinate.b;\\n                mix.receivers[i].coordinate.b = coordinate.a;\\n                mix.receivers[i].coordinate.exists = true;\\n            } else if (mix.version.calculatedReceivers[i].exists) {\\n                // if (mix.feature != 0) continue;\\n\\n                cal++;\\n                if (anchors.length == 0) anchors = getAnchors(mix.matrix);\\n                coordinate = calculateReceiverCoordinate(mix, mix.version.calculatedReceivers[i], anchors);\\n                fledgeOutTheRluds(mix, coordinate, i);\\n            }\\n        }\\n    }\\n\\n    function fledgeOutTheRluds(\\n        Types.Mix memory mix,\\n        Types.Coordinate memory coordinate,\\n        uint8 index\\n    ) internal pure {\\n        Types.Rlud memory radii;\\n\\n        while (coordinate.a < mix.matrix.width - 1 && mix.matrix.version.bigMatrixHasPixelAt(coordinate.a + (radii.r + 1), coordinate.b)) {\\n            radii.r++;\\n        }\\n        while (coordinate.a != 0 && coordinate.a >= (radii.l + 1) && mix.matrix.version.bigMatrixHasPixelAt(coordinate.a - (radii.l + 1), coordinate.b)) {\\n            radii.l++;\\n        }\\n        while (coordinate.b != 0 && coordinate.b >= (radii.u + 1) && mix.matrix.version.bigMatrixHasPixelAt(coordinate.a, coordinate.b - (radii.u + 1))) {\\n            radii.u++;\\n        }\\n        while (coordinate.b < mix.matrix.height - 1 && mix.matrix.version.bigMatrixHasPixelAt(coordinate.a, coordinate.b + (radii.d + 1))) {\\n            radii.d++;\\n        }\\n\\n        if (!mix.receivers[index].coordinate.exists) {\\n            mix.receivers[index] = Types.Anchor({radii: radii, coordinate: coordinate});\\n        }\\n    }\\n\\n    function calculateReceiverCoordinate(\\n        Types.Mix memory mix,\\n        Types.Coordinate memory calculatedReceiver,\\n        Types.Coordinate[] memory anchors\\n    ) internal pure returns (Types.Coordinate memory coordinate) {\\n        coordinate.a = anchors[calculatedReceiver.a].a;\\n        coordinate.b = anchors[calculatedReceiver.a].b;\\n        coordinate.exists = true;\\n\\n        if (calculatedReceiver.b < 32) {\\n            coordinate.b = coordinate.b - calculatedReceiver.b;\\n        } else {\\n            coordinate.b = coordinate.b + (calculatedReceiver.b - 32);\\n        }\\n\\n        while (!mix.matrix.version.bigMatrixHasPixelAt(coordinate.a, coordinate.b)) {\\n            if (anchors[0].b > coordinate.b) {\\n                coordinate.b++;\\n            } else {\\n                coordinate.b--;\\n            }\\n        }\\n        return coordinate;\\n    }\\n\\n    function getAnchors(Types.Matrix memory matrix) internal pure returns (Types.Coordinate[] memory anchors) {\\n        (uint8 topOffset, uint8 bottomOffset, Types.Coordinate memory center) = getBox(matrix);\\n\\n        anchors = new Types.Coordinate[](5);\\n\\n        anchors[0] = center; // center\\n\\n        anchors[1] = Types.Coordinate({a: center.a, b: center.b - topOffset, exists: true}); // top\\n\\n        uint8 upperOffset = topOffset;\\n        if (upperOffset % 2 != 0) {\\n            upperOffset++;\\n        }\\n        anchors[2] = Types.Coordinate({a: center.a, b: center.b - (upperOffset / 2), exists: true}); // inner top\\n\\n        uint8 lowerOffset = bottomOffset;\\n        if (lowerOffset % 2 != 0) {\\n            lowerOffset++;\\n        }\\n        anchors[3] = Types.Coordinate({a: center.a, b: center.b + (lowerOffset / 2), exists: true}); // inner bottom\\n\\n        anchors[4] = Types.Coordinate({a: center.a, b: center.b + bottomOffset, exists: true}); // bottom\\n    }\\n\\n    function getBox(Types.Matrix memory matrix)\\n        internal\\n        pure\\n        returns (\\n            uint8 topOffset,\\n            uint8 bottomOffset,\\n            Types.Coordinate memory center\\n        )\\n    {\\n        center.a = (matrix.width) / 2;\\n        center.b = (matrix.height) / 2;\\n        center.exists = true;\\n\\n        bool topFound = false;\\n        bool bottomFound = false;\\n        bool sideFound = false;\\n        bool shouldExpandSide = true;\\n\\n        topOffset = 1;\\n        bottomOffset = 1;\\n        uint8 sideOffset = 1;\\n\\n        bool allFound = false;\\n\\n        while (!allFound) {\\n            if (shouldExpandSide = !shouldExpandSide && !sideFound) {\\n                if (\\n                    matrix.version.bigMatrixHasPixelAt(center.a - (sideOffset + 1), center.b - topOffset) &&\\n                    // potential top left\\n                    matrix.version.bigMatrixHasPixelAt(center.a + (sideOffset + 1), center.b - topOffset) &&\\n                    // potential top right\\n                    matrix.version.bigMatrixHasPixelAt(center.a - (sideOffset + 1), center.b + bottomOffset) &&\\n                    // potential bot left\\n                    matrix.version.bigMatrixHasPixelAt(center.a + (sideOffset + 1), center.b + bottomOffset)\\n                    // potential bot right\\n                ) {\\n                    sideOffset++;\\n                } else {\\n                    sideFound = true;\\n                }\\n            }\\n            if (!topFound) {\\n                if (\\n                    center.b - topOffset > 0 &&\\n                    matrix.version.bigMatrixHasPixelAt(center.a - sideOffset, center.b - (topOffset + 1)) &&\\n                    // potential top left\\n                    matrix.version.bigMatrixHasPixelAt(center.a + sideOffset, center.b - (topOffset + 1))\\n                    // potential top right\\n                ) {\\n                    topOffset++;\\n                } else {\\n                    topFound = true;\\n                }\\n            }\\n            if (!bottomFound) {\\n                if (\\n                    center.b + bottomOffset < matrix.height - 1 &&\\n                    matrix.version.bigMatrixHasPixelAt(center.a - sideOffset, center.b + (bottomOffset + 1)) &&\\n                    // potential bot left\\n                    matrix.version.bigMatrixHasPixelAt(center.a + sideOffset, center.b + (bottomOffset + 1))\\n                    // potenetial bot right\\n                ) {\\n                    bottomOffset++;\\n                } else {\\n                    bottomFound = true;\\n                }\\n            }\\n            if (bottomFound && topFound && sideFound) allFound = true;\\n        }\\n\\n        if (topOffset != bottomOffset) {\\n            uint8 newHeight = topOffset + bottomOffset + 1;\\n            uint8 relativeCenter = (newHeight % 2 == 0 ? newHeight : newHeight + 1) / 2;\\n            uint8 newCenter = relativeCenter + center.b - 1 - topOffset;\\n            if (newCenter > center.b) {\\n                uint8 diff = newCenter - center.b;\\n                topOffset += diff;\\n                bottomOffset > diff ? bottomOffset = bottomOffset - diff : bottomOffset = diff - bottomOffset;\\n            } else {\\n                uint8 diff = center.b - newCenter;\\n                topOffset > diff ? topOffset = topOffset - diff : topOffset = diff - topOffset;\\n                bottomOffset += diff;\\n            }\\n            center.b = newCenter;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0c5e9cf79b7793bcce58b7ec7393121e0150e56a9603a8dfd7ffac9ce73552a7\",\"license\":\"MIT\"},\"src/logic/Calculator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport './Matrix.sol';\\nimport './Rgba.sol';\\nimport './Anchor.sol';\\n\\nimport '../types/Descriptor.sol';\\nimport '../types/Version.sol';\\nimport '../types/Pixel.sol';\\n\\nimport '../types/Types.sol';\\n\\nlibrary Calculator {\\n    using Rgba for Types.Rgba;\\n    using Matrix for Types.Matrix;\\n    using Pixel for uint256;\\n\\n    function combine(\\n        uint256 featureLen,\\n        uint8 width,\\n        Version.Memory[][] memory versions\\n    ) internal view returns (Types.Matrix memory resa) {\\n        Types.Canvas memory canvas;\\n        canvas.matrix = Matrix.create(width, width);\\n        canvas.receivers = new Types.Anchor[](featureLen);\\n        Types.Coordinate memory coord;\\n        coord.a = width / 2 + 1;\\n        coord.b = width / 2 + 1;\\n        coord.exists = true;\\n        Types.Rlud memory r;\\n        for (uint8 i = 0; i < featureLen; i++) {\\n            canvas.receivers[i] = Types.Anchor({coordinate: coord, radii: r});\\n        }\\n        canvas.matrix.width = width;\\n        canvas.matrix.height = width;\\n\\n        Types.Mix memory mix;\\n        mix.matrix = Matrix.create(width, width);\\n        mix.receivers = new Types.Anchor[](featureLen);\\n\\n        // Types.Item[] memory items = Decoder.parseItems(inputs, featureLen);\\n\\n        for (uint8 i = 0; i < versions.length; i++) {\\n            if (versions[i].length > 0) {\\n                setMix(mix, versions[i], pickVersionIndex(canvas, versions[i]));\\n\\n                formatForCanvas(canvas, mix);\\n\\n                postionForCanvas(canvas, mix);\\n\\n                mergeToCanvas(canvas, mix);\\n\\n                calculateReceivers(mix);\\n\\n                updateReceivers(canvas, mix);\\n            }\\n        }\\n\\n        return canvas.matrix;\\n    }\\n\\n    /**\\n     * @notice\\n     * @devg\\n     */\\n    function postionForCanvas(Types.Canvas memory canvas, Types.Mix memory mix) internal view {\\n        Types.Anchor memory receiver = canvas.receivers[mix.feature];\\n        Types.Anchor memory anchor = mix.version.anchor;\\n\\n        // (bool overExists, uint256 overX, uint256 overY) = Descriptor.receiverOverride(descriptor, mix.feature);\\n\\n        // if (overExists) {\\n        //     receiver.coordinate.a = uint8(overX);\\n        //     receiver.coordinate.b = uint8(overY);\\n        // }\\n\\n        // uint256(mix.feature).log('mix.feature');\\n\\n        // uint256(anchor.coordinate.a).log(\\n        //     'anchor.coordinate.a',\\n        //     anchor.coordinate.b,\\n        //     'anchor.coordinate.b',\\n        //     receiver.coordinate.a,\\n        //     'receiver.coordinate.a',\\n        //     receiver.coordinate.b,\\n        //     'receiver.coordinate.b'\\n        // );\\n        // (bool overrides, uint8 overrideX, uint8 overrideY) = Version.getOverrides(mix.matrix.version);\\n\\n        // if (overrides && overrideX < canvas.matrix.width && overrideY < canvas.matrix.height) {\\n        //     mix.xoffset = overrideX;\\n        //     mix.yoffset = overrideY;\\n        // } else {\\n        mix.xoffset = receiver.coordinate.a > anchor.coordinate.a ? receiver.coordinate.a - anchor.coordinate.a : 0;\\n        mix.yoffset = receiver.coordinate.b > anchor.coordinate.b ? receiver.coordinate.b - anchor.coordinate.b : 0;\\n        // }\\n\\n        canvas.matrix.moveTo(mix.xoffset, mix.yoffset, mix.matrix.width, mix.matrix.height);\\n    }\\n\\n    /**\\n     * @notice\\n     * @dev\\n     */\\n    function formatForCanvas(Types.Canvas memory canvas, Types.Mix memory mix) internal pure {\\n        Types.Anchor memory receiver = canvas.receivers[mix.feature];\\n        Types.Anchor memory anchor = mix.version.anchor;\\n\\n        if (mix.version.expanders.l != 0 && anchor.radii.l != 0 && anchor.radii.l <= receiver.radii.l) {\\n            uint8 amount = receiver.radii.l - anchor.radii.l;\\n            mix.matrix.addColumnsAt(mix.version.expanders.l - 1, amount);\\n            anchor.coordinate.a += amount;\\n            if (mix.version.expanders.r > 0) mix.version.expanders.r += amount;\\n        }\\n        if (mix.version.expanders.r != 0 && anchor.radii.r != 0 && anchor.radii.r <= receiver.radii.r) {\\n            mix.matrix.addColumnsAt(mix.version.expanders.r - 1, receiver.radii.r - anchor.radii.r);\\n        }\\n        if (mix.version.expanders.d != 0 && anchor.radii.d != 0 && anchor.radii.d <= receiver.radii.d) {\\n            uint8 amount = receiver.radii.d - anchor.radii.d;\\n            mix.matrix.addRowsAt(mix.version.expanders.d, amount);\\n            anchor.coordinate.b += amount;\\n            if (mix.version.expanders.u > 0) mix.version.expanders.u += amount;\\n        }\\n        if (mix.version.expanders.u != 0 && anchor.radii.u != 0 && anchor.radii.u <= receiver.radii.u) {\\n            mix.matrix.addRowsAt(mix.version.expanders.u, receiver.radii.u - anchor.radii.u);\\n        }\\n    }\\n\\n    /**\\n     * @notice\\n     * @dev\\n     * makes the sorts versions\\n     */\\n    function pickVersionIndex(Types.Canvas memory canvas, Version.Memory[] memory versions) internal pure returns (uint8) {\\n        require(versions.length > 0, 'CALC:PVI:0');\\n        if (versions.length == 1) {\\n            return 0;\\n        }\\n        uint8 index = uint8(versions.length) - 1;\\n\\n        uint256 feature = (versions[0].data >> 75) & ShiftLib.mask(3);\\n\\n        while (index > 0) {\\n            uint256 bits = (versions[index].data >> 27) & ShiftLib.mask(24);\\n            Types.Rlud memory anchorRadii = Types.Rlud({\\n                r: uint8((bits >> 18) & ShiftLib.mask(6)),\\n                l: uint8((bits >> 12) & ShiftLib.mask(6)),\\n                u: uint8((bits >> 6) & ShiftLib.mask(6)),\\n                d: uint8((bits) & ShiftLib.mask(6)),\\n                exists: true\\n            });\\n\\n            if (checkRluds(anchorRadii, canvas.receivers[feature].radii)) {\\n                return index;\\n            }\\n            index = index - 1;\\n        }\\n\\n        return 0;\\n    }\\n\\n    function checkRluds(Types.Rlud memory r1, Types.Rlud memory r2) internal pure returns (bool) {\\n        return (r1.r <= r2.r && r1.l <= r2.l) || (r1.u <= r2.u && r1.d <= r2.d);\\n    }\\n\\n    /**\\n     * @notice\\n     * @dev done\\n     * makes the sorts versions\\n     */\\n    function setMix(\\n        Types.Mix memory res,\\n        Version.Memory[] memory versions,\\n        uint8 versionIndex\\n    ) internal view {\\n        uint256 radiiBits = (versions[versionIndex].data >> 27) & ShiftLib.mask(24);\\n        uint256 expanderBits = (versions[versionIndex].data >> 3) & ShiftLib.mask(24);\\n\\n        (uint256 x, uint256 y) = Version.getAnchor(versions[versionIndex]);\\n\\n        (uint256 width, uint256 height) = Version.getWidth(versions[versionIndex]);\\n\\n        res.version.width = uint8(width);\\n        res.version.height = uint8(height);\\n        res.version.anchor = Types.Anchor({\\n            radii: Types.Rlud({\\n                r: uint8((radiiBits >> 18) & ShiftLib.mask(6)),\\n                l: uint8((radiiBits >> 12) & ShiftLib.mask(6)),\\n                u: uint8((radiiBits >> 6) & ShiftLib.mask(6)),\\n                d: uint8((radiiBits >> 0) & ShiftLib.mask(6)),\\n                exists: true\\n            }),\\n            coordinate: Types.Coordinate({a: uint8(x), b: uint8(y), exists: true})\\n        });\\n        res.version.expanders = Types.Rlud({\\n            r: uint8((expanderBits >> 18) & ShiftLib.mask(6)),\\n            l: uint8((expanderBits >> 12) & ShiftLib.mask(6)),\\n            u: uint8((expanderBits >> 6) & ShiftLib.mask(6)),\\n            d: uint8((expanderBits >> 0) & ShiftLib.mask(6)),\\n            exists: true\\n        });\\n        res.version.calculatedReceivers = new Types.Coordinate[](8);\\n\\n        res.version.staticReceivers = new Types.Coordinate[](8);\\n\\n        for (uint256 i = 0; i < 8; i++) {\\n            (uint256 _x, uint256 _y, bool exists) = Version.getReceiverAt(versions[versionIndex], i, false);\\n            if (exists) {\\n                res.version.staticReceivers[i].a = uint8(_x);\\n                res.version.staticReceivers[i].b = uint8(_y);\\n                res.version.staticReceivers[i].exists = true;\\n            }\\n        }\\n\\n        for (uint256 i = 0; i < 8; i++) {\\n            (uint256 _x, uint256 _y, bool exists) = Version.getReceiverAt(versions[versionIndex], i, true);\\n            if (exists) {\\n                res.version.calculatedReceivers[i].a = uint8(_x);\\n                res.version.calculatedReceivers[i].b = uint8(_y);\\n                res.version.calculatedReceivers[i].exists = true;\\n            }\\n        }\\n\\n        // TODO - receivers?\\n        res.xoffset = 0;\\n        res.yoffset = 0;\\n        res.receivers = new Types.Anchor[](res.receivers.length);\\n        res.feature = uint8((versions[versionIndex].data >> 75) & ShiftLib.mask(3));\\n        res.matrix.set(versions[versionIndex], width, height);\\n    }\\n\\n    /**\\n     * @notice done\\n     * @dev\\n     */\\n    function updateReceivers(Types.Canvas memory canvas, Types.Mix memory mix) internal pure {\\n        for (uint8 i = 0; i < mix.receivers.length; i++) {\\n            Types.Anchor memory m = mix.receivers[i];\\n            if (m.coordinate.exists) {\\n                m.coordinate.a += mix.xoffset;\\n                m.coordinate.b += mix.yoffset;\\n                canvas.receivers[i] = m;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice done\\n     * @dev\\n     */\\n    function mergeToCanvas(Types.Canvas memory canvas, Types.Mix memory mix) internal view {\\n        // uint256 count;\\n        // uint256 count;\\n        while (canvas.matrix.next() && mix.matrix.next()) {\\n            uint256 canvasPixel = canvas.matrix.current();\\n            uint256 mixPixel = mix.matrix.current();\\n\\n            // if (mixPixel != 0 || canvasPixel != 0) {\\n            //     // assert(count++ < 100);\\n            //     // mixPixel.log('mixPixel', mixPixel.z(), 'mixPixel.z()', canvasPixel.z(), 'canvasPixel.z()');\\n            //     // canvasPixel.log('canvasPixel');\\n            // }\\n            // assert(mixPixel.e() && mixPixel.z() >= canvasPixel.z());\\n\\n            if (mixPixel.e() && mixPixel.z() >= canvasPixel.z()) {\\n                // canvasPixel.z() = mixPixel.z();\\n\\n                canvas.matrix.setCurrent(Rgba.combine(canvasPixel, mixPixel));\\n            }\\n        }\\n        canvas.matrix.moveBack();\\n        canvas.matrix.resetIterator();\\n        mix.matrix.resetIterator();\\n    }\\n\\n    /**\\n     * @notice poop\\n     * @dev\\n     */\\n    function calculateReceivers(Types.Mix memory mix) internal pure {\\n        Anchor.convertReceiversToAnchors(mix);\\n    }\\n\\n    // you combine one by one, and as you combine, child refs get overridden\\n\\n    // function add(Combinable comb, )\\n}\\n// add parent refs, if any - will use remys algo only for the canvas\\n// the canvas will always be defined as the first, so if it isnt (will not happen for dotnugg), we define the center as all the child refs\\n//  pick best version\\n// figure out offset\\n\\n// function merge(Canvas memory canvas, Matrix memory versionMatrix) internal pure {\\n//     for (int8 y = (canvas.matrix.data.length / 2) * -1; y <= canvas.matrix.data.length / 2; y++) {\\n//         for (int8 x = (canvas.matrix.width / 2) * -1; x <= canvas.matrix[j].width / 2; x++) {\\n//             Pixel memory canvas = canvas.matrix.at(x, y);\\n//             Pixel memory addr = combinable.matrix.at(x, y);\\n\\n//             if (addr != 0 && addr.layer > canvas.layer) {\\n//                 canvas.layer = addr.layer;\\n//                 canvas.rgba = Colors.combine(canvas.rgba, add.rgba);\\n//             }\\n//         }\\n//     }\\n// }\\n// Oh my god\\n// Becky, look at her butt\\n// Its so big\\n// She looks like one of those rap guys girlfriends\\n// Who understands those rap guys\\n// They only talk to her because she looks like a total prostitute\\n// I mean her butt\\n// It's just so big\\n// I can't believe it's so round\\n// It's just out there\\n// I mean, it's gross\\n// Look, she's just so black\\n\\n// *rap*\\n// I like big butts and I can not lie\\n// You other brothers can't deny\\n// That when a girl walks in with an itty bitty waist\\n// And a round thing in your face\\n// You get sprung\\n// Wanna pull up tough\\n// Cuz you notice that butt was stuffed\\n// Deep in the jeans she's wearing\\n// I'm hooked and I can't stop staring\\n// Oh, baby I wanna get with ya\\n// And take your picture\\n// My homeboys tried to warn me\\n// But that butt you got\\n// Make Me so horney\\n// Ooh, rump of smooth skin\\n// You say you wanna get in my benz\\n// Well use me use me cuz you aint that average groupy\\n\\n// I've seen them dancin'\\n// The hell with romancin'\\n// She's Sweat,Wet, got it goin like a turbo vette\\n\\n// I'm tired of magazines\\n// Saying flat butts are the thing\\n// Take the average black man and ask him that\\n// She gotta pack much back\\n\\n// So Fellas (yeah) Fellas(yeah)\\n// Has your girlfriend got the butt (hell yeah)\\n// Well shake it, shake it, shake it, shake it, shake that healthy butt\\n// Baby got back\\n\\n// (LA face with Oakland booty)\\n\\n// I like'em round and big\\n// And when I'm throwin a gig\\n// I just can't help myself\\n// I'm actin like an animal\\n// Now here's my scandal\\n\\n// I wanna get you home\\n// And UH, double up UH UH\\n// I aint talkin bout playboy\\n// Cuz silicone parts were made for toys\\n// I wannem real thick and juicy\\n// So find that juicy double\\n// Mixalot's in trouble\\n// Beggin for a piece of that bubble\\n// So I'm lookin' at rock videos\\n// Knockin these bimbos walkin like hoes\\n// You can have them bimbos\\n// I'll keep my women like Flo Jo\\n// A word to the thick soul sistas\\n// I wanna get with ya\\n// I won't cus or hit ya\\n// But I gotta be straight when I say I wanna --\\n// Til the break of dawn\\n// Baby Got it goin on\\n// Alot of pimps won't like this song\\n// Cuz them punks lie to hit it and quit it\\n// But I'd rather stay and play\\n// Cuz I'm long and I'm strong\\n// And I'm down to get the friction on\\n\\n// So ladies (yeah), Ladies (yeah)\\n// Do you wanna roll in my Mercedes (yeah)\\n// Then turn around\\n// Stick it out\\n// Even white boys got to shout\\n// Baby got back\\n\\n// (LA face with the Oakland booty)\\n\\n// Yeah baby\\n// When it comes to females\\n// Cosmo ain't got nothin to do with my selection\\n// 36-24-36\\n// Only if she's 5'3\\\"\\n\\n// So your girlfriend throws a Honda\\n// Playin workout tapes by Fonda\\n// But Fonda ain't got a motor in the back of her Honda\\n// My anaconda don't want none unless you've got buns hun\\n// You can do side bends or sit-ups, but please don't lose that butt\\n// Some brothers wanna play that hard role\\n// And tell you that the butt ain't gold\\n// So they toss it and leave it\\n// And I pull up quick to retrieve it\\n// So cosmo says you're fat\\n// Well I ain't down with that\\n// Cuz your waste is small and your curves are kickin\\n// And I'm thinkin bout stickin\\n// To the beanpole dames in the magazines\\n// You aint it miss thing\\n// Give me a sista I can't resist her\\n// Red beans and rice did miss her\\n// Some knucklehead tried to dis\\n// Cuz his girls were on my list\\n// He had game but he chose to hit 'em\\n// And pulled up quick to get with 'em\\n// So ladies if the butt is round\\n// And you wanna triple X throw down\\n// Dial 1-900-MIXALOT and kick them nasty thoughts\\n// Baby got back\\n// Baby got back\\n// Little in tha middle but she got much back x4\\n\",\"keccak256\":\"0x1a8b825a240a6eafb272fc36a0d0f6a85847ec4ffa51e57658c435ede88c925b\",\"license\":\"MIT\"},\"src/logic/Matrix.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {Types} from '../types/Types.sol';\\n\\nimport '../logic/Rgba.sol';\\n\\nimport '../types/Version.sol';\\n\\nlibrary Matrix {\\n    using Rgba for Types.Rgba;\\n    using Version for Version.Memory;\\n\\n    function create(uint8 width, uint8 height) internal pure returns (Types.Matrix memory res) {\\n        require(width % 2 == 1 && height % 2 == 1, 'ML:C:0');\\n\\n        Version.initBigMatrix(res.version, width);\\n        res.version.setWidth(width, height);\\n\\n        // res.data = new Types.Pixel[][](height);\\n        // for (uint8 i = 0; i < height; i++) {\\n        //     res.data[i] = new Types.Pixel[](width);\\n        // }\\n    }\\n\\n    function moveTo(\\n        Types.Matrix memory matrix,\\n        uint8 xoffset,\\n        uint8 yoffset,\\n        uint8 width,\\n        uint8 height\\n    ) internal pure {\\n        matrix.currentUnsetX = xoffset;\\n        matrix.currentUnsetY = yoffset;\\n        matrix.startX = xoffset;\\n        matrix.width = width + xoffset;\\n        matrix.height = height + yoffset;\\n    }\\n\\n    function next(Types.Matrix memory matrix) internal pure returns (bool res) {\\n        res = next(matrix, matrix.width);\\n    }\\n\\n    function next(Types.Matrix memory matrix, uint8 width) internal pure returns (bool res) {\\n        if (matrix.init) {\\n            if (width <= matrix.currentUnsetX + 1) {\\n                if (matrix.height == matrix.currentUnsetY + 1) {\\n                    return false;\\n                }\\n                matrix.currentUnsetX = matrix.startX; // 0 by default\\n                matrix.currentUnsetY++;\\n            } else {\\n                matrix.currentUnsetX++;\\n            }\\n        } else {\\n            matrix.init = true;\\n        }\\n        res = true;\\n    }\\n\\n    function current(Types.Matrix memory matrix) internal pure returns (uint256 res) {\\n        res = matrix.version.getBigMatrixPixelAt(matrix.currentUnsetX, matrix.currentUnsetY);\\n    }\\n\\n    function setCurrent(Types.Matrix memory matrix, uint256 pixel) internal pure {\\n        matrix.version.setBigMatrixPixelAt(matrix.currentUnsetX, matrix.currentUnsetY, pixel);\\n    }\\n\\n    function resetIterator(Types.Matrix memory matrix) internal pure {\\n        matrix.currentUnsetX = 0;\\n        matrix.currentUnsetY = 0;\\n        matrix.startX = 0;\\n        matrix.init = false;\\n    }\\n\\n    function moveBack(Types.Matrix memory matrix) internal pure {\\n        (uint256 width, uint256 height) = matrix.version.getWidth();\\n        matrix.width = uint8(width);\\n        matrix.height = uint8(height);\\n    }\\n\\n    function set(\\n        Types.Matrix memory matrix,\\n        Version.Memory memory data,\\n        uint256 groupWidth,\\n        uint256 groupHeight\\n    ) internal view {\\n        matrix.height = uint8(groupHeight);\\n        uint256 feature = data.getFeature();\\n\\n        for (uint256 y = 0; y < groupHeight; y++) {\\n            for (uint256 x = 0; x < groupWidth; x++) {\\n                next(matrix, uint8(groupWidth));\\n                uint256 col = Version.getPixelAt(data, x, y);\\n                if (col != 0) {\\n                    (, uint256 color, uint256 zindex) = Version.getPalletColorAt(data, col);\\n                    // (zindex).log('zindex', (zindex << 32), '<< 32', (feature << 36) | (zindex << 32) | color, 'whole');\\n                    setCurrent(matrix, (feature << 36) | (zindex << 32) | color);\\n                } else {\\n                    setCurrent(matrix, 0x0000000000);\\n                }\\n            }\\n        }\\n\\n        // require(totalLength % groupWidth == 0, 'MTRX:SET:0');\\n        // require(totalLength / groupWidth == groupHeight, 'MTRX:SET:1');\\n\\n        matrix.width = uint8(groupWidth);\\n        // // matrix.height = uint8(totalLength / groupWidth);\\n\\n        resetIterator(matrix);\\n    }\\n\\n    function addRowsAt(\\n        Types.Matrix memory matrix, /// cowboy hat\\n        uint8 index,\\n        uint8 amount\\n    ) internal pure {\\n        // require(index < matrix.data[0].length, 'MAT:ACA:0');\\n        for (uint256 i = 0; i < matrix.height; i++) {\\n            for (uint256 j = matrix.height; j > index; j--) {\\n                if (j < index) break;\\n                matrix.version.setBigMatrixPixelAt(i, j + amount, matrix.version.getBigMatrixPixelAt(i, j));\\n            }\\n            // \\\"<=\\\" is because this loop needs to run [amount] times\\n            for (uint256 j = index + 1; j <= index + amount; j++) {\\n                matrix.version.setBigMatrixPixelAt(i, j, matrix.version.getBigMatrixPixelAt(i, index));\\n            }\\n        }\\n        matrix.height += amount;\\n    }\\n\\n    function addColumnsAt(\\n        Types.Matrix memory matrix, /// cowboy hat\\n        uint8 index,\\n        uint8 amount\\n    ) internal pure {\\n        // require(index < matrix.data[0].length, 'MAT:ACA:0');\\n        for (uint256 i = 0; i < matrix.width; i++) {\\n            for (uint256 j = matrix.width; j > index; j--) {\\n                if (j < index) break;\\n                matrix.version.setBigMatrixPixelAt(j + amount, i, matrix.version.getBigMatrixPixelAt(j, i));\\n            }\\n            // \\\"<=\\\" is because this loop needs to run [amount] times\\n            for (uint256 j = index + 1; j <= index + amount; j++) {\\n                matrix.version.setBigMatrixPixelAt(j, i, matrix.version.getBigMatrixPixelAt(index, i));\\n            }\\n        }\\n        matrix.width += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x61f6cf3c52230652077bfa7082cab1ffb7bd939d4ee17c5ed21924339893c8a9\",\"license\":\"MIT\"},\"src/logic/Rgba.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {Types} from '../types/Types.sol';\\n\\nimport '../types/Pixel.sol';\\n\\nlibrary Rgba {\\n    using Pixel for uint256;\\n\\n    function combine(uint256 base, uint256 mix) internal pure returns (uint256 res) {\\n        if (mix.a() == 255 || base.a() == 0) {\\n            res = mix;\\n            return res;\\n        }\\n\\n        res |= uint256((base.r() * (255 - mix.a()) + mix.r() * mix.a()) / 255) << 24;\\n        res |= uint256((base.g() * (255 - mix.a()) + mix.g() * mix.a()) / 255) << 16;\\n        res |= uint256((base.b() * (255 - mix.a()) + mix.b() * mix.a()) / 255) << 8;\\n        res |= 255;\\n    }\\n}\\n\",\"keccak256\":\"0xe48cc1c1aa378f9b2bf4a2209587a28054a14e8780802daca16affd460a5aef7\",\"license\":\"MIT\"},\"src/logic/Svg.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport '../libraries/Uint.sol';\\n\\nlibrary Svg {\\n    using Uint256 for uint256;\\n\\n    function getPixelAt(\\n        uint256[] memory file,\\n        uint256 x,\\n        uint256 y,\\n        uint256 width\\n    ) internal pure returns (uint256 res) {\\n        uint256 index = x + (y * width);\\n\\n        res = (file[index / 6] >> (40 * (index % 6))) & 0xffffffff;\\n    }\\n\\n    function buildSvg(\\n        uint256[] memory file,\\n        uint256 width,\\n        uint256 height,\\n        uint8 zoom\\n    ) internal pure returns (bytes memory res) {\\n        bytes memory header = abi.encodePacked(\\n            hex'3c7376672076696577426f783d2730203020', //\\\"<svg Box='0 0 \\\",\\n            (zoom * width).toString(),\\n            hex'20', // ' ',\\n            (zoom * width).toString(),\\n            hex'20272077696474683d27', //\\\"' width='\\\",\\n            (zoom * width).toString(),\\n            hex'27206865696768743d27', //  \\\"' height='\\\",\\n            (zoom * width).toString(),\\n            hex'2720786d6c6e733d27687474703a2f2f7777772e77332e6f72672f323030302f7376672720786d6c6e733a786c696e6b3d27687474703a2f2f7777772e77332e6f72672f313939392f786c696e6b273e5c6e' // \\\"' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'>\\\\n\\\"\\n        );\\n\\n        bytes memory footer = hex'3c2f7376673e';\\n\\n        uint256 last = getPixelAt(file, 0, 0, width);\\n        uint256 count = 1;\\n\\n        // bytes[] memory rects = new bytes[](35);\\n        bytes memory body;\\n\\n        for (uint256 y = 0; y < height; y++) {\\n            for (uint256 x = 0; x < height; x++) {\\n                if (y == 0 && x == 0) x++;\\n                uint256 curr = getPixelAt(file, x, y, width);\\n                if (curr == last) {\\n                    count++;\\n                    continue;\\n                } else {\\n                    // curr.log('yup');\\n                    // rects[index++] = getRekt(last, x - count, y, count, 1);\\n                    body = abi.encodePacked(body, getRekt(last, (x - count) * zoom, y * zoom, 1 * zoom, count * zoom));\\n                    last = curr;\\n                    count = 1;\\n                }\\n            }\\n            // rects[index++] = getRekt(last, 33 - count, y, count, 1);\\n            body = abi.encodePacked(body, getRekt(last, (width - count) * zoom, y * zoom, 1 * zoom, count * zoom));\\n            last = 0;\\n            count = 0;\\n        }\\n\\n        res = abi.encodePacked(header, body, footer);\\n    }\\n\\n    function getRekt(\\n        uint256 pixel,\\n        uint256 x,\\n        uint256 y,\\n        uint256 xlen,\\n        uint256 ylen\\n    ) internal pure returns (bytes memory res) {\\n        if (pixel & 0xff == 0) return '';\\n\\n        res = abi.encodePacked(\\n            \\\"\\\\t<rect fill='#\\\",\\n            pixel.toHexStringNoPrefix(4),\\n            hex'2720783d27',\\n            x.toAscii(),\\n            hex'2720793d27',\\n            y.toAscii(),\\n            hex'27206865696768743d27',\\n            xlen.toAscii(),\\n            hex'272077696474683d27',\\n            ylen.toAscii(),\\n            \\\"'/>\\\\n\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x350e926cef0ea7d26eebc99ac0c09b2813b5728e41b3ba1f2daae510ed1227a1\",\"license\":\"MIT\"},\"src/types/Descriptor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// 1.5 x each feature for a coordinate (0.75 x 2)\\n// 2 byte each feature for expanders coordinate (16, 16, 16, 16)\\n// 1 byte each feature for expanders amount (4, 4, 4, 4)\\n\\n// 3 | 1/2 bytes - base ---- 8 | .5 --- 8 | .5   ---- 1 vars\\n\\n// 8 | 1 bytes - head\\n// 8 | 1 bytes - eyes\\n// 8 | 1 bytes - mouth\\n// 8 | 1 bytes - back\\n// 8 | 1 bytes - hair\\n// 8 | 1 bytes - neck ---- 48 | 6 --- 51 | 6.5    ----- 6 vars\\n\\n// 8 | 1 bytes - head\\n// 8 | 1 bytes - eyes\\n// 8 | 1 bytes - mouth\\n// 8 | 1 bytes - back\\n// 8 | 1 bytes - hair\\n// 8 | 1 bytes - neck ---- 48 | 6  -- 99 | 12.5 ---- 6 vars\\n\\n// 12 | 1.5 bytes - head coordinate\\n// 12 | 1.5 bytes - eyes coordinate\\n// 12 | 1.5 bytes - mouth coordinate\\n// 12 | 1.5 bytes - back coordinate\\n// 12 | 1.5 bytes - hair coordinate\\n// 12 | 1.5 bytes - neck coordinate ---- 159-    ----- 12 vars\\n\\n// 3            - expander 3 feat      ------- 3 vars\\n\\n// 3            - expander 1 feat\\n// 24 | 3 bytes - expander 1\\n// 3            - expander 2 feat\\n// 24 | 3 bytes - expander 2\\n// 24 | 3 bytes - expander 3       - 24 vars\\n\\nlibrary Descriptor {\\n    // struct Memory {\\n    //     IDotNugg.Rlud[] expanderOffset; // 0 - 8\\n    //     IDotNugg.Rlud[] expanderOffsetDirection; // 0 - 1\\n    //     IDotNugg.Rlud[] expanderAmount; // 0 - 3\\n    //     IDotNugg.Coordinate[] anchors; // 0 - 63\\n    // }\\n\\n    // function parse(uint256 input) internal pure returns (Memory memory m) {\\n    //     m.expanderOffset = new IDotNugg.Rlud[](8);\\n    //     m.expanderOffsetDirection = new IDotNugg.Rlud[](8);\\n    //     m.expanderAmount = new IDotNugg.Rlud[](8);\\n    //     m.anchors = new IDotNugg.Coordinate[](8);\\n\\n    //     uint256[] memory tmp = new uint256[](2);\\n    //     tmp[0] = 1;\\n    //     tmp[1] = input;\\n\\n    //     (, BitReader.Memory memory reader) = BitReader.init(tmp);\\n\\n    //     reader.select(99);\\n\\n    //     for (uint256 i = 1; i < 7; i++) {\\n    //         m.anchors[i].a = uint8(reader.select(6));\\n    //         m.anchors[i].b = uint8(reader.select(6));\\n    //         m.anchors[i].exists = m.anchors[i].a != 0 || m.anchors[i].b != 0;\\n    //     }\\n    // }\\n\\n    function receiverOverride(uint256 input, uint256 feature)\\n        internal\\n        pure\\n        returns (\\n            bool exists,\\n            uint256 x,\\n            uint256 y\\n        )\\n    {\\n        return (false, 15, 15);\\n    }\\n}\\n\",\"keccak256\":\"0x4c3e5241e1b0b6653e6c3c1283056b821cae5270c9375ec60d4663397d0b040d\",\"license\":\"MIT\"},\"src/types/Pixel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nlibrary Pixel {\\n    function r(uint256 input) internal pure returns (uint256 res) {\\n        res = (input >> 24) & 0xff;\\n    }\\n\\n    function g(uint256 input) internal pure returns (uint256 res) {\\n        res = (input >> 16) & 0xff;\\n    }\\n\\n    function b(uint256 input) internal pure returns (uint256 res) {\\n        res = (input >> 8) & 0xff;\\n    }\\n\\n    function a(uint256 input) internal pure returns (uint256 res) {\\n        res = input & 0xff;\\n    }\\n\\n    function z(uint256 input) internal pure returns (uint256 res) {\\n        res = (input >> 32) & 0xf;\\n    }\\n\\n    function f(uint256 input) internal pure returns (uint256 res) {\\n        res = (input >> 36) & 0xf;\\n    }\\n\\n    function e(uint256 input) internal pure returns (bool res) {\\n        res = input != 0x00;\\n    }\\n}\\n\",\"keccak256\":\"0x53f1edc994958445503ea2762a194b042e191af317679ad44c42e281d316cda5\",\"license\":\"MIT\"},\"src/types/Types.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {Version as NewVersion} from '../types/Version.sol';\\n\\nlibrary Types {\\n    struct Rlud {\\n        bool exists;\\n        uint8 r;\\n        uint8 l;\\n        uint8 u;\\n        uint8 d;\\n    }\\n\\n    struct Rgba {\\n        uint8 r;\\n        uint8 g;\\n        uint8 b;\\n        uint8 a;\\n    }\\n\\n    struct Anchor {\\n        Rlud radii;\\n        Coordinate coordinate;\\n    }\\n\\n    struct Coordinate {\\n        uint8 a; // anchorId\\n        uint8 b; // yoffset\\n        bool exists;\\n    }\\n\\n    struct Version {\\n        uint8 width;\\n        uint8 height;\\n        Anchor anchor;\\n        // these must be in same order as canvas receivers, respectively\\n        Coordinate[] calculatedReceivers; // can be empty\\n        Coordinate[] staticReceivers; // can be empty\\n        Rlud expanders;\\n        bytes data;\\n    }\\n\\n    struct Canvas {\\n        Matrix matrix;\\n        Anchor[] receivers;\\n    }\\n\\n    struct Mix {\\n        uint8 feature;\\n        Version version;\\n        Matrix matrix;\\n        Anchor[] receivers;\\n        uint8 yoffset;\\n        uint8 xoffset;\\n    }\\n\\n    struct Matrix {\\n        uint8 width;\\n        uint8 height;\\n        NewVersion.Memory version;\\n        uint8 currentUnsetX;\\n        uint8 currentUnsetY;\\n        bool init;\\n        uint8 startX;\\n    }\\n}\\n\",\"keccak256\":\"0x47e33f18fa60b26856ec9185781093c18b2f958f3cfaa86dcdbd5e7c5a8f45e2\",\"license\":\"MIT\"},\"src/types/Version.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {ShiftLib} from '../libraries/ShiftLib.sol';\\nimport {BitReader} from '../libraries/BitReader.sol';\\nimport {SafeCastLib} from '../libraries/SafeCastLib.sol';\\n\\nlibrary Version {\\n    using BitReader for BitReader.Memory;\\n    using SafeCastLib for uint256;\\n\\n    struct Memory {\\n        uint256[] pallet;\\n        uint256[] minimatrix;\\n        uint256[] bigmatrix;\\n        uint256 receivers;\\n        uint256 data;\\n    }\\n\\n    function parse(\\n        uint256[][] memory data,\\n        uint8[] memory xovers,\\n        uint8[] memory yovers\\n    ) internal view returns (Memory[][] memory m) {\\n        m = new Memory[][](data.length);\\n\\n        for (uint256 j = 0; j < data.length; j++) {\\n            (bool empty, BitReader.Memory memory reader) = BitReader.init(data[j]);\\n\\n            if (empty) continue;\\n\\n            // 32 bits: NUGG\\n            require(reader.select(32) == 0x4e554747, 'DEC:PI:0');\\n\\n            uint256 feature = reader.select(3);\\n\\n            uint256[] memory pallet = parsePallet(reader);\\n\\n            uint256 versionLength = reader.select(2) + 1;\\n\\n            m[j] = new Memory[](versionLength);\\n\\n            for (uint256 i = 0; i < versionLength; i++) {\\n                m[j][i].data = parseData(reader, feature, xovers, yovers);\\n\\n                m[j][i].receivers = parseReceivers(reader);\\n\\n                (uint256 width, uint256 height) = getWidth(m[j][i]);\\n\\n                m[j][i].minimatrix = parseMiniMatrix(reader, width, height);\\n\\n                m[j][i].pallet = pallet;\\n\\n                // (uint256 ancX, uint256 ancY) = getAnchor(m[j][i]);\\n                // (, , uint256 ancZ) = getPalletColorAt(m[j][i], getPixelAt(m[j][i], ancX, ancY));\\n\\n                // setZ(m[j][i], ancZ);\\n            }\\n        }\\n    }\\n\\n    function parsePallet(BitReader.Memory memory reader) internal pure returns (uint256[] memory res) {\\n        uint256 palletLength = reader.select(4) + 1;\\n\\n        res = new uint256[](palletLength + 1);\\n\\n        for (uint256 i = 0; i < palletLength; i++) {\\n            uint256 working = 0;\\n            // 4 bits: zindex\\n            working |= (reader.select(4) << 32);\\n\\n            uint256 color;\\n            uint256 selecta = reader.select(1);\\n            if (selecta == 1) {\\n                color = 0x000000;\\n            } else {\\n                uint256 r = reader.select(8);\\n                uint256 g = reader.select(8);\\n                uint256 b = reader.select(8);\\n\\n                color = (r << 16) | (g << 8) | b;\\n            }\\n\\n            // // 1 or 25 bits: rgb\\n            working |= color << 8;\\n\\n            // // 1 or 8 bits: a\\n            working |= (reader.select(1) == 0x1 ? 0xff : reader.select(8));\\n\\n            res[i + 1] = working;\\n        }\\n    }\\n\\n    function parseData(\\n        BitReader.Memory memory reader,\\n        uint256 feature,\\n        uint8[] memory xovers,\\n        uint8[] memory yovers\\n    ) internal pure returns (uint256 res) {\\n        // 12 bits: coordinate - anchor x and y\\n\\n        // if (xovers.length == 8 && yovers.length == 8 && (xovers[feature] != 0 || yovers[feature] != 0)) {\\n        //     res |= uint256(uint256(yovers[feature]).safe6()) << 84;\\n        //     res |= uint256(uint256(xovers[feature]).safe6()) << 78;\\n        // }\\n\\n        res |= feature << 75;\\n\\n        uint256 width = reader.select(6);\\n        uint256 height = reader.select(6);\\n\\n        res |= height << 69; // heighth and width\\n        res |= width << 63;\\n\\n        uint256 anchorX = reader.select(6);\\n        uint256 anchorY = reader.select(6);\\n\\n        if (xovers.length == 8 && yovers.length == 8 && (xovers[feature] != 0 || yovers[feature] != 0)) {\\n            res |= uint256(yovers[feature]) << 57;\\n            res |= uint256(xovers[feature]) << 51;\\n        } else {\\n            // 12 bits: coordinate - anchor x and y\\n            res |= anchorX << 51;\\n            res |= anchorY << 57;\\n        }\\n\\n        // 1 or 25 bits: rlud - radii\\n        res |= (reader.select(1) == 0x1 ? 0x000000 : reader.select(24)) << 27;\\n\\n        // 1 or 25 bits: rlud - expanders\\n        res |= (reader.select(1) == 0x1 ? 0x000000 : reader.select(24)) << 3;\\n    }\\n\\n    function parseReceivers(BitReader.Memory memory reader) internal pure returns (uint256 res) {\\n        uint256 receiversLength = reader.select(1) == 0x1 ? 0x1 : reader.select(4);\\n\\n        for (uint256 j = 0; j < receiversLength; j++) {\\n            uint256 receiver = 0;\\n\\n            uint256 yOrYOffset = reader.select(6);\\n\\n            uint256 xOrPreset = reader.select(6);\\n\\n            // rFeature\\n            uint256 rFeature = reader.select(3);\\n\\n            uint256 calculated = reader.select(1);\\n\\n            if (calculated == 0x1) {\\n                receiver |= yOrYOffset << 6;\\n                receiver |= xOrPreset;\\n            } else {\\n                receiver |= xOrPreset << 6;\\n                receiver |= yOrYOffset;\\n            }\\n\\n            receiver <<= ((rFeature * 12) + (calculated == 0x1 ? 128 : 0));\\n\\n            res |= receiver;\\n        }\\n    }\\n\\n    function parseMiniMatrix(\\n        BitReader.Memory memory reader,\\n        uint256 height,\\n        uint256 width\\n    ) internal pure returns (uint256[] memory res) {\\n        uint256 groupsLength = reader.select(1) == 0x1 ? reader.select(8) + 1 : reader.select(16) + 1;\\n\\n        res = new uint256[]((height * width) / 64 + 1);\\n\\n        uint256 index = 0;\\n\\n        for (uint256 a = 0; a < groupsLength; a++) {\\n            uint256 len = reader.select(2) + 1;\\n\\n            if (len == 4) len = reader.select(4) + 4;\\n\\n            uint256 key = reader.select(4);\\n\\n            for (uint256 i = 0; i < len; i++) {\\n                res[index / 64] |= (key << (4 * (index % 64)));\\n                index++;\\n            }\\n        }\\n    }\\n\\n    function getReceiverAt(\\n        Memory memory m,\\n        uint256 index,\\n        bool calculated\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint256 x,\\n            uint256 y,\\n            bool exists\\n        )\\n    {\\n        uint256 data = m.receivers >> (index * 12 + (calculated ? 128 : 0));\\n\\n        data &= ShiftLib.mask(12);\\n\\n        x = data & ShiftLib.mask(6);\\n        y = data >> 6;\\n\\n        exists = x != 0 || y != 0;\\n    }\\n\\n    function setReceiverAt(\\n        Memory memory m,\\n        uint256 index,\\n        bool calculated,\\n        uint256 x,\\n        uint256 y\\n    ) internal pure returns (uint256 res) {\\n        // yOrYOffset\\n        res |= y << 6;\\n\\n        //xOrPreset\\n        res |= x;\\n\\n        m.receivers |= res << ((index * 12) + (calculated ? 128 : 0));\\n    }\\n\\n    function setOffset(\\n        Memory memory m,\\n        bool negX,\\n        uint256 diffX,\\n        bool negY,\\n        uint256 diffY\\n    ) internal pure {\\n        m.data |= ((((diffX & 0xff) << 1) | (((negX ? 0x1 : 0x0)))) << 85);\\n        m.data |= ((((diffY & 0xff) << 1) | ((((negY ? 0x1 : 0x0))))) << 94);\\n    }\\n\\n    function getOffset(Memory memory m)\\n        internal\\n        pure\\n        returns (\\n            bool negX,\\n            uint256 diffX,\\n            bool negY,\\n            uint256 diffY\\n        )\\n    {\\n        uint256 data = m.data;\\n        negX = (data >> 85) & 0x1 == 1;\\n        diffX = (data >> 86) & 0xff;\\n        negY = (data >> 94) & 0x1 == 1;\\n        diffY = (data >> 95) & 0xff;\\n    }\\n\\n    function setZ(Memory memory m, uint256 z) internal pure {\\n        require(z <= 0xf, 'VERS:SETZ:0');\\n        m.data |= z << 78;\\n    }\\n\\n    function getZ(Memory memory m) internal pure returns (uint256 res) {\\n        res = (m.data >> 78) & 0xf;\\n    }\\n\\n    function setFeature(Memory memory m, uint256 z) internal pure {\\n        require(z <= ShiftLib.mask(3), 'VERS:SETF:0');\\n        m.data &= ShiftLib.fullsubmask(3, 75);\\n        m.data |= (z << 75);\\n    }\\n\\n    function getFeature(Memory memory m) internal pure returns (uint256 res) {\\n        res = (m.data >> 75) & ShiftLib.mask(3);\\n    }\\n\\n    function getWidth(Memory memory m) internal pure returns (uint256 width, uint256 height) {\\n        // yOrYOffset\\n        width = (m.data >> 63) & ShiftLib.mask(6);\\n        height = (m.data >> 69) & ShiftLib.mask(6);\\n    }\\n\\n    function setWidth(\\n        Memory memory m,\\n        uint256 w,\\n        uint256 h\\n    ) internal pure {\\n        require(w <= ShiftLib.mask(6), 'VERS:SETW:0');\\n        require(h <= ShiftLib.mask(6), 'VERS:SETW:1');\\n\\n        m.data &= ShiftLib.fullsubmask(12, 63);\\n\\n        m.data |= (w << 63);\\n        m.data |= (h << 69);\\n    }\\n\\n    function getAnchor(Memory memory m) internal pure returns (uint256 x, uint256 y) {\\n        // yOrYOffset\\n        x = (m.data >> 51) & ShiftLib.mask(6);\\n        y = (m.data >> 57) & ShiftLib.mask(6);\\n    }\\n\\n    function getOverrides(Memory memory m)\\n        internal\\n        pure\\n        returns (\\n            bool shouldOverride,\\n            uint8 x,\\n            uint8 y\\n        )\\n    {\\n        // yOrYOffset\\n        x = uint8((m.data >> 78) & ShiftLib.mask(6));\\n        y = uint8((m.data >> 84) & ShiftLib.mask(6));\\n\\n        shouldOverride = x != 0 && y != 0;\\n    }\\n\\n    function getPixelAt(\\n        Memory memory m,\\n        uint256 x,\\n        uint256 y\\n    ) internal pure returns (uint256 palletKey) {\\n        (uint256 width, ) = getWidth(m);\\n        uint256 index = x + (y * width);\\n\\n        if (index / 64 >= m.minimatrix.length) return 0x0;\\n\\n        palletKey = (m.minimatrix[index / 64] >> (4 * (index % 64))) & 0xf;\\n    }\\n\\n    function getPalletColorAt(Memory memory m, uint256 index)\\n        internal\\n        pure\\n        returns (\\n            uint256 res,\\n            uint256 color,\\n            uint256 zindex\\n        )\\n    {\\n        // res = (m.pallet[index / 7] >> (36 * (index % 7))) & ShiftLib.mask(36);\\n        res = m.pallet[index];\\n\\n        color = res & 0xffffffff;\\n\\n        zindex = (res >> 32) & 0xf;\\n    }\\n\\n    // function getDiffOfReceiverAt(Memory memory base, Memory memory mix)\\n    //     internal\\n    //     pure\\n    //     returns (\\n    //         bool negX,\\n    //         uint256 diffX,\\n    //         bool negY,\\n    //         uint256 diffY\\n    //     )\\n    // {\\n    //     (uint256 recX, uint256 recY, ) = getReceiverAt(base, (mix.data >> 75) & ShiftLib.mask(3), false);\\n    //     (uint256 ancX, uint256 ancY, ) = getAnchor(mix);\\n\\n    //     negX = recX < ancX;\\n    //     diffX = negX ? ancX - recX : recX - ancX;\\n    //     negY = recY < ancY;\\n    //     diffY = negY ? ancY - recY : recY - ancY;\\n    // }\\n\\n    function initBigMatrix(Memory memory m, uint256 width) internal pure {\\n        m.bigmatrix = new uint256[](((width * width) / 6) + 2);\\n    }\\n\\n    function setBigMatrixPixelAt(\\n        Memory memory m,\\n        uint256 x,\\n        uint256 y,\\n        uint256 color\\n    ) internal pure {\\n        (uint256 width, ) = getWidth(m);\\n\\n        uint256 index = x + (y * width);\\n\\n        // m.bigmatrix[index / 6] |= (color << (40 * (index % 6)));\\n\\n        setBigMatrixPixelAt(m, index, color);\\n    }\\n\\n    function setBigMatrixPixelAt(\\n        Memory memory m,\\n        uint256 index,\\n        uint256 color\\n    ) internal pure {\\n        // require(m.bigmatrix.length > index / 6, 'VERS:SBM:0');\\n\\n        if (m.bigmatrix.length > index / 6) {\\n            uint8 offset = (40 * (index % 6)).safe8();\\n            m.bigmatrix[index / 6] &= ShiftLib.fullsubmask(40, offset);\\n            m.bigmatrix[index / 6] |= (color << offset);\\n        }\\n    }\\n\\n    function getBigMatrixPixelAt(\\n        Memory memory m,\\n        uint256 x,\\n        uint256 y\\n    ) internal pure returns (uint256 res) {\\n        (uint256 width, ) = getWidth(m);\\n\\n        uint256 index = x + (y * width);\\n\\n        if (index / 6 >= m.bigmatrix.length) return 0x0000000000;\\n\\n        res = (m.bigmatrix[index / 6] >> (40 * (index % 6))) & 0xffffffffff;\\n    }\\n\\n    function bigMatrixHasPixelAt(\\n        Memory memory m,\\n        uint256 x,\\n        uint256 y\\n    ) internal pure returns (bool res) {\\n        uint256 pix = getBigMatrixPixelAt(m, x, y);\\n\\n        res = pix & 0xff != 0x00;\\n    }\\n\\n    function bigMatrixWithData(Memory memory m) internal pure returns (uint256[] memory res) {\\n        res = m.bigmatrix;\\n        res[res.length - 1] = m.data;\\n    }\\n}\\n\",\"keccak256\":\"0xd546d69e4f654918f16a02c32035d3317c7568cf4ab6367887918209b4b824c3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506153ee806100206000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80635edd57e3116100665780635edd57e3146101355780636b380df4146101485780639cd7d00714610168578063beca7d971461017b578063e60bf69b1461018e57600080fd5b80630decbeec146100a3578063191adaf8146100cc5780632b4383b3146100df5780634796cd78146100ff578063581ee1d614610120575b600080fd5b6100b66100b136600461456a565b6101a1565b6040516100c39190614639565b60405180910390f35b6100b66100da36600461464c565b610346565b6100f26100ed3660046146b4565b6103eb565b6040516100c391906147d2565b61011261010d3660046147e5565b6104bf565b6040516100c392919061492f565b6100f261012e36600461456a565b5090919050565b6100b661014336600461464c565b610568565b61015b61015636600461464c565b610601565b6040516100c39190614954565b6100f261017636600461464c565b6106a0565b61015b61018936600461456a565b61075e565b6100b661019c36600461456a565b61076e565b606060006101af600661079b565b603f86600188516101c0919061497d565b815181106101d0576101d0614994565b6020026020010151901c16905060006101e9600661079b565b604587600189516101fa919061497d565b8151811061020a5761020a614994565b6020026020010151901c1690506000610225878484886107a6565b9050610230816109e0565b90506040518060400160405280601d81526020017f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000815250610318876040015188606001516102828a60000151610b47565b61028f8b60a00151610b47565b61029e8c60c001516020610b58565b6102b68d608001516001600160a01b03166014610b58565b6040518060400160405280601a81526020017f646174613a696d6167652f7376672b786d6c3b6261736536342c000000000000815250896040516020016103049897969594939291906149c6565b6040516020818303038152906040526109e0565b604051602001610329929190614b16565b60408051601f1981840301815291905293505050505b9392505050565b60606000806103568888876104bf565b60405163037b2fbb60e21b815291935091506001600160a01b03871690630decbeec9061038b90859085908990600401614b45565b60006040518083038186803b1580156103a357600080fd5b505afa1580156103b7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103df9190810190614bce565b98975050505050505050565b81516060906001146104295760405162461bcd60e51b8152602060048201526002602482015261563160f01b60448201526064015b60405180910390fd5b60408260ff161080156104495750610442600283614c20565b60ff166001145b61047f5760405162461bcd60e51b815260206004820152600760248201526656313a53495a4560c81b6044820152606401610420565b600061049685856101200151866101400151610cf3565b905060006104a660088584610ffe565b90506104b5816040015161126c565b9695505050505050565b60606104c961402c565b60405163731df6ef60e11b81526004810185905260009081906001600160a01b0388169063e63bedde9060240160006040518083038186803b15801561050e57600080fd5b505afa158015610522573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261054a9190810190614e41565b9150915080925061055c8282876103eb565b93505050935093915050565b60606000806105788888876104bf565b60405163e60bf69b60e01b815291935091506001600160a01b0387169063e60bf69b906105ad90859085908990600401614b45565b60006040518083038186803b1580156105c557600080fd5b505afa1580156105d9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103df9190810190614f17565b61060961402c565b6000806106178888876104bf565b60405163beca7d9760e01b815291935091506001600160a01b0387169063beca7d979061064c90859085908990600401614b45565b60006040518083038186803b15801561066457600080fd5b505afa158015610678573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103df9190810190614f5f565b60606000806106b08888876104bf565b90925090506001600160a01b0386161561074f57604051632c0f70eb60e11b81526001600160a01b0387169063581ee1d6906106f490869085908990600401614b45565b60006040518083038186803b15801561070c57600080fd5b505afa158015610720573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107489190810190614f93565b9250610753565b8192505b505095945050505050565b61076661402c565b509092915050565b6060838360405160200161078392919061492f565b60405160208183030381529060405290509392505050565b6001901b6000190190565b606060006107bf6107ba8660ff8616614fc7565b610b47565b6107cf6107ba8760ff8716614fc7565b6107df6107ba8860ff8816614fc7565b6107ef6107ba8960ff8916614fc7565b6040516020016108029493929190614fe6565b60408051601f1981840301815282820190915260068252651e17b9bb339f60d11b6020830152915060006108388882808a6112a7565b90506001606060005b888110156109ac5760005b898110156109275781158015610860575080155b15610873578061086f81615103565b9150505b60006108818d83858f6112a7565b90508581141561089e578461089581615103565b95505050610915565b836108ea8760ff8d166108b1898761497d565b6108bb9190614fc7565b6108c860ff8f1688614fc7565b6108d38f600161511e565b60ff168f60ff168b6108e59190614fc7565b61130d565b6040516020016108fb929190614b16565b604051602081830303815290604052935080955060019450505b8061091f81615103565b91505061084c565b508161096f8560ff8b1661093b878f61497d565b6109459190614fc7565b61095260ff8d1686614fc7565b61095d8d600161511e565b60ff168d60ff16896108e59190614fc7565b604051602001610980929190614b16565b6040516020818303038152906040529150600093506000925080806109a490615103565b915050610841565b508481856040516020016109c293929190615147565b60405160208183030381529060405295505050505050949350505050565b6060815160001415610a0057505060408051602081019091526000815290565b60006040518060600160405280604081526020016153796040913990506000600384516002610a2f919061518a565b610a3991906151a2565b610a44906004614fc7565b90506000610a5382602061518a565b6001600160401b03811115610a6a57610a6a614210565b6040519080825280601f01601f191660200182016040528015610a94576020820181803683370190505b509050818152600183018586518101602084015b81831015610b025760039283018051603f601282901c811687015160f890811b8552600c83901c8216880151811b6001860152600683901c8216880151811b60028601529116860151901b93820193909352600401610aa8565b600389510660018114610b1c5760028114610b2d57610b39565b613d3d60f01b600119830152610b39565b603d60f81b6000198301525b509398975050505050505050565b6060610b528261138a565b92915050565b60606000610b67836002614fc7565b610b7290600261518a565b6001600160401b03811115610b8957610b89614210565b6040519080825280601f01601f191660200182016040528015610bb3576020820181803683370190505b509050600360fc1b81600081518110610bce57610bce614994565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110610bfd57610bfd614994565b60200101906001600160f81b031916908160001a9053506000610c21846002614fc7565b610c2c90600161518a565b90505b6001811115610ca4576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110610c6057610c60614994565b1a60f81b828281518110610c7657610c76614994565b60200101906001600160f81b031916908160001a90535060049490941c93610c9d816151b6565b9050610c2f565b50831561033f5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610420565b606083516001600160401b03811115610d0e57610d0e614210565b604051908082528060200260200182016040528015610d4157816020015b6060815260200190600190039081610d2c5790505b50905060005b8451811015610ff657600080610d75878481518110610d6857610d68614994565b602002602001015161148c565b915091508115610d86575050610fe4565b610d91816020611584565b634e55474714610dce5760405162461bcd60e51b815260206004820152600860248201526704445433a50493a360c41b6044820152606401610420565b6000610ddb826003611584565b90506000610de88361175a565b90506000610df7846002611584565b610e0290600161518a565b9050806001600160401b03811115610e1c57610e1c614210565b604051908082528060200260200182016040528015610e5557816020015b610e4261408f565b815260200190600190039081610e3a5790505b50878781518110610e6857610e68614994565b602002602001018190525060005b81811015610fdd57610e8a85858c8c6118b5565b888881518110610e9c57610e9c614994565b60200260200101518281518110610eb557610eb5614994565b60200260200101516080018181525050610ece85611a36565b888881518110610ee057610ee0614994565b60200260200101518281518110610ef957610ef9614994565b60200260200101516060018181525050600080610f478a8a81518110610f2157610f21614994565b60200260200101518481518110610f3a57610f3a614994565b6020026020010151611b1b565b91509150610f56878383611b4e565b8a8a81518110610f6857610f68614994565b60200260200101518481518110610f8157610f81614994565b602002602001015160200181905250848a8a81518110610fa357610fa3614994565b60200260200101518481518110610fbc57610fbc614994565b60209081029190910101515250819050610fd581615103565b915050610e76565b5050505050505b80610fee81615103565b915050610d47565b509392505050565b6110066140be565b61100e6140ff565b6110188485611ce3565b8152846001600160401b0381111561103257611032614210565b60405190808252806020026020018201604052801561106b57816020015b61105861411f565b8152602001906001900390816110505790505b506020820152611079614144565b6110846002866151cd565b61108f9060016151ef565b60ff16815261109f6002866151cd565b6110aa9060016151ef565b60ff166020820152600160408201526110c1614164565b60005b878160ff16101561111b5760405180604001604052808381526020018481525084602001518260ff16815181106110fd576110fd614994565b6020026020010181905250808061111390615214565b9150506110c4565b50825160ff871690819052835160200152611134614192565b61113e8788611ce3565b6040820152876001600160401b0381111561115b5761115b614210565b60405190808252806020026020018201604052801561119457816020015b61118161411f565b8152602001906001900390816111795790505b50606082015260005b86518160ff16101561125e576000878260ff16815181106111c0576111c0614994565b602002602001015151111561124c5761121b82888360ff16815181106111e8576111e8614994565b6020026020010151611216888b8660ff168151811061120957611209614994565b6020026020010151611d71565b611f11565b611225858361244a565b61122f8583612753565b6112398583612837565b61124282612910565b61124c858361291c565b8061125681615214565b91505061119d565b505091519695505050505050565b60408101516080820151815182906112869060019061497d565b8151811061129657611296614994565b602002602001018181525050919050565b6000806112b48385614fc7565b6112be908661518a565b90506112cb600682615234565b6112d6906028614fc7565b866112e26006846151a2565b815181106112f2576112f2614994565b6020026020010151901c63ffffffff16915050949350505050565b606060ff861661132c5750604080516020810190915260008152611381565b6113378660046129e1565b6113408661138a565b6113498661138a565b6113528661138a565b61135b8661138a565b60405160200161136f959493929190615248565b60405160208183030381529060405290505b95945050505050565b6060816113ae5750506040805180820190915260018152600360fc1b602082015290565b8160005b81156113d857806113c281615103565b91506113d19050600a836151a2565b91506113b2565b806001600160401b038111156113f0576113f0614210565b6040519080825280601f01601f19166020018201604052801561141a576020820181803683370190505b5092505b83156114855761142f60018261497d565b905061143c600a85615234565b61144790603061518a565b60f81b83828151811061145c5761145c614994565b60200101906001600160f81b031916908160001a90535061147e600a856151a2565b935061141e565b5050919050565b60006114b260405180606001604052806060815260200160008152602001600081525090565b82516114c15760019150915091565b8281526002602082015282516001600160401b038111156114e4576114e4614210565b60405190808252806020026020018201604052801561150d578160200160208202803683370190505b50815282515b801561157e5783818551611527919061497d565b8151811061153757611537614994565b60200260200101518260000151600183611551919061497d565b8151811061156157611561614994565b602090810291909101015280611576816151b6565b915050611513565b50915091565b600061158f8261079b565b835180516000906115a2576115a2614994565b60200260200101511690508160ff1683600001516000815181106115c8576115c8614994565b6020026020010151901c83600001516000815181106115e9576115e9614994565b6020026020010181815250508160ff168360400181815161160a919061518a565b9052506040830151608011610b525760006002846020015161162c91906151a2565b845151909150811015611753576080846040015161164a919061497d565b8451805160009061165d5761165d614994565b60209081029190910101805190911b9052600061167a608061079b565b855180518490811061168e5761168e614994565b60200260200101511690506080856000015183815181106116b1576116b1614994565b60200260200101818151901c91508181525050608081901b85600001516000815181106116e0576116e0614994565b60200260200101818151179150818152505060808560400151611703919061497d565b8551805160009061171657611716614994565b6020908102919091018101805190921c909152850180519061173782615103565b8152505060808560400181815161174e919061497d565b905250505b5092915050565b60606000611769836004611584565b61177490600161518a565b905061178181600161518a565b6001600160401b0381111561179857611798614210565b6040519080825280602002602001820160405280156117c1578160200160208202803683370190505b50915060005b8181101561148557600060206117de866004611584565b901b176000806117ef876001611584565b905080600114156118035760009150611843565b6000611810886008611584565b9050600061181f896008611584565b9050600061182e8a6008611584565b905080600883901b601085901b171794505050505b600882901b9290921791611858876001611584565b60011461186f5761186a876008611584565b611872565b60ff5b90921791828661188386600161518a565b8151811061189357611893614994565b60200260200101818152505050505080806118ad90615103565b9150506117c7565b604b83901b60006118c7866006611584565b905060006118d6876006611584565b604581901b93909317603f83901b1792905060006118f5886006611584565b90506000611904896006611584565b905086516008148015611918575085516008145b8015611968575086888151811061193157611931614994565b602002602001015160ff166000141580611968575085888151811061195857611958614994565b602002602001015160ff16600014155b156119bc57603986898151811061198157611981614994565b602002602001015160ff16901b8517945060338789815181106119a6576119a6614994565b602002602001015160ff16901b851794506119cf565b603382901b85179450603981901b851794505b601b6119dc8a6001611584565b6001146119f3576119ee8a6018611584565b6119f6565b60005b901b94909417936003611a0a8a6001611584565b600114611a2157611a1c8a6018611584565b611a24565b60005b901b8517945050505050949350505050565b600080611a44836001611584565b600114611a5b57611a56836004611584565b611a5e565b60015b905060005b8181101561148557600080611a79866006611584565b90506000611a88876006611584565b90506000611a97886003611584565b90506000611aa6896001611584565b90508060011415611ac257600684901b94909417821793611acf565b600683901b949094178317935b80600114611ade576000611ae1565b60805b60ff16611aef83600c614fc7565b611af9919061518a565b85901b9450848817975050505050508080611b1390615103565b915050611a63565b600080611b28600661079b565b6080840151603f1c169150611b3d600661079b565b60458460800151901c169050915091565b60606000611b5d856001611584565b600114611b7f57611b6f856010611584565b611b7a90600161518a565b611b95565b611b8a856008611584565b611b9590600161518a565b90506040611ba38486614fc7565b611bad91906151a2565b611bb890600161518a565b6001600160401b03811115611bcf57611bcf614210565b604051908082528060200260200182016040528015611bf8578160200160208202803683370190505b5091506000805b82811015611cd9576000611c14886002611584565b611c1f90600161518a565b90508060041415611c4357611c35886004611584565b611c4090600461518a565b90505b6000611c50896004611584565b905060005b82811015611cc357611c68604086615234565b611c73906004614fc7565b82901b87611c826040886151a2565b81518110611c9257611c92614994565b602090810291909101018051909117905284611cad81615103565b9550508080611cbb90615103565b915050611c55565b5050508080611cd190615103565b915050611bff565b5050509392505050565b611ceb6140be565b611cf6600284614c20565b60ff166001148015611d155750611d0e600283614c20565b60ff166001145b611d4a5760405162461bcd60e51b815260206004820152600660248201526504d4c3a433a360d41b6044820152606401610420565b611d5b81604001518460ff16612ab6565b6040810151610b529060ff808616908516612b24565b600080825111611db05760405162461bcd60e51b815260206004820152600a602482015269043414c433a5056493a360b41b6044820152606401610420565b815160011415611dc257506000610b52565b600060018351611dd29190615338565b90506000611de0600361079b565b604b85600081518110611df557611df5614994565b602002602001015160800151901c1690505b60ff821615611f06576000611e1c601861079b565b601b868560ff1681518110611e3357611e33614994565b602002602001015160800151901c16905060006040518060a00160405280600115158152602001611e64600661079b565b601285901c1660ff168152602001611e7c600661079b565b600c85901c1660ff168152602001611e94600661079b565b600685901c1660ff168152602001611eac600661079b565b841660ff168152509050611ee18188602001518581518110611ed057611ed0614994565b602002602001015160000151612bdb565b15611ef25783945050505050610b52565b611efd600185615338565b93505050611e07565b506000949350505050565b6000611f1d601861079b565b601b848460ff1681518110611f3457611f34614994565b602002602001015160800151901c1690506000611f51601861079b565b6003858560ff1681518110611f6857611f68614994565b602002602001015160800151901c169050600080611fa1868660ff1681518110611f9457611f94614994565b6020026020010151612c3e565b91509150600080611fc0888860ff1681518110610f3a57610f3a614994565b6020808c01805160ff80861690915290519083169101526040805160e0810182526001918101918252929450909250819060608201611fff600661079b565b60128b901c1660ff168152602001612017600661079b565b600c8b901c1660ff16815260200161202f600661079b565b60068b901c1660ff168152602001612047600661079b565b60008b901c1660ff16815250815260200160405180606001604052808760ff1681526020018660ff168152602001600115158152508152508960200151604001819052506040518060a001604052806001151581526020016120a9600661079b565b601288901c1660ff1681526020016120c1600661079b565b600c88901c1660ff1681526020016120d9600661079b565b600688901c1660ff1681526020016120f1600661079b565b60ff90881616905260208a015160a00152604080516008808252610120820190925290816020015b612121614144565b8152602001906001900390816121195790505060208a015160600152604080516008808252610120820190925290816020015b61215c614144565b81526020019060019003908161215457505060208a01516080015260005b60088110156122695760008060006121b08c8c60ff16815181106121a0576121a0614994565b6020026020010151856000612c71565b925092509250801561225357828d602001516080015185815181106121d7576121d7614994565b60200260200101516000019060ff16908160ff1681525050818d6020015160800151858151811061220a5761220a614994565b60200260200101516020019060ff16908160ff168152505060018d6020015160800151858151811061223e5761223e614994565b60209081029190910101519015156040909101525b505050808061226190615103565b91505061217a565b5060005b600881101561235c5760008060006122a38c8c60ff168151811061229357612293614994565b6020026020010151856001612c71565b925092509250801561234657828d602001516060015185815181106122ca576122ca614994565b60200260200101516000019060ff16908160ff1681525050818d602001516060015185815181106122fd576122fd614994565b60200260200101516020019060ff16908160ff168152505060018d6020015160600151858151811061233157612331614994565b60209081029190910101519015156040909101525b505050808061235490615103565b91505061226d565b50600060a08a0181905260808a01526060890151516001600160401b0381111561238857612388614210565b6040519080825280602002602001820160405280156123c157816020015b6123ae61411f565b8152602001906001900390816123a65790505b5060608a01526123d1600361079b565b604b898960ff16815181106123e8576123e8614994565b602002602001015160800151901c16896000019060ff16908160ff168152505061243f888860ff168151811061242057612420614994565b602002602001015183838c60400151612ce0909392919063ffffffff16565b505050505050505050565b60008260200151826000015160ff168151811061246957612469614994565b6020026020010151905060008260200151604001519050826020015160a001516040015160ff166000141580156124a7575080516040015160ff1615155b80156124c9575081600001516040015160ff1681600001516040015160ff1611155b156125675780516040908101518351909101516000916124e891615338565b90506125126001856020015160a00151604001516125069190615338565b60408601519083612db7565b80826020015160000181815161252891906151ef565b60ff90811690915260208087015160a001510151161590506125655780846020015160a0015160200181815161255e91906151ef565b60ff169052505b505b60208084015160a00151015160ff161580159061258b575080516020015160ff1615155b80156125ad575081600001516020015160ff1681600001516020015160ff1611155b156125f2576125f26001846020015160a00151602001516125ce9190615338565b82516020908101518551909101516125e69190615338565b60408601519190612db7565b602083015160a001516080015160ff1615801590612617575080516080015160ff1615155b8015612639575081600001516080015160ff1681600001516080015160ff1611155b156126ce57805160809081015183519091015160009161265891615338565b602085015160a00151608001516040860151919250612678919083612eb3565b80826020015160200181815161268e91906151ef565b60ff908116909152602086015160a0015160600151161590506126cc5780846020015160a001516060018181516126c591906151ef565b60ff169052505b505b602083015160a001516060015160ff16158015906126f3575080516060015160ff1615155b8015612715575081600001516060015160ff1681600001516060015160ff1611155b1561274d57602083015160a00151606090810151825182015184519092015161274d9261274191615338565b60408601519190612eb3565b50505050565b60008260200151826000015160ff168151811061277257612772614994565b602002602001015190506000826020015160400151905080602001516000015160ff1682602001516000015160ff16116127ad5760006127c3565b6020808201515190830151516127c39190615338565b60ff90811660a085015260208083015181015184820151909101519082169116116127ef57600061280b565b80602001516020015182602001516020015161280b9190615338565b60ff166080840181905260a084015160408501518051602090910151875161274d949093929091612f9c565b815161284290612fe0565b801561285657506128568160400151612fe0565b156128bb57600061286a8360000151612ff0565b9050600061287b8360400151612ff0565b9050801515801561289a5750602082901c600f16602082901c600f1610155b156128b4576128b46128ac8383613019565b855190613124565b5050612837565b81516128c69061314d565b81516000606082018190526080820181905260c0820181905260a09091015261290c81604001516000606082018190526080820181905260c0820181905260a090910152565b5050565b61291981613172565b50565b60005b8160600151518160ff1610156129dc57600082606001518260ff168151811061294a5761294a614994565b60200260200101519050806020015160400151156129c95760a0830151602082015180516129799083906151ef565b60ff1690525060808301516020808301510180516129989083906151ef565b60ff90811690915260208601518051849350909185169081106129bd576129bd614994565b60200260200101819052505b50806129d481615214565b91505061291f565b505050565b606060006129f0836002614fc7565b6001600160401b03811115612a0757612a07614210565b6040519080825280601f01601f191660200182016040528015612a31576020820181803683370190505b5080519091505b8015610ff6576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110612a6657612a66614994565b1a60f81b82612a7660018461497d565b81518110612a8657612a86614994565b60200101906001600160f81b031916908160001a90535060049490941c9380612aae816151b6565b915050612a38565b6006612ac28280614fc7565b612acc91906151a2565b612ad790600261518a565b6001600160401b03811115612aee57612aee614210565b604051908082528060200260200182016040528015612b17578160200160208202803683370190505b5082604001819052505050565b612b2e600661079b565b821115612b6b5760405162461bcd60e51b815260206004820152600b60248201526a0564552533a534554573a360ac1b6044820152606401610420565b612b75600661079b565b811115612bb25760405162461bcd60e51b815260206004820152600b60248201526a564552533a534554573a3160a81b6044820152606401610420565b612bbe600c603f613347565b6080909301805160459290921b603f9390931b9190931617179052565b6000816020015160ff16836020015160ff1611158015612c095750816040015160ff16836040015160ff1611155b8061033f5750816060015160ff16836060015160ff161115801561033f57505060809081015191015160ff9182169116111590565b600080612c4b600661079b565b608084015160331c169150612c60600661079b565b60398460800151901c169050915091565b60008060008084612c83576000612c86565b60805b60ff16612c9487600c614fc7565b612c9e919061518a565b8760600151901c9050612cb1600c61079b565b16612cbc600661079b565b81169350600681901c925083151580612cd457508215155b91505093509350939050565b60ff811660208501526000612cf484613360565b905060005b82811015612d8c5760005b84811015612d7957612d16878661337d565b506000612d24878385613417565b90508015612d5b57600080612d3989846134ae565b9250925050612d548a83602084901b60248a901b1717613124565b5050612d66565b612d66886000613124565b5080612d7181615103565b915050612d04565b5080612d8481615103565b915050612cf9565b5060ff831685526000606086018190526080860181905260c0860181905260a08601525b5050505050565b60005b835160ff16811015612e9557835160ff165b8360ff16811115612e28578360ff16811015612de757612e28565b612e16612df760ff85168361518a565b60408701518490612e099085836134ed565b6040890151929190613588565b80612e20816151b6565b915050612dcc565b506000612e368460016151ef565b60ff1690505b612e4683856151ef565b60ff168111612e8257612e708183612e098760ff16868a604001516134ed9092919063ffffffff16565b80612e7a81615103565b915050612e3c565b5080612e8d81615103565b915050612dba565b508083600001818151612ea891906151ef565b60ff16905250505050565b60005b836020015160ff16811015612f8957602084015160ff165b8360ff16811115612f1c578360ff16811015612ee957612f1c565b612f0a82612efa60ff86168461518a565b6040880151612e099086866134ed565b80612f14816151b6565b915050612ece565b506000612f2a8460016151ef565b60ff1690505b612f3a83856151ef565b60ff168111612f7657612f648282612e09858860ff168a604001516134ed9092919063ffffffff16565b80612f6e81615103565b915050612f30565b5080612f8181615103565b915050612eb6565b508083602001818151612ea891906151ef565b60ff80851660608701819052908416608087015260c0860152612fbf84836151ef565b60ff168552612fce83826151ef565b60ff1660209095019490945250505050565b6000610b5282836000015161337d565b6000610b52826060015160ff16836080015160ff1684604001516134ed9092919063ffffffff16565b600060ff821660ff148061302e575060ff8316155b1561303a575080610b52565b601860ff61304e84821685841c8316614fc7565b60ff851661305d9060ff61497d565b61306e9060ff601889901c16614fc7565b613078919061518a565b61308291906151a2565b901b17601060ff61309984821685841c8316614fc7565b60ff85166130a89060ff61497d565b6130b99060ff601089901c16614fc7565b6130c3919061518a565b6130cd91906151a2565b901b17600860ff6130e484821685841c8316614fc7565b60ff85166130f39060ff61497d565b6131049060ff600889901c16614fc7565b61310e919061518a565b61311891906151a2565b901b1760ff1792915050565b61290c826060015160ff16836080015160ff16838560400151613588909392919063ffffffff16565b60008061315d8360400151611b1b565b60ff9182168552166020909301929092525050565b606060008060005b846020015160800151518160ff161015612db057613196614144565b8560200151608001518260ff16815181106131b3576131b3614994565b602002602001015160400151156132a357836131ce81615214565b9450508560200151608001518260ff16815181106131ee576131ee614994565b60200260200101519050806020015186606001518360ff168151811061321657613216614994565b6020026020010151602001516000019060ff16908160ff1681525050806000015186606001518360ff168151811061325057613250614994565b6020026020010151602001516020019060ff16908160ff1681525050600186606001518360ff168151811061328757613287614994565b6020908102919091018101510151901515604090910152613334565b8560200151606001518260ff16815181106132c0576132c0614994565b6020026020010151604001511561333457826132db81615214565b9350508451600014156132f8576132f586604001516135c1565b94505b613327868760200151606001518460ff168151811061331957613319614994565b6020026020010151876137dc565b905061333486828461391d565b508061333f81615214565b91505061317a565b60008160ff166133568461079b565b901b199392505050565b600061336c600361079b565b604b8360800151901c169050919050565b60008260a00151156134065760608301516133999060016151ef565b60ff168260ff16116133f65760808301516133b59060016151ef565b60ff16836020015160ff1614156133ce57506000610b52565b60c083015160ff166060840152608083018051906133eb82615214565b60ff1690525061340e565b606083018051906133eb82615214565b600160a08401525b50600192915050565b60008061342385611b1b565b50905060006134328285614fc7565b61343c908661518a565b6020870151519091506134506040836151a2565b106134605760009250505061033f565b61346b604082615234565b613476906004614fc7565b60208701516134866040846151a2565b8151811061349657613496614994565b6020026020010151901c600f16925050509392505050565b6000806000846000015184815181106134c9576134c9614994565b602002602001015192508263ffffffff169150602083901c600f1690509250925092565b6000806134f985611b1b565b50905060006135088285614fc7565b613512908661518a565b6040870151519091506135266006836151a2565b106135365760009250505061033f565b613541600682615234565b61354c906028614fc7565b604087015161355c6006846151a2565b8151811061356c5761356c614994565b6020026020010151901c64ffffffffff16925050509392505050565b600061359385611b1b565b50905060006135a28285614fc7565b6135ac908661518a565b90506135b9868285613b85565b505050505050565b606060008060006135d185613c3a565b60408051600580825260c082019092529396509194509250816020015b6135f6614144565b8152602001906001900390816135ee579050509350808460008151811061361f5761361f614994565b60200260200101819052506040518060600160405280826000015160ff1681526020018483602001516136529190615338565b60ff168152602001600115158152508460018151811061367457613674614994565b60209081029190910101528261368b600282614c20565b60ff16156136a1578061369d81615214565b9150505b6040805160608101909152825160ff168152602081016136c26002846151cd565b84602001516136d19190615338565b60ff16815260200160011515815250856002815181106136f3576136f3614994565b60209081029190910101528261370a600282614c20565b60ff1615613720578061371c81615214565b9150505b6040805160608101909152835160ff168152602081016137416002846151cd565b856020015161375091906151ef565b60ff168152602001600115158152508660038151811061377257613772614994565b60200260200101819052506040518060600160405280846000015160ff1681526020018585602001516137a591906151ef565b60ff16815260200160011515815250866004815181106137c7576137c7614994565b60200260200101819052505050505050919050565b6137e4614144565b81836000015160ff16815181106137fd576137fd614994565b60209081029190910101515160ff90811682528351835184929190911690811061382957613829614994565b60209081029190910181015181015160ff90811683830152600160408401528482015116101561387457826020015181602001516138679190615338565b60ff16602082015261389d565b602083602001516138859190615338565b816020015161389491906151ef565b60ff1660208201525b8051602082015160408087015101516138be92909160ff9182169116613ffc565b61033f57806020015160ff16826000815181106138dd576138dd614994565b60200260200101516020015160ff16111561390d576020810180519061390282615214565b60ff1690525061389d565b602081018051906139028261535b565b613925614164565b60408401515161393790600190615338565b60ff16836000015160ff1610801561398457506139848160200151600161395e91906151ef565b845161396a91906151ef565b602085015160408088015101519160ff9081169116613ffc565b156139a4576020810180519061399982615214565b60ff16905250613925565b825160ff16158015906139d0575060408101516139c29060016151ef565b60ff16836000015160ff1610155b80156139f757506139f7816040015160016139eb91906151ef565b845161396a9190615338565b15613a175760408101805190613a0c82615214565b60ff169052506139a4565b602083015160ff1615801590613a4657506060810151613a389060016151ef565b60ff16836020015160ff1610155b8015613a88575082516060820151613a889160ff1690613a679060016151ef565b8560200151613a769190615338565b6040808801510151919060ff16613ffc565b15613aa85760608101805190613a9d82615214565b60ff16905250613a17565b6001846040015160200151613abd9190615338565b60ff16836020015160ff16108015613af9575082516080820151613af99160ff1690613aea9060016151ef565b8560200151613a7691906151ef565b15613b195760808101805190613b0e82615214565b60ff16905250613aa8565b83606001518260ff1681518110613b3257613b32614994565b6020026020010151602001516040015161274d5760405180604001604052808281526020018481525084606001518360ff1681518110613b7457613b74614994565b602002602001018190525050505050565b613b906006836151a2565b83604001515111156129dc576000613bbc613bac600685615234565b613bb7906028614fc7565b614018565b9050613bc9602882613347565b6040850151613bd96006866151a2565b81518110613be957613be9614994565b6020908102919091010180519091169052604084015160ff821683901b90613c126006866151a2565b81518110613c2257613c22614994565b60200260200101818151179150818152505050505050565b600080613c45614144565b8351613c53906002906151cd565b60ff1681526020840151613c69906002906151cd565b60ff1660208201526001604082018190529250829150600080808480825b80613ea95782158015613c98575083155b92508215613d6e57613cdc613cae8360016151ef565b8851613cba9190615338565b60ff168a8960200151613ccd9190615338565b60408d0151919060ff16613ffc565b8015613cfd5750613cfd613cf18360016151ef565b8851613cba91906151ef565b8015613d315750613d31613d128360016151ef565b8851613d1e9190615338565b60ff16898960200151613ccd91906151ef565b8015613d525750613d52613d468360016151ef565b8851613d1e91906151ef565b15613d695781613d6181615214565b925050613d6e565b600193505b85613df2576000898860200151613d859190615338565b60ff16118015613dbe57508651613dbe90613da1908490615338565b60ff16613daf8b60016151ef565b8960200151613ccd9190615338565b8015613dd657508651613dd690613da19084906151ef565b15613ded5788613de581615214565b995050613df2565b600195505b84613e885760018a60200151613e089190615338565b60ff16888860200151613e1b91906151ef565b60ff16108015613e5457508651613e5490613e37908490615338565b60ff16613e458a60016151ef565b8960200151613ccd91906151ef565b8015613e6c57508651613e6c90613e379084906151ef565b15613e835787613e7b81615214565b985050613e88565b600194505b848015613e925750855b8015613e9b5750835b15613ea4575060015b613c87565b8760ff168960ff1614613fef576000613ec2898b6151ef565b613ecd9060016151ef565b905060006002613edd8184614c20565b60ff1615613ef557613ef08360016151ef565b613ef7565b825b613f0191906151cd565b905060008b60018b6020015184613f1891906151ef565b613f229190615338565b613f2c9190615338565b9050896020015160ff168160ff161115613f945760008a6020015182613f529190615338565b9050613f5e818e6151ef565b9c508060ff168c60ff1611613f7f57613f778c82615338565b9b508b613f8d565b613f89818d615338565b9b508b5b5050613fe4565b6000818b60200151613fa69190615338565b90508060ff168d60ff1611613fc757613fbf8d82615338565b9c508c613fd5565b613fd1818e615338565b9c508c5b50613fe0818d6151ef565b9b50505b60ff1660208a015250505b5050505050509193909250565b60008061400a8585856134ed565b60ff16151595945050505050565b600060ff82111561402857600080fd5b5090565b6040518061016001604052806000815260200160008152602001606081526020016060815260200160006001600160a01b031681526020016000815260200160008152602001606081526020016060815260200160608152602001606081525090565b6040518060a0016040528060608152602001606081526020016060815260200160008152602001600081525090565b6040805160e081018252600080825260208201529081016140dd61408f565b8152600060208201819052604082018190526060820181905260809091015290565b60405180604001604052806141126140be565b8152602001606081525090565b6040518060400160405280614132614164565b815260200161413f614144565b905290565b604080516060810182526000808252602082018190529181019190915290565b6040805160a08101825260008082526020820181905291810182905260608101829052608081019190915290565b6040518060c00160405280600060ff1681526020016141af6141d6565b81526020016141bc6140be565b815260606020820181905260006040830181905291015290565b6040805160e081018252600080825260208201529081016141f561411f565b81526020016060815260200160608152602001614112614164565b634e487b7160e01b600052604160045260246000fd5b60405161016081016001600160401b038111828210171561424957614249614210565b60405290565b604051601f8201601f191681016001600160401b038111828210171561427757614277614210565b604052919050565b60006001600160401b0382111561429857614298614210565b5060051b60200190565b600082601f8301126142b357600080fd5b813560206142c86142c38361427f565b61424f565b82815260059290921b840181019181810190868411156142e757600080fd5b8286015b8481101561430257803583529183019183016142eb565b509695505050505050565b60006001600160401b0382111561432657614326614210565b50601f01601f191660200190565b600082601f83011261434557600080fd5b81356143536142c38261430d565b81815284602083860101111561436857600080fd5b816020850160208301376000918101602001919091529392505050565b6001600160a01b038116811461291957600080fd5b80356143a581614385565b919050565b60ff8116811461291957600080fd5b80356143a5816143aa565b600082601f8301126143d557600080fd5b813560206143e56142c38361427f565b82815260059290921b8401810191818101908684111561440457600080fd5b8286015b8481101561430257803561441b816143aa565b8352918301918301614408565b6000610160828403121561443b57600080fd5b614443614226565b9050813581526020820135602082015260408201356001600160401b038082111561446d57600080fd5b61447985838601614334565b6040840152606084013591508082111561449257600080fd5b61449e85838601614334565b60608401526144af6080850161439a565b608084015260a084013560a084015260c084013560c084015260e08401359150808211156144dc57600080fd5b6144e8858386016143c4565b60e08401526101009150818401358181111561450357600080fd5b61450f868287016143c4565b83850152506101209150818401358181111561452a57600080fd5b614536868287016143c4565b83850152506101409150818401358181111561455157600080fd5b61455d868287016143c4565b8385015250505092915050565b60008060006060848603121561457f57600080fd5b83356001600160401b038082111561459657600080fd5b6145a2878388016142a2565b945060208601359150808211156145b857600080fd5b506145c586828701614428565b92505060408401356145d6816143aa565b809150509250925092565b60005b838110156145fc5781810151838201526020016145e4565b8381111561274d5750506000910152565b600081518084526146258160208601602086016145e1565b601f01601f19169290920160200192915050565b60208152600061033f602083018461460d565b600080600080600060a0868803121561466457600080fd5b853561466f81614385565b945060208601359350604086013561468681614385565b92506060860135614696816143aa565b915060808601356146a6816143aa565b809150509295509295909350565b6000806000606084860312156146c957600080fd5b83356001600160401b03808211156146e057600080fd5b818601915086601f8301126146f457600080fd5b813560206147046142c38361427f565b82815260059290921b8401810191818101908a84111561472357600080fd5b8286015b8481101561475b5780358681111561473f5760008081fd5b61474d8d86838b01016142a2565b845250918301918301614727565b509750508701359250508082111561477257600080fd5b5061477f86828701614428565b92505061478e604085016143b9565b90509250925092565b600081518084526020808501945080840160005b838110156147c7578151875295820195908201906001016147ab565b509495945050505050565b60208152600061033f6020830184614797565b6000806000606084860312156147fa57600080fd5b833561480581614385565b92506020840135915060408401356145d6816143aa565b600081518084526020808501945080840160005b838110156147c757815160ff1687529582019590820190600101614830565b6000610160825184526020830151602085015260408301518160408601526148798286018261460d565b91505060608301518482036060860152614893828261460d565b91505060808301516148b060808601826001600160a01b03169052565b5060a083015160a085015260c083015160c085015260e083015184820360e08601526148dc828261481c565b91505061010080840151858303828701526148f7838261481c565b925050506101208084015185830382870152614913838261481c565b9250505061014080840151858303828701526104b5838261481c565b6040815260006149426040830185614797565b8281036020840152611381818561484f565b60208152600061033f602083018461484f565b634e487b7160e01b600052601160045260246000fd5b60008282101561498f5761498f614967565b500390565b634e487b7160e01b600052603260045260246000fd5b600081516149bc8185602086016145e1565b9290920192915050565b683d913730b6b2911d1160b91b815288516000906149eb816009850160208e016145e1565b701116113232b9b1b934b83a34b7b7111d1160791b6009918401918201528951614a1c81601a840160208e016145e1565b731116113237ba373ab3b3ab32b939b4b7b7111d1160611b601a92909101918201528851614a5181602e840160208d016145e1565b6c1116113a37b5b2b724b2111d1160991b602e92909101918201528751614a7f81603b840160208c016145e1565b6a111611383937b7b3111d1160a91b603b9290910191820152614b07614af9614af3614aed614ad4614ace614ab7604688018e6149aa565b6a11161137bbb732b9111d1160a91b8152600b0190565b8b6149aa565b6c1116101134b6b0b3b2911d101160991b8152600d0190565b886149aa565b866149aa565b61227d60f01b815260020190565b9b9a5050505050505050505050565b60008351614b288184602088016145e1565b835190830190614b3c8183602088016145e1565b01949350505050565b606081526000614b586060830186614797565b8281036020840152614b6a818661484f565b91505060ff83166040830152949350505050565b6000614b8c6142c38461430d565b9050828152838383011115614ba057600080fd5b61033f8360208301846145e1565b600082601f830112614bbf57600080fd5b61033f83835160208501614b7e565b600060208284031215614be057600080fd5b81516001600160401b03811115614bf657600080fd5b614c0284828501614bae565b949350505050565b634e487b7160e01b600052601260045260246000fd5b600060ff831680614c3357614c33614c0a565b8060ff84160691505092915050565b600082601f830112614c5357600080fd5b81516020614c636142c38361427f565b82815260059290921b84018101918181019086841115614c8257600080fd5b8286015b848110156143025780518352918301918301614c86565b80516143a581614385565b600082601f830112614cb957600080fd5b81516020614cc96142c38361427f565b82815260059290921b84018101918181019086841115614ce857600080fd5b8286015b84811015614302578051614cff816143aa565b8352918301918301614cec565b60006101608284031215614d1f57600080fd5b614d27614226565b9050815181526020820151602082015260408201516001600160401b0380821115614d5157600080fd5b614d5d85838601614bae565b60408401526060840151915080821115614d7657600080fd5b614d8285838601614bae565b6060840152614d9360808501614c9d565b608084015260a084015160a084015260c084015160c084015260e0840151915080821115614dc057600080fd5b614dcc85838601614ca8565b60e084015261010091508184015181811115614de757600080fd5b614df386828701614ca8565b838501525061012091508184015181811115614e0e57600080fd5b614e1a86828701614ca8565b838501525061014091508184015181811115614e3557600080fd5b61455d86828701614ca8565b60008060408385031215614e5457600080fd5b82516001600160401b0380821115614e6b57600080fd5b818501915085601f830112614e7f57600080fd5b81516020614e8f6142c38361427f565b82815260059290921b84018101918181019089841115614eae57600080fd5b8286015b84811015614ee657805186811115614eca5760008081fd5b614ed88c86838b0101614c42565b845250918301918301614eb2565b5091880151919650909350505080821115614f0057600080fd5b50614f0d85828601614d0c565b9150509250929050565b600060208284031215614f2957600080fd5b81516001600160401b03811115614f3f57600080fd5b8201601f81018413614f5057600080fd5b614c0284825160208401614b7e565b600060208284031215614f7157600080fd5b81516001600160401b03811115614f8757600080fd5b614c0284828501614d0c565b600060208284031215614fa557600080fd5b81516001600160401b03811115614fbb57600080fd5b614c0284828501614c42565b6000816000190483118215151615614fe157614fe1614967565b500290565b7101e39bb33903b34b2bba137bc1e93981018160751b815260008551615013816012850160208a016145e1565b600160fd1b6012918401918201528551615034816013840160208a016145e1565b6920272077696474683d2760b01b60139290910191820152845161505f81601d8401602089016145e1565b6927206865696768743d2760b01b601d9290910191820152835161508a8160278401602088016145e1565b7f2720786d6c6e733d27687474703a2f2f7777772e77332e6f72672f323030302f602792909101918201527f7376672720786d6c6e733a786c696e6b3d27687474703a2f2f7777772e77332e60478201527137b93397989c9c9c97bc3634b735939f2e3760711b60678201526079019695505050505050565b600060001982141561511757615117614967565b5060010190565b600060ff821660ff84168160ff048111821515161561513f5761513f614967565b029392505050565b600084516151598184602089016145e1565b84519083019061516d8183602089016145e1565b84519101906151808183602088016145e1565b0195945050505050565b6000821982111561519d5761519d614967565b500190565b6000826151b1576151b1614c0a565b500490565b6000816151c5576151c5614967565b506000190190565b600060ff8316806151e0576151e0614c0a565b8060ff84160491505092915050565b600060ff821660ff84168060ff0382111561520c5761520c614967565b019392505050565b600060ff821660ff81141561522b5761522b614967565b60010192915050565b60008261524357615243614c0a565b500690565b6d093c726563742066696c6c3d272360901b8152855160009061527281600e850160208b016145e1565b642720783d2760d81b600e918401918201528651615297816013840160208b016145e1565b642720793d2760d81b6013929091019182015285516152bd816018840160208a016145e1565b6927206865696768743d2760b01b6018929091019182015284516152e88160228401602089016145e1565b68272077696474683d2760b81b60229290910191820152835161531281602b8401602088016145e1565b61532b602b828401016313979f0560e11b815260040190565b9998505050505050505050565b600060ff821660ff84168082101561535257615352614967565b90039392505050565b600060ff82168061536e5761536e614967565b600019019291505056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220bd4e1698472e486628a876496235a2cac1f4970ba55dcc148a9d0a8b4747486264736f6c63430008090033",
  "deployedBytecode": "",
  "devdoc": {
    "author": "nugg.xyz - danny7even & dub6ix",
    "details": "hold my margarita",
    "kind": "dev",
    "methods": {},
    "title": "dotnugg Processor V1 - onchain encoder/decoder protocol for dotnugg files",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "yoU CAN'T HaVe ImAgES oN THe BlOCkcHAIn",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}