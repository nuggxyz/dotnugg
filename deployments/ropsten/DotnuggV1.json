{
  "address": "0xF7895Bc8A3C3A8B91D834b888a6BdEaE4a2fb098",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "resolver",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "width",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "zoom",
          "type": "uint8"
        }
      ],
      "name": "dotnuggToBytes",
      "outputs": [
        {
          "internalType": "address",
          "name": "resolvedBy",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "res",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "resolver",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "width",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "zoom",
          "type": "uint8"
        }
      ],
      "name": "dotnuggToMetadata",
      "outputs": [
        {
          "internalType": "address",
          "name": "resolvedBy",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "version",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "renderedAt",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "desc",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint8[]",
              "name": "ids",
              "type": "uint8[]"
            },
            {
              "internalType": "uint8[]",
              "name": "xovers",
              "type": "uint8[]"
            },
            {
              "internalType": "uint8[]",
              "name": "yovers",
              "type": "uint8[]"
            },
            {
              "internalType": "string[]",
              "name": "labels",
              "type": "string[]"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct IDotnuggV1Metadata.Memory",
          "name": "res",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "resolver",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "width",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "zoom",
          "type": "uint8"
        }
      ],
      "name": "dotnuggToRaw",
      "outputs": [
        {
          "internalType": "address",
          "name": "resolvedBy",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "res",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "resolver",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "width",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "zoom",
          "type": "uint8"
        }
      ],
      "name": "dotnuggToString",
      "outputs": [
        {
          "internalType": "address",
          "name": "resolvedBy",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "res",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "resolver",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "width",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "zoom",
          "type": "uint8"
        }
      ],
      "name": "dotnuggToUri",
      "outputs": [
        {
          "internalType": "address",
          "name": "resolvedBy",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "res",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lib",
      "outputs": [
        {
          "internalType": "contract DotnuggV1Lib",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "width",
          "type": "uint8"
        }
      ],
      "name": "process",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "resp",
          "type": "uint256[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "version",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "renderedAt",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "desc",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint8[]",
              "name": "ids",
              "type": "uint8[]"
            },
            {
              "internalType": "uint8[]",
              "name": "xovers",
              "type": "uint8[]"
            },
            {
              "internalType": "uint8[]",
              "name": "yovers",
              "type": "uint8[]"
            },
            {
              "internalType": "string[]",
              "name": "labels",
              "type": "string[]"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct IDotnuggV1Metadata.Memory",
          "name": "data",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "file",
          "type": "uint256[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "version",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "renderedAt",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "desc",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint8[]",
              "name": "ids",
              "type": "uint8[]"
            },
            {
              "internalType": "uint8[]",
              "name": "xovers",
              "type": "uint8[]"
            },
            {
              "internalType": "uint8[]",
              "name": "yovers",
              "type": "uint8[]"
            },
            {
              "internalType": "string[]",
              "name": "labels",
              "type": "string[]"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct IDotnuggV1Metadata.Memory",
          "name": "data",
          "type": "tuple"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "resolveBytes",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "res",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "version",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "renderedAt",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "desc",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint8[]",
              "name": "ids",
              "type": "uint8[]"
            },
            {
              "internalType": "uint8[]",
              "name": "xovers",
              "type": "uint8[]"
            },
            {
              "internalType": "uint8[]",
              "name": "yovers",
              "type": "uint8[]"
            },
            {
              "internalType": "string[]",
              "name": "labels",
              "type": "string[]"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct IDotnuggV1Metadata.Memory",
          "name": "data",
          "type": "tuple"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "resolveMetadata",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "version",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "renderedAt",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "desc",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint8[]",
              "name": "ids",
              "type": "uint8[]"
            },
            {
              "internalType": "uint8[]",
              "name": "xovers",
              "type": "uint8[]"
            },
            {
              "internalType": "uint8[]",
              "name": "yovers",
              "type": "uint8[]"
            },
            {
              "internalType": "string[]",
              "name": "labels",
              "type": "string[]"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct IDotnuggV1Metadata.Memory",
          "name": "res",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "file",
          "type": "uint256[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "version",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "renderedAt",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "desc",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint8[]",
              "name": "ids",
              "type": "uint8[]"
            },
            {
              "internalType": "uint8[]",
              "name": "xovers",
              "type": "uint8[]"
            },
            {
              "internalType": "uint8[]",
              "name": "yovers",
              "type": "uint8[]"
            },
            {
              "internalType": "string[]",
              "name": "labels",
              "type": "string[]"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct IDotnuggV1Metadata.Memory",
          "name": "",
          "type": "tuple"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "resolveRaw",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "res",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "file",
          "type": "uint256[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "version",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "renderedAt",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "desc",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint8[]",
              "name": "ids",
              "type": "uint8[]"
            },
            {
              "internalType": "uint8[]",
              "name": "xovers",
              "type": "uint8[]"
            },
            {
              "internalType": "uint8[]",
              "name": "yovers",
              "type": "uint8[]"
            },
            {
              "internalType": "string[]",
              "name": "labels",
              "type": "string[]"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct IDotnuggV1Metadata.Memory",
          "name": "data",
          "type": "tuple"
        },
        {
          "internalType": "uint8",
          "name": "zoom",
          "type": "uint8"
        }
      ],
      "name": "resolveString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "file",
          "type": "uint256[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "version",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "renderedAt",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "desc",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint8[]",
              "name": "ids",
              "type": "uint8[]"
            },
            {
              "internalType": "uint8[]",
              "name": "xovers",
              "type": "uint8[]"
            },
            {
              "internalType": "uint8[]",
              "name": "yovers",
              "type": "uint8[]"
            },
            {
              "internalType": "string[]",
              "name": "labels",
              "type": "string[]"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct IDotnuggV1Metadata.Memory",
          "name": "data",
          "type": "tuple"
        },
        {
          "internalType": "uint8",
          "name": "zoom",
          "type": "uint8"
        }
      ],
      "name": "resolveUri",
      "outputs": [
        {
          "internalType": "string",
          "name": "res",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "feature",
          "type": "uint8"
        },
        {
          "internalType": "uint256[][]",
          "name": "data",
          "type": "uint256[][]"
        }
      ],
      "name": "store",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "res",
          "type": "uint8"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementer",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "feature",
          "type": "uint8"
        }
      ],
      "name": "stored",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "res",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[][][]",
          "name": "data",
          "type": "uint256[][][]"
        }
      ],
      "name": "unsafeBulkStore",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc595838a83a1ab15aa25fb71409409de37c32138ea95c3ff123b2c5d3d92ba20",
  "receipt": {
    "to": null,
    "from": "0xB666C13b621568FeC210724DF161604adccfA257",
    "contractAddress": "0xF7895Bc8A3C3A8B91D834b888a6BdEaE4a2fb098",
    "transactionIndex": 0,
    "gasUsed": "7332442",
    "logsBloom": "0x
    "blockHash": "0x06b5cd903929c789e88acd9653f02528ff5c89c3ac034f390a2172d224aaf290",
    "transactionHash": "0xc595838a83a1ab15aa25fb71409409de37c32138ea95c3ff123b2c5d3d92ba20",
    "logs": [],
    "blockNumber": 11739278,
    "cumulativeGasUsed": "7332442",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "05aac4474395b61051595723eeab4104",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"width\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"zoom\",\"type\":\"uint8\"}],\"name\":\"dotnuggToBytes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"resolvedBy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"res\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"width\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"zoom\",\"type\":\"uint8\"}],\"name\":\"dotnuggToMetadata\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"resolvedBy\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"renderedAt\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"desc\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8[]\",\"name\":\"ids\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"xovers\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"yovers\",\"type\":\"uint8[]\"},{\"internalType\":\"string[]\",\"name\":\"labels\",\"type\":\"string[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IDotnuggV1Metadata.Memory\",\"name\":\"res\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"width\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"zoom\",\"type\":\"uint8\"}],\"name\":\"dotnuggToRaw\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"resolvedBy\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"res\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"width\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"zoom\",\"type\":\"uint8\"}],\"name\":\"dotnuggToString\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"resolvedBy\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"res\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"width\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"zoom\",\"type\":\"uint8\"}],\"name\":\"dotnuggToUri\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"resolvedBy\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"res\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lib\",\"outputs\":[{\"internalType\":\"contract DotnuggV1Lib\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"width\",\"type\":\"uint8\"}],\"name\":\"process\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"resp\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"renderedAt\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"desc\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8[]\",\"name\":\"ids\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"xovers\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"yovers\",\"type\":\"uint8[]\"},{\"internalType\":\"string[]\",\"name\":\"labels\",\"type\":\"string[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IDotnuggV1Metadata.Memory\",\"name\":\"data\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"file\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"renderedAt\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"desc\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8[]\",\"name\":\"ids\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"xovers\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"yovers\",\"type\":\"uint8[]\"},{\"internalType\":\"string[]\",\"name\":\"labels\",\"type\":\"string[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IDotnuggV1Metadata.Memory\",\"name\":\"data\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"resolveBytes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"res\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"renderedAt\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"desc\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8[]\",\"name\":\"ids\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"xovers\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"yovers\",\"type\":\"uint8[]\"},{\"internalType\":\"string[]\",\"name\":\"labels\",\"type\":\"string[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IDotnuggV1Metadata.Memory\",\"name\":\"data\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"resolveMetadata\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"renderedAt\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"desc\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8[]\",\"name\":\"ids\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"xovers\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"yovers\",\"type\":\"uint8[]\"},{\"internalType\":\"string[]\",\"name\":\"labels\",\"type\":\"string[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IDotnuggV1Metadata.Memory\",\"name\":\"res\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"file\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"renderedAt\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"desc\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8[]\",\"name\":\"ids\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"xovers\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"yovers\",\"type\":\"uint8[]\"},{\"internalType\":\"string[]\",\"name\":\"labels\",\"type\":\"string[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IDotnuggV1Metadata.Memory\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"resolveRaw\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"res\",\"type\":\"uint256[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"file\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"renderedAt\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"desc\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8[]\",\"name\":\"ids\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"xovers\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"yovers\",\"type\":\"uint8[]\"},{\"internalType\":\"string[]\",\"name\":\"labels\",\"type\":\"string[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IDotnuggV1Metadata.Memory\",\"name\":\"data\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"zoom\",\"type\":\"uint8\"}],\"name\":\"resolveString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"file\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"renderedAt\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"desc\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8[]\",\"name\":\"ids\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"xovers\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"yovers\",\"type\":\"uint8[]\"},{\"internalType\":\"string[]\",\"name\":\"labels\",\"type\":\"string[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IDotnuggV1Metadata.Memory\",\"name\":\"data\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"zoom\",\"type\":\"uint8\"}],\"name\":\"resolveUri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"res\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"feature\",\"type\":\"uint8\"},{\"internalType\":\"uint256[][]\",\"name\":\"data\",\"type\":\"uint256[][]\"}],\"name\":\"store\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"res\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementer\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"feature\",\"type\":\"uint8\"}],\"name\":\"stored\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"res\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[][][]\",\"name\":\"data\",\"type\":\"uint256[][][]\"}],\"name\":\"unsafeBulkStore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"nugg.xyz - danny7even & dub6ix\",\"details\":\"hold my margarita\",\"kind\":\"dev\",\"methods\":{},\"title\":\"dotnugg V1 - onchain encoder/decoder protocol for dotnugg files\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"yoU CAN'T HaVe ImAgES oN THe BlOCkcHAIn\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/DotnuggV1.sol\":\"DotnuggV1\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"src/DotnuggV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {IDotnuggV1} from './interfaces/IDotnuggV1.sol';\\nimport {IDotnuggV1Metadata} from './interfaces/IDotnuggV1Metadata.sol';\\nimport {IDotnuggV1Resolver} from './interfaces/IDotnuggV1Resolver.sol';\\nimport {IDotnuggV1Implementer} from './interfaces/IDotnuggV1Implementer.sol';\\n\\nimport {DotnuggV1Storage} from './core/DotnuggV1Storage.sol';\\nimport {DotnuggV1Lib} from './core/DotnuggV1Lib.sol';\\n\\n/// @title dotnugg V1 - onchain encoder/decoder protocol for dotnugg files\\n/// @author nugg.xyz - danny7even & dub6ix\\n/// @notice yoU CAN'T HaVe ImAgES oN THe BlOCkcHAIn\\n/// @dev hold my margarita\\ncontract DotnuggV1 is IDotnuggV1, DotnuggV1Storage {\\n    DotnuggV1Lib public lib;\\n\\n    constructor() {\\n        lib = new DotnuggV1Lib();\\n    }\\n\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                     core\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    function process(\\n        address implementer,\\n        uint256 tokenId,\\n        uint8 width\\n    ) public view override returns (uint256[] memory resp, IDotnuggV1Metadata.Memory memory data) {\\n        data = IDotnuggV1Implementer(implementer).dotnuggV1Callback(tokenId);\\n\\n        uint256[][] memory files = getBatchFiles(implementer, data.ids);\\n\\n        resp = lib.processCore(files, data, width);\\n    }\\n\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                processors\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    function dotnuggToUri(\\n        address implementer,\\n        uint256 tokenId,\\n        address resolver,\\n        uint8 width,\\n        uint8 zoom\\n    ) external view override returns (address resolvedBy, string memory res) {\\n        (uint256[] memory file, IDotnuggV1Metadata.Memory memory data) = process(implementer, tokenId, width);\\n\\n        if (resolver != address(0)) {\\n            try IDotnuggV1Resolver(resolver).resolveUri(file, data, zoom) returns (string memory d) {\\n                return (resolver, d);\\n            } catch (bytes memory) {}\\n        }\\n\\n        return (address(this), resolveUri(file, data, zoom));\\n    }\\n\\n    function dotnuggToRaw(\\n        address implementer,\\n        uint256 tokenId,\\n        address resolver,\\n        uint8 width,\\n        uint8 zoom\\n    ) external view override returns (address resolvedBy, uint256[] memory res) {\\n        (uint256[] memory file, IDotnuggV1Metadata.Memory memory data) = process(implementer, tokenId, width);\\n\\n        if (resolver != address(0)) {\\n            try IDotnuggV1Resolver(resolver).resolveRaw(file, data, zoom) returns (uint256[] memory d) {\\n                return (resolver, d);\\n            } catch (bytes memory) {}\\n        }\\n\\n        return (address(this), resolveRaw(file, data, zoom));\\n    }\\n\\n    function dotnuggToBytes(\\n        address implementer,\\n        uint256 tokenId,\\n        address resolver,\\n        uint8 width,\\n        uint8 zoom\\n    ) external view override returns (address resolvedBy, bytes memory res) {\\n        (uint256[] memory file, IDotnuggV1Metadata.Memory memory data) = process(implementer, tokenId, width);\\n\\n        if (resolver != address(0)) {\\n            try IDotnuggV1Resolver(resolver).resolveBytes(file, data, zoom) returns (bytes memory d) {\\n                return (resolver, d);\\n            } catch (bytes memory) {}\\n        }\\n\\n        return (address(this), resolveBytes(file, data, zoom));\\n    }\\n\\n    function dotnuggToString(\\n        address implementer,\\n        uint256 tokenId,\\n        address resolver,\\n        uint8 width,\\n        uint8 zoom\\n    ) external view override returns (address resolvedBy, string memory res) {\\n        (uint256[] memory file, IDotnuggV1Metadata.Memory memory data) = process(implementer, tokenId, width);\\n\\n        if (resolver != address(0)) {\\n            try IDotnuggV1Resolver(resolver).resolveString(file, data, zoom) returns (string memory d) {\\n                return (resolver, d);\\n            } catch (bytes memory) {}\\n        }\\n\\n        return (address(this), resolveString(file, data, zoom));\\n    }\\n\\n    function dotnuggToMetadata(\\n        address implementer,\\n        uint256 tokenId,\\n        address resolver,\\n        uint8 width,\\n        uint8 zoom\\n    ) external view override returns (address resolvedBy, IDotnuggV1Metadata.Memory memory res) {\\n        (uint256[] memory file, IDotnuggV1Metadata.Memory memory data) = process(implementer, tokenId, width);\\n\\n        if (resolver != address(0)) {\\n            try IDotnuggV1Resolver(resolver).resolveMetadata(file, data, zoom) returns (IDotnuggV1Metadata.Memory memory d) {\\n                return (resolver, d);\\n            } catch (bytes memory) {}\\n        }\\n\\n        return (address(this), resolveMetadata(file, data, zoom));\\n    }\\n\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                              default resolvers\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    function resolveRaw(\\n        uint256[] memory file,\\n        IDotnuggV1Metadata.Memory memory,\\n        uint8\\n    ) public pure override returns (uint256[] memory res) {\\n        res = file;\\n    }\\n\\n    function resolveBytes(\\n        uint256[] memory file,\\n        IDotnuggV1Metadata.Memory memory data,\\n        uint8\\n    ) public pure override returns (bytes memory res) {\\n        res = abi.encode(file, data);\\n    }\\n\\n    function resolveMetadata(\\n        uint256[] memory,\\n        IDotnuggV1Metadata.Memory memory data,\\n        uint8\\n    ) public pure override returns (IDotnuggV1Metadata.Memory memory res) {\\n        res = data;\\n    }\\n\\n    function resolveString(\\n        uint256[] memory file,\\n        IDotnuggV1Metadata.Memory memory data,\\n        uint8 zoom\\n    ) public view override returns (string memory) {\\n        return string(lib.svgBase64(lib.buildSvg(data, file, zoom)));\\n    }\\n\\n    function resolveUri(\\n        uint256[] memory file,\\n        IDotnuggV1Metadata.Memory memory data,\\n        uint8 zoom\\n    ) public view override returns (string memory res) {\\n        res = string(\\n            lib.jsonBase64(\\n                abi.encodePacked(\\n                    '{\\\"name\\\":\\\"',\\n                    data.name,\\n                    '\\\",\\\"description\\\":\\\"',\\n                    data.desc,\\n                    '\\\", \\\"image\\\": \\\"',\\n                    lib.svgBase64(lib.buildSvg(data, file, zoom)),\\n                    '\\\",\\\"tokenId\\\":\\\"',\\n                    lib.uintToAscii(data.tokenId),\\n                    '\\\"}'\\n                )\\n            )\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xceaf5fe4e089a2e5c853fa6117b248a987bd0246186b5687c976d44bf8b5791e\",\"license\":\"MIT\"},\"src/_test/utils/DSTestEmmitter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nabstract contract DSTestEmmitter {\\n    event log(string);\\n    event logs(bytes);\\n\\n    event log_address(address);\\n    event log_bytes32(bytes32);\\n    event log_int(int256);\\n    event log_uint(uint256);\\n    event log_bytes(bytes);\\n    event log_string(string);\\n\\n    event log_named_address(string key, address val);\\n    event log_named_bytes32(string key, bytes32 val);\\n    event log_named_decimal_int(string key, int256 val, uint256 decimals);\\n    event log_named_decimal_uint(string key, uint256 val, uint256 decimals);\\n    event log_named_int(string key, int256 val);\\n    event log_named_uint(string key, uint256 val);\\n    event log_named_bytes(string key, bytes val);\\n    event log_named_string(string key, string val);\\n}\\n\",\"keccak256\":\"0xa34205de63742c90b2f88d8a7629d74fce5163dcb401a47db55fa42eb5379bdb\",\"license\":\"MIT\"},\"src/_test/utils/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n    function _sendLogPayload(bytes memory payload) private view {\\n        uint256 payloadLength = payload.length;\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        assembly {\\n            let payloadStart := add(payload, 32)\\n            let r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n        }\\n    }\\n\\n    function log() internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log()'));\\n    }\\n\\n    function logInt(int256 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(int)', p0));\\n    }\\n\\n    function logUint(uint256 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint)', p0));\\n    }\\n\\n    function logString(string memory p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string)', p0));\\n    }\\n\\n    function logBool(bool p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool)', p0));\\n    }\\n\\n    function logAddress(address p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address)', p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes)', p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes1)', p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes2)', p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes3)', p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes4)', p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes5)', p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes6)', p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes7)', p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes8)', p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes9)', p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes10)', p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes11)', p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes12)', p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes13)', p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes14)', p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes15)', p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes16)', p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes17)', p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes18)', p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes19)', p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes20)', p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes21)', p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes22)', p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes23)', p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes24)', p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes25)', p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes26)', p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes27)', p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes28)', p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes29)', p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes30)', p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes31)', p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes32)', p0));\\n    }\\n\\n    function log(uint256 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint)', p0));\\n    }\\n\\n    function log(string memory p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string)', p0));\\n    }\\n\\n    function log(bool p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool)', p0));\\n    }\\n\\n    function log(address p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address)', p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint)', p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string)', p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool)', p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address)', p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint)', p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string)', p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool)', p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address)', p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint)', p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string)', p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool)', p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address)', p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint)', p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string)', p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool)', p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address)', p0, p1));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,address,address)', p0, p1, p2, p3));\\n    }\\n}\\n\",\"keccak256\":\"0x37bd64b8511ea43408b826a23d5b6c0777e251e5a38fcfa27074bc56344874f9\",\"license\":\"MIT\"},\"src/core/DotnuggV1Lib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {IDotnuggV1Metadata} from '../interfaces/IDotnuggV1Metadata.sol';\\n\\nimport {BitReader} from '../libraries/BitReader.sol';\\nimport {Base64} from '../libraries/Base64.sol';\\n\\nimport {Calculator} from '../logic/Calculator.sol';\\nimport {Matrix} from '../logic/Matrix.sol';\\nimport {DotnuggV1SvgLib} from './DotnuggV1SvgLib.sol';\\n\\nimport {ShiftLib} from '../libraries/ShiftLib.sol';\\nimport {Base64} from '../libraries/Base64.sol';\\n\\nimport {Version} from '../types/Version.sol';\\nimport {Types} from '../types/Types.sol';\\nimport {DotnuggV1Storage} from './DotnuggV1Storage.sol';\\nimport {StringCastLib} from '../libraries/StringCastLib.sol';\\n\\nimport '../_test/utils/DSTestEmmitter.sol';\\n\\ncontract DotnuggV1Lib is DSTestEmmitter {\\n    using BitReader for BitReader.Memory;\\n\\n    function processCore(\\n        uint256[][] memory files,\\n        IDotnuggV1Metadata.Memory memory data,\\n        uint8 width\\n    ) public view returns (uint256[] memory resp) {\\n        require(data.version == 1, 'V1s');\\n\\n        require(width <= 64 && width > 4, 'V1:SIZE');\\n\\n        if (width % 2 == 0) width--;\\n\\n        Version.Memory[][] memory versions = parse(files, data.xovers, data.yovers);\\n\\n        Types.Matrix memory old = combine(8, width, versions);\\n\\n        resp = compressBigMatrix(old.version.bigmatrix, old.version.data);\\n    }\\n\\n    function combine(\\n        uint256 featureLen,\\n        uint8 width,\\n        Version.Memory[][] memory versions\\n    ) internal pure returns (Types.Matrix memory) {\\n        Types.Canvas memory canvas;\\n        canvas.matrix = Matrix.create(width, width);\\n        canvas.receivers = new Types.Anchor[](featureLen);\\n\\n        Types.Coordinate memory center = Types.Coordinate({a: width / 2 + 1, b: width / 2 + 1, exists: true});\\n\\n        Types.Rlud memory r;\\n\\n        for (uint8 i = 0; i < featureLen; i++) {\\n            canvas.receivers[i] = Types.Anchor({coordinate: center, radii: r});\\n        }\\n\\n        canvas.matrix.width = width;\\n        canvas.matrix.height = width;\\n\\n        Types.Mix memory mix;\\n        mix.matrix = Matrix.create(width, width);\\n        mix.receivers = new Types.Anchor[](featureLen);\\n\\n        for (uint8 i = 0; i < versions.length; i++) {\\n            if (versions[i].length > 0) {\\n                Calculator.setMix(mix, versions[i], Calculator.pickVersionIndex(canvas, versions[i]));\\n\\n                Calculator.formatForCanvas(canvas, mix);\\n\\n                Calculator.postionForCanvas(canvas, mix);\\n\\n                Calculator.mergeToCanvas(canvas, mix);\\n\\n                Calculator.calculateReceivers(mix);\\n\\n                Calculator.updateReceivers(canvas, mix);\\n            }\\n        }\\n\\n        return canvas.matrix;\\n    }\\n\\n    function parse(\\n        uint256[][] memory data,\\n        uint8[] memory xovers,\\n        uint8[] memory yovers\\n    ) public view returns (Version.Memory[][] memory m) {\\n        m = new Version.Memory[][](data.length);\\n\\n        for (uint256 j = 0; j < data.length; j++) {\\n            (bool empty, BitReader.Memory memory reader) = BitReader.init(data[j]);\\n\\n            if (empty) continue;\\n\\n            // indicates dotnuggV1 encoded file\\n            require(reader.select(32) == 0x420690_01, 'DEC:PI:0');\\n\\n            uint256 feature = reader.select(3);\\n\\n            uint256 id = reader.select(8);\\n\\n            uint256[] memory pallet = Version.parsePallet(reader, id, feature);\\n\\n            uint256 versionLength = reader.select(2) + 1;\\n\\n            m[j] = new Version.Memory[](versionLength);\\n\\n            for (uint256 i = 0; i < versionLength; i++) {\\n                m[j][i].data = Version.parseData(reader, feature, xovers, yovers);\\n\\n                m[j][i].receivers = Version.parseReceivers(reader);\\n\\n                (uint256 width, uint256 height) = Version.getWidth(m[j][i]);\\n\\n                m[j][i].minimatrix = Version.parseMiniMatrix(reader, width, height);\\n\\n                m[j][i].pallet = pallet;\\n            }\\n        }\\n    }\\n\\n    function decompressBigMatrix(uint256[] memory input) public pure returns (uint256[] memory res) {\\n        res = new uint256[]((input[input.length - 1] >> 240));\\n\\n        uint256 counter = 0;\\n\\n        for (uint256 i = 0; i < input.length; i++) {\\n            uint256 numzeros = input[i] & 0xf;\\n\\n            if (numzeros == 0xf) {\\n                numzeros = input[i++] >> 4;\\n            }\\n\\n            for (uint256 j = 0; j < numzeros; j++) {\\n                // skips a row, keeping it at zero\\n                counter++;\\n            }\\n\\n            res[counter++] = input[i] >> 4;\\n        }\\n    }\\n\\n    function compressBigMatrix(uint256[] memory input, uint256 data) public pure returns (uint256[] memory res) {\\n        uint256 counter;\\n        uint256 rescounter;\\n        uint256 zerocount;\\n\\n        do {\\n            if (input[counter] == 0) {\\n                zerocount++;\\n                continue;\\n            }\\n\\n            if (zerocount > 14) {\\n                input[rescounter++] = (zerocount << 4) | 0xf;\\n                zerocount = 0;\\n            }\\n\\n            input[rescounter++] = (input[counter] << 4) | zerocount;\\n\\n            zerocount = 0;\\n        } while (++counter < input.length);\\n\\n        if (zerocount > 14) {\\n            input[rescounter++] = (zerocount << 4) | 0xf;\\n            zerocount = 0;\\n        }\\n\\n        input[rescounter++] = (data << 4) | zerocount | ((input.length + 1) << 240);\\n\\n        Version.setArrayLength(input, rescounter);\\n\\n        return input;\\n    }\\n\\n    function buildSvg(\\n        IDotnuggV1Metadata.Memory memory data,\\n        uint256[] memory file,\\n        uint8 zoom\\n    ) external pure returns (bytes memory res) {\\n        file = decompressBigMatrix(file);\\n\\n        uint256 width = (file[file.length - 1] >> 63) & ShiftLib.mask(6);\\n        uint256 height = (file[file.length - 1] >> 69) & ShiftLib.mask(6);\\n\\n        res = DotnuggV1SvgLib.build(data, file, width, height, zoom);\\n\\n        return res;\\n    }\\n\\n    function svgBase64(bytes memory input) public pure returns (bytes memory res) {\\n        res = abi.encodePacked(Base64.PREFIX_SVG, base64(input));\\n    }\\n\\n    function svgUtf8(bytes memory input) public pure returns (bytes memory res) {\\n        res = abi.encodePacked('data:image/svg+xml;charset=UTF-8,', input);\\n    }\\n\\n    function jsonBase64(bytes memory input) public pure returns (bytes memory res) {\\n        res = abi.encodePacked(Base64.PREFIX_JSON, base64(input));\\n    }\\n\\n    function dotnuggBase64(bytes memory input) public pure returns (bytes memory res) {\\n        res = abi.encodePacked(Base64.PREFIX_DOTNUGG, base64(input));\\n    }\\n\\n    function base64(bytes memory input) public pure returns (bytes memory res) {\\n        res = Base64._encode(input);\\n    }\\n\\n    function uintToAscii(uint256 input) public pure returns (string memory res) {\\n        res = StringCastLib.toAsciiString(input);\\n    }\\n\\n    function uintToHex(uint256 input, uint8 length) public pure returns (string memory res) {\\n        res = StringCastLib.toHexString(input, length);\\n    }\\n}\\n\",\"keccak256\":\"0x927c0cb5d27f7c600525773b8a63f1b02c811e7e5aa8a473f1880ca190a7d4b6\",\"license\":\"MIT\"},\"src/core/DotnuggV1Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\nimport {IDotnuggV1Storage} from '../interfaces/IDotnuggV1Storage.sol';\\nimport {SSTORE2} from '../libraries/SSTORE2.sol';\\nimport {SafeCastLib} from '../libraries/SafeCastLib.sol';\\n\\nabstract contract DotnuggV1Storage is IDotnuggV1Storage {\\n    using SafeCastLib for uint256;\\n    using SafeCastLib for uint16;\\n\\n    // Mapping from token ID to owner address\\n    mapping(address => mapping(uint8 => uint168[])) sstore2Pointers;\\n    mapping(address => mapping(uint8 => uint8)) featureLengths;\\n\\n    function stored(address implementer, uint8 feature) public view override returns (uint8 res) {\\n        return featureLengths[implementer][feature];\\n    }\\n\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                TRUSTED\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    function unsafeBulkStore(uint256[][][] calldata data) public override {\\n        for (uint8 i = 0; i < 8; i++) {\\n            store(i, data[i]);\\n        }\\n    }\\n\\n    function store(uint8 feature, uint256[][] calldata data) public override returns (uint8 res) {\\n        uint8 len = data.length.safe8();\\n\\n        require(len > 0, 'F:0');\\n\\n        address ptr = SSTORE2.write(abi.encode(data));\\n\\n        sstore2Pointers[msg.sender][feature].push(uint168(uint160(ptr)) | (uint168(len) << 160));\\n\\n        featureLengths[msg.sender][feature] += len;\\n\\n        return len;\\n    }\\n\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                 GET FILES\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    function getBatchFiles(address implementer, uint8[] memory ids) internal view returns (uint256[][] memory data) {\\n        data = new uint256[][](ids.length);\\n\\n        for (uint8 i = 0; i < ids.length; i++) {\\n            if (ids[i] == 0) data[i] = new uint256[](0);\\n            else data[i] = get(implementer, i, ids[i]);\\n        }\\n    }\\n\\n    function get(\\n        address implementer,\\n        uint8 feature,\\n        uint8 pos\\n    ) internal view returns (uint256[] memory data) {\\n        require(pos != 0, 'F:1');\\n\\n        pos--;\\n\\n        uint8 totalLength = featureLengths[implementer][feature];\\n\\n        require(pos < totalLength, 'F:2');\\n\\n        uint168[] memory ptrs = sstore2Pointers[implementer][feature];\\n\\n        address stor;\\n        uint8 storePos;\\n\\n        uint8 workingPos;\\n\\n        for (uint256 i = 0; i < ptrs.length; i++) {\\n            uint8 here = uint8(ptrs[i] >> 160);\\n            if (workingPos + here > pos) {\\n                stor = address(uint160(ptrs[i]));\\n                storePos = pos - workingPos;\\n                break;\\n            } else {\\n                workingPos += here;\\n            }\\n        }\\n\\n        require(stor != address(0), 'F:3');\\n\\n        data = abi.decode(SSTORE2.read(stor), (uint256[][]))[storePos];\\n    }\\n}\\n\",\"keccak256\":\"0x4cdbf2e294627a8407a554d9d656921a8db8ea7066dcbc58585004afecd21a33\",\"license\":\"MIT\"},\"src/core/DotnuggV1SvgLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {StringCastLib} from '../libraries/StringCastLib.sol';\\nimport {ShiftLib} from '../libraries/ShiftLib.sol';\\nimport {Pixel} from '../types/Pixel.sol';\\nimport {Version} from '../types/Version.sol';\\n\\nimport {IDotnuggV1Metadata} from '../interfaces/IDotnuggV1Metadata.sol';\\n\\nlibrary DotnuggV1SvgLib {\\n    using StringCastLib for uint256;\\n    using StringCastLib for uint8;\\n\\n    using StringCastLib for address;\\n\\n    using Pixel for uint256;\\n\\n    function getColorIndex(\\n        Memory[] memory mapper,\\n        uint256 color,\\n        uint256 zoom\\n    ) internal pure returns (uint256 i) {\\n        color = color.rgba();\\n        if (color == 0) return 0;\\n        i++;\\n        for (; i < mapper.length; i++) {\\n            if (mapper[i].color == 0) break;\\n            if (mapper[i].color == color) return i;\\n        }\\n        mapper[i].color = color;\\n        mapper[i].data = abi.encodePacked(\\n            zoom > 1 ? '<path fill=\\\"#' : '<path stroke=\\\"#',\\n            color & 0xff == 0xff ? (color >> 8).toHexStringNoPrefix(3) : color.toHexStringNoPrefix(4),\\n            '\\\" d=\\\"'\\n        );\\n    }\\n\\n    struct Memory {\\n        bytes data;\\n        uint256 color;\\n    }\\n\\n    function setRektPath(\\n        Memory[] memory mapper,\\n        uint256 color,\\n        uint256 x,\\n        uint256 y,\\n        uint256 xlen,\\n        uint256 zoom\\n    ) internal pure {\\n        if (color == 0) return;\\n\\n        uint256 index = getColorIndex(mapper, color, zoom);\\n\\n        mapper[index].data = abi.encodePacked(\\n            mapper[index].data,\\n            'M',\\n            (x * zoom).toAsciiString(),\\n            ' ',\\n            (y * zoom).toAsciiString(),\\n            'h',\\n            (xlen * zoom).toAsciiString()\\n        );\\n\\n        if (zoom > 1) {\\n            mapper[index].data = abi.encodePacked(\\n                mapper[index].data,\\n                'v',\\n                (zoom).toAsciiString(),\\n                'L',\\n                (x * zoom).toAsciiString(),\\n                ' ',\\n                (y * zoom + zoom).toAsciiString()\\n            );\\n        }\\n    }\\n\\n    function build(\\n        IDotnuggV1Metadata.Memory memory data,\\n        uint256[] memory file,\\n        uint256 width,\\n        uint256 height,\\n        uint256 zoom\\n    ) internal pure returns (bytes memory res) {\\n        if (zoom == 0) zoom = 1;\\n\\n        (uint256 last, ) = Version.getPixelAt(file, 0, 0, width);\\n\\n        uint256 count = 1;\\n\\n        Memory[] memory mapper = new Memory[](64);\\n\\n        for (uint256 y = 0; y < height; y++) {\\n            for (uint256 x = 0; x < width; x++) {\\n                if (y == 0 && x == 0) x++;\\n\\n                (uint256 curr, ) = Version.getPixelAt(file, x, y, width);\\n\\n                if (curr.rgba() == last.rgba()) {\\n                    count++;\\n                    continue;\\n                }\\n\\n                setRektPath(mapper, last, (x - count), y, count, zoom);\\n\\n                last = curr;\\n                count = 1;\\n            }\\n\\n            setRektPath(mapper, last, (width - count), y, count, zoom);\\n\\n            last = 0;\\n            count = 0;\\n        }\\n\\n        bytes memory body;\\n\\n        for (uint256 i = 1; i < mapper.length; i++) {\\n            if (mapper[i].color == 0) break;\\n            body = abi.encodePacked(body, mapper[i].data, '\\\"/>');\\n        }\\n\\n        string memory __s = (63 * zoom).toAsciiString();\\n\\n        res = abi.encodePacked(\\n            '<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?><svg viewbox=\\\"0 0 ',\\n            __s,\\n            ' ',\\n            __s,\\n            '\\\" height=\\\"',\\n            __s,\\n            '\\\" width=\\\"',\\n            __s,\\n            '\\\" version=\\\"1.2\\\" baseProfile=\\\"tiny\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" overflow=\\\"visible\\\" xml:space=\\\"preserve\\\">',\\n            body,\\n            hex'3c2f7376673e'\\n        );\\n    }\\n\\n    function getMetadata(IDotnuggV1Metadata.Memory memory data) internal pure returns (bytes memory res) {\\n        res = abi.encodePacked(\\n            '<text x=\\\"10\\\" y=\\\"20\\\" font-family=\\\"monospace\\\" font-size=\\\"20px\\\" style=\\\"fill:black;\\\">Metadata:',\\n            getTspan(45, 0, 'name', data.name),\\n            getTspan(75, 0, 'description', data.desc),\\n            getTspan(105, 0, 'id', data.tokenId.toAsciiString()),\\n            getTspan(135, 0, 'owner', data.owner.toHexString()),\\n            getTspan(165, 0, 'items', '')\\n        );\\n\\n        for (uint256 i = 0; i < 8; i++) {\\n            if (data.ids[i] > 0) {\\n                res = abi.encodePacked(res, getTspan(195 + i * 30, 20, data.labels[i], data.ids[i].toAsciiString()));\\n            }\\n        }\\n\\n        res = abi.encodePacked(res, '</text>');\\n    }\\n\\n    function getTspan(\\n        uint256 y,\\n        uint256 xoffset,\\n        string memory label,\\n        string memory data\\n    ) internal pure returns (bytes memory res) {\\n        res = abi.encodePacked(\\n            '<tspan x=\\\"',\\n            (10 + xoffset).toAsciiString(),\\n            '\\\" y=\\\"',\\n            y.toAsciiString(),\\n            '\\\">',\\n            '<tspan style=\\\"font-weight:bold;\\\">',\\n            label,\\n            ':</tspan> ',\\n            data,\\n            '</tspan>'\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x61cdbccc2d501b71160945339bac677a0f6f9677832c45ac746346f789ccddda\",\"license\":\"MIT\"},\"src/interfaces/IDotnuggV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {IDotnuggV1Metadata} from './IDotnuggV1Metadata.sol';\\nimport {IDotnuggV1Resolver} from './IDotnuggV1Resolver.sol';\\nimport {IDotnuggV1Storage} from './IDotnuggV1Storage.sol';\\n\\ninterface IDotnuggV1 is IDotnuggV1Resolver, IDotnuggV1Storage {\\n    function process(\\n        address implementer,\\n        uint256 tokenId,\\n        uint8 width\\n    ) external view returns (uint256[] memory file, IDotnuggV1Metadata.Memory memory dat);\\n\\n    function dotnuggToBytes(\\n        address implementer,\\n        uint256 tokenId,\\n        address resolver,\\n        uint8 width,\\n        uint8 zoom\\n    ) external view returns (address resolvedBy, bytes memory res);\\n\\n    function dotnuggToRaw(\\n        address implementer,\\n        uint256 tokenId,\\n        address resolver,\\n        uint8 width,\\n        uint8 zoom\\n    ) external view returns (address resolvedBy, uint256[] memory res);\\n\\n    function dotnuggToMetadata(\\n        address implementer,\\n        uint256 tokenId,\\n        address resolver,\\n        uint8 width,\\n        uint8 zoom\\n    ) external view returns (address resolvedBy, IDotnuggV1Metadata.Memory memory res);\\n\\n    function dotnuggToString(\\n        address implementer,\\n        uint256 tokenId,\\n        address resolver,\\n        uint8 width,\\n        uint8 zoom\\n    ) external view returns (address resolvedBy, string memory res);\\n\\n    function dotnuggToUri(\\n        address implementer,\\n        uint256 tokenId,\\n        address resolver,\\n        uint8 width,\\n        uint8 zoom\\n    ) external view returns (address resolvedBy, string memory res);\\n}\\n\",\"keccak256\":\"0x237c7552be8c2a1e942e3e67008405c5b6a39cfaffbffe9d6c01a37d81c14be7\",\"license\":\"MIT\"},\"src/interfaces/IDotnuggV1Implementer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {IDotnuggV1Metadata} from './IDotnuggV1Metadata.sol';\\n\\ninterface IDotnuggV1Implementer {\\n    function dotnuggV1Callback(uint256 tokenId) external view returns (IDotnuggV1Metadata.Memory memory data);\\n\\n    function dotnuggV1StoreFiles(uint256[][] calldata data, uint8 feature) external;\\n}\\n\",\"keccak256\":\"0x10c073976228eeba301841b321ba13c81d82f9dfdede02228b42820306fcbe9a\",\"license\":\"MIT\"},\"src/interfaces/IDotnuggV1Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IDotnuggV1Metadata {\\n    struct Memory {\\n        uint256 version;\\n        uint256 renderedAt;\\n        string name;\\n        string desc;\\n        address owner;\\n        uint256 tokenId;\\n        uint8[] ids;\\n        uint8[] xovers;\\n        uint8[] yovers;\\n        string[] labels;\\n        bytes data;\\n    }\\n}\\n\",\"keccak256\":\"0x3b623a767c633838703eb2cd59602e5e55ac3a7d75c267882d4bed714dcf5824\",\"license\":\"MIT\"},\"src/interfaces/IDotnuggV1Resolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {IDotnuggV1Metadata} from './IDotnuggV1Metadata.sol';\\n\\ninterface IDotnuggV1Resolver {\\n    function resolveBytes(\\n        uint256[] memory file,\\n        IDotnuggV1Metadata.Memory memory data,\\n        uint8 zoom\\n    ) external view returns (bytes memory res);\\n\\n    function resolveRaw(\\n        uint256[] memory file,\\n        IDotnuggV1Metadata.Memory memory data,\\n        uint8 zoom\\n    ) external view returns (uint256[] memory res);\\n\\n    function resolveMetadata(\\n        uint256[] memory file,\\n        IDotnuggV1Metadata.Memory memory data,\\n        uint8 zoom\\n    ) external view returns (IDotnuggV1Metadata.Memory memory res);\\n\\n    function resolveString(\\n        uint256[] memory file,\\n        IDotnuggV1Metadata.Memory memory data,\\n        uint8 zoom\\n    ) external view returns (string memory res);\\n\\n    function resolveUri(\\n        uint256[] memory file,\\n        IDotnuggV1Metadata.Memory memory data,\\n        uint8 zoom\\n    ) external view returns (string memory res);\\n}\\n\",\"keccak256\":\"0x816035c81399e79c031f6f65ff57cca1b488c0b707eb8b0429d501bd9fb1dbf4\",\"license\":\"MIT\"},\"src/interfaces/IDotnuggV1Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IDotnuggV1Storage {\\n    function stored(address implementer, uint8 feature) external view returns (uint8);\\n\\n    function store(uint8 feature, uint256[][] calldata data) external returns (uint8 amount);\\n\\n    function unsafeBulkStore(uint256[][][] calldata data) external;\\n}\\n\",\"keccak256\":\"0xefb2220d184cd420e5b9cfcb7812dc4d309da7f35c499224bf4d401620f7ee65\",\"license\":\"MIT\"},\"src/libraries/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @title Base64\\n * @author Nugg Labs - @danny7even & @dub6ix\\n * @notice library for encoding bytes into base64\\n */\\nlibrary Base64 {\\n    string internal constant _TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    string internal constant PREFIX_JSON = 'data:application/json;base64,';\\n    string internal constant PREFIX_DOTNUGG = 'data:image/dotnugg;base64,';\\n    string internal constant PREFIX_SVG = 'data:image/svg+xml;base64,';\\n\\n    /**\\n     * @notice wrapper for _encode for svg data\\n     * @param data bytes to encode\\n     * @return base64 string representation of input bytes, prefixed with json base64 prefix\\n     */\\n    function encode(bytes memory data, string memory file) internal pure returns (string memory) {\\n        return string(abi.encodePacked('data:', file, ';base64,', _encode(data)));\\n    }\\n\\n    /**\\n     * @notice Encodes some bytes in base64\\n     * @param data bytes to encode\\n     * @return base64 string representation of input bytes\\n     * @dev Credit to Brecht Devos - <brecht@loopring.org> - under MIT license https://github.com/Brechtpd/base64/blob/main/base64.sol\\n     * @dev modified for solidity v8\\n     */\\n    function _encode(bytes memory data) internal pure returns (bytes memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = _TABLE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {\\n\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                dataPtr := add(dataPtr, 3)\\n\\n                // read 3 bytes\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F)))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F)))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(6, input), 0x3F)))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore(resultPtr, shl(248, mload(add(tablePtr, and(input, 0x3F)))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n            }\\n            case 2 {\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x24a45e23f4363421ff4ca2c5bd3f9ade211119cb67606dc017aa4c3e0cb4ddee\",\"license\":\"MIT\"},\"src/libraries/BitReader.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport '../libraries/ShiftLib.sol';\\n\\nlibrary BitReader {\\n    using ShiftLib for uint256;\\n\\n    struct Memory {\\n        uint256[] dat;\\n        uint256 moves;\\n        uint256 pos;\\n    }\\n\\n    function init(uint256[] memory input) internal pure returns (bool err, Memory memory m) {\\n        if (input.length == 0) return (true, m);\\n\\n        m.dat = input;\\n\\n        m.moves = 2;\\n\\n        m.dat = new uint256[](input.length);\\n\\n        for (uint256 i = input.length; i > 0; i--) {\\n            m.dat[i - 1] = input[input.length - i];\\n        }\\n    }\\n\\n    function peek(Memory memory m, uint8 bits) internal pure returns (uint256 res) {\\n        res = m.dat[0] & ShiftLib.mask(bits);\\n    }\\n\\n    function select(Memory memory m, uint8 bits) internal pure returns (uint256 res) {\\n        res = m.dat[0] & ShiftLib.mask(bits);\\n\\n        m.dat[0] = m.dat[0] >> bits;\\n\\n        m.pos += bits;\\n\\n        if (m.pos >= 128) {\\n            uint256 ptr = (m.moves / 2);\\n            if (ptr < m.dat.length) {\\n                m.dat[0] <<= m.pos - 128;\\n                uint256 move = m.dat[ptr] & ShiftLib.mask(128);\\n                m.dat[ptr] >>= 128;\\n                m.dat[0] |= (move << 128);\\n                m.dat[0] >>= (m.pos - 128);\\n                m.moves++;\\n                m.pos -= 128;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1f5c8e79958d83664af4a27d4e2cc8959b074453deca179b038d8e375eee8e9\",\"license\":\"MIT\"},\"src/libraries/SSTORE2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/// Adapted from Rari-Capital/solmate\\n\\n/// @notice Read and write to persistent storage at a fraction of the cost.\\n/// @author Modified from 0xSequence (https://github.com/0xsequence/sstore2/blob/master/contracts/SSTORE2.sol)\\nlibrary SSTORE2 {\\n    uint256 internal constant DATA_OFFSET = 1;\\n\\n    function write(bytes memory data) internal returns (address pointer) {\\n        bytes memory runtimeCode = abi.encodePacked(hex'00', data);\\n\\n        bytes memory creationCode = abi.encodePacked(hex'63', uint32(runtimeCode.length), hex'80_60_0E_60_00_39_60_00_F3', runtimeCode);\\n\\n        assembly {\\n            pointer := create(0, add(creationCode, 32), mload(creationCode))\\n        }\\n\\n        require(pointer != address(0), 'DEPLOYMENT_FAILED');\\n    }\\n\\n    function read(address pointer) internal view returns (bytes memory) {\\n        return readBytecode(pointer, DATA_OFFSET, pointer.code.length - DATA_OFFSET);\\n    }\\n\\n    function read(address pointer, uint256 start) internal view returns (bytes memory) {\\n        start += DATA_OFFSET;\\n\\n        return readBytecode(pointer, start, pointer.code.length - start);\\n    }\\n\\n    function read(\\n        address pointer,\\n        uint256 start,\\n        uint256 end\\n    ) internal view returns (bytes memory) {\\n        start += DATA_OFFSET;\\n        end += DATA_OFFSET;\\n\\n        require(pointer.code.length >= end, 'OUT_OF_BOUNDS');\\n\\n        return readBytecode(pointer, start, end - start);\\n    }\\n\\n    function readBytecode(\\n        address pointer,\\n        uint256 start,\\n        uint256 size\\n    ) private view returns (bytes memory data) {\\n        assembly {\\n            data := mload(0x40)\\n            mstore(0x40, add(data, and(add(add(size, add(start, 0x20)), 0x1f), not(0x1f))))\\n            mstore(data, size)\\n            extcodecopy(pointer, add(data, 0x20), start, size)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdd6b623c8972b677b95cb8aeaeb6497b7c850ee902a323d0eec9a64412a82f32\",\"license\":\"MIT\"},\"src/libraries/SafeCastLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\nimport {ShiftLib} from './ShiftLib.sol';\\n\\nlibrary SafeCastLib {\\n    function safe252(uint256 x) internal pure returns (uint256 y) {\\n        require(x <= ShiftLib.mask(252), 'SC:252');\\n        return x;\\n    }\\n\\n    function safe160(uint256 x) internal pure returns (uint160 y) {\\n        require(x <= type(uint160).max);\\n        y = uint160(x);\\n    }\\n\\n    function safe96(uint256 x) internal pure returns (uint96 y) {\\n        require(x <= type(uint96).max);\\n        y = uint96(x);\\n    }\\n\\n    function safe64(uint256 x) internal pure returns (uint64 y) {\\n        require(x <= type(uint64).max);\\n        y = uint64(x);\\n    }\\n\\n    function safe32(uint256 x) internal pure returns (uint32 y) {\\n        require(x <= type(uint32).max);\\n        y = uint32(x);\\n    }\\n\\n    function safe16(uint256 x) internal pure returns (uint16 y) {\\n        require(x <= type(uint16).max);\\n        y = uint16(x);\\n    }\\n\\n    function safe8(uint256 x) internal pure returns (uint8 y) {\\n        require(x <= type(uint8).max);\\n        y = uint8(x);\\n    }\\n\\n    function safe6(uint256 x) internal pure returns (uint8 y) {\\n        require(x <= 0xf7);\\n        y = uint8(x);\\n    }\\n\\n    function safe4(uint256 x) internal pure returns (uint8 y) {\\n        require(x <= 0xf);\\n        y = uint8(x);\\n    }\\n\\n    function safe3(uint256 x) internal pure returns (uint8 y) {\\n        require(x <= 0x7);\\n        y = uint8(x);\\n    }\\n}\\n\",\"keccak256\":\"0x70a9af6f707af1bcc29f5798a9dee15f7dae34ff5066278fcae3914f61006593\",\"license\":\"MIT\"},\"src/libraries/ShiftLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {SafeCastLib} from './SafeCastLib.sol';\\n\\nlibrary ShiftLib {\\n    using SafeCastLib for uint256;\\n\\n    /// @notice creates a bit mask\\n    /// @dev res = (2 ^ bits) - 1\\n    /// @param bits d\\n    /// @return res d\\n    /// @dev no need to check if \\\"bits\\\" is < 256 as anything greater than 255 will be treated the same\\n    function mask(uint8 bits) internal pure returns (uint256 res) {\\n        assembly {\\n            res := sub(shl(bits, 1), 1)\\n        }\\n    }\\n\\n    function fullsubmask(uint8 bits, uint8 pos) internal pure returns (uint256 res) {\\n        res = ~(mask(bits) << pos);\\n    }\\n\\n    function set(\\n        uint256 cache,\\n        uint8 bits,\\n        uint8 pos,\\n        uint256 value\\n    ) internal pure returns (uint256 res) {\\n        res = cache & fullsubmask(bits, pos);\\n\\n        assembly {\\n            value := shl(pos, value)\\n        }\\n\\n        res |= value;\\n    }\\n\\n    function get(\\n        uint256 cache,\\n        uint8 bits,\\n        uint8 pos\\n    ) internal pure returns (uint256 res) {\\n        assembly {\\n            res := shr(pos, cache)\\n        }\\n        res &= mask(bits);\\n    }\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                ARRAYS\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function getArray8x8(uint256 store, uint8 pos) internal pure returns (uint8[] memory arr) {\\n        store = get(store, 64, pos);\\n\\n        arr = new uint8[](8);\\n        for (uint256 i = 0; i < 8; i++) {\\n            arr[i] = uint8(store & 0xff);\\n            store >>= 8;\\n        }\\n    }\\n\\n    function setArray8x8(\\n        uint256 store,\\n        uint8 pos,\\n        uint8[] memory arr\\n    ) internal pure returns (uint256 res) {\\n        for (uint256 i = 8; i > 0; i--) {\\n            res |= uint256(arr[i - 1]) << ((8 * (i - 1)));\\n        }\\n\\n        res = set(store, 64, pos, res);\\n    }\\n}\\n\",\"keccak256\":\"0x5ae0ed42cef7d742f8bb1ca830ff453a3324f081d8ea05dfbf3e5bdb51e3669f\",\"license\":\"MIT\"},\"src/libraries/StringCastLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/*\\n * @dev Uint operations.\\n */\\nlibrary StringCastLib {\\n    bytes16 private constant ALPHABET = '0123456789abcdef';\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toAsciiString(uint256 value) internal pure returns (string memory) {\\n        return string(toAsciiBytes(value));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toAsciiBytes(uint256 value) internal pure returns (bytes memory buffer) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return '0';\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n\\n        buffer = new bytes(digits);\\n\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return buffer;\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toHexString(address value) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(value)), 20);\\n    }\\n\\n    /// @notice Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n    /// @dev Credit to Open Zeppelin under MIT license https://github.com/OpenZeppelin/openzeppelin-contracts/blob/243adff49ce1700e0ecb99fe522fb16cff1d1ddc/contracts/utils/Strings.sol#L55\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = '0';\\n        buffer[1] = 'x';\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = ALPHABET[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, 'Strings: hex length insufficient');\\n        return string(buffer);\\n    }\\n\\n    function toHexStringNoPrefix(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length);\\n        for (uint256 i = buffer.length; i > 0; i--) {\\n            buffer[i - 1] = ALPHABET[value & 0xf];\\n            value >>= 4;\\n        }\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xa5332c65839a31f440bee88af098faf71314f6f124cb43435b5cbadc49163c6c\",\"license\":\"MIT\"},\"src/logic/Anchor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport '../types/Types.sol';\\nimport './Matrix.sol';\\n\\nlibrary Anchor {\\n    using Matrix for Types.Matrix;\\n    using Version for Version.Memory;\\n\\n    function convertReceiversToAnchors(Types.Mix memory mix) internal pure {\\n        Types.Coordinate[] memory anchors;\\n        uint8 stat = 0;\\n        uint8 cal = 0;\\n\\n        for (uint8 i = 0; i < mix.version.staticReceivers.length; i++) {\\n            Types.Coordinate memory coordinate;\\n            if (mix.version.staticReceivers[i].exists) {\\n                stat++;\\n                coordinate = mix.version.staticReceivers[i];\\n                mix.receivers[i].coordinate.a = coordinate.b;\\n                mix.receivers[i].coordinate.b = coordinate.a;\\n                mix.receivers[i].coordinate.exists = true;\\n            } else if (mix.version.calculatedReceivers[i].exists) {\\n                // if (mix.feature != 0) continue;\\n\\n                cal++;\\n                if (anchors.length == 0) anchors = getAnchors(mix.matrix);\\n                coordinate = calculateReceiverCoordinate(mix, mix.version.calculatedReceivers[i], anchors);\\n                fledgeOutTheRluds(mix, coordinate, i);\\n            }\\n        }\\n    }\\n\\n    function fledgeOutTheRluds(\\n        Types.Mix memory mix,\\n        Types.Coordinate memory coordinate,\\n        uint8 index\\n    ) internal pure {\\n        Types.Rlud memory radii;\\n\\n        while (coordinate.a < mix.matrix.width - 1 && mix.matrix.version.bigMatrixHasPixelAt(coordinate.a + (radii.r + 1), coordinate.b)) {\\n            radii.r++;\\n        }\\n        while (coordinate.a != 0 && coordinate.a >= (radii.l + 1) && mix.matrix.version.bigMatrixHasPixelAt(coordinate.a - (radii.l + 1), coordinate.b)) {\\n            radii.l++;\\n        }\\n        while (coordinate.b != 0 && coordinate.b >= (radii.u + 1) && mix.matrix.version.bigMatrixHasPixelAt(coordinate.a, coordinate.b - (radii.u + 1))) {\\n            radii.u++;\\n        }\\n        while (coordinate.b < mix.matrix.height - 1 && mix.matrix.version.bigMatrixHasPixelAt(coordinate.a, coordinate.b + (radii.d + 1))) {\\n            radii.d++;\\n        }\\n\\n        if (!mix.receivers[index].coordinate.exists) {\\n            mix.receivers[index] = Types.Anchor({radii: radii, coordinate: coordinate});\\n        }\\n    }\\n\\n    function calculateReceiverCoordinate(\\n        Types.Mix memory mix,\\n        Types.Coordinate memory calculatedReceiver,\\n        Types.Coordinate[] memory anchors\\n    ) internal pure returns (Types.Coordinate memory coordinate) {\\n        coordinate.a = anchors[calculatedReceiver.a].a;\\n        coordinate.b = anchors[calculatedReceiver.a].b;\\n        coordinate.exists = true;\\n\\n        if (calculatedReceiver.b < 32) {\\n            coordinate.b = coordinate.b - calculatedReceiver.b;\\n        } else {\\n            coordinate.b = coordinate.b + (calculatedReceiver.b - 32);\\n        }\\n\\n        while (!mix.matrix.version.bigMatrixHasPixelAt(coordinate.a, coordinate.b)) {\\n            if (anchors[0].b > coordinate.b) {\\n                coordinate.b++;\\n            } else {\\n                coordinate.b--;\\n            }\\n        }\\n        return coordinate;\\n    }\\n\\n    function getAnchors(Types.Matrix memory matrix) internal pure returns (Types.Coordinate[] memory anchors) {\\n        (uint8 topOffset, uint8 bottomOffset, Types.Coordinate memory center) = getBox(matrix);\\n\\n        anchors = new Types.Coordinate[](5);\\n\\n        anchors[0] = center; // center\\n\\n        anchors[1] = Types.Coordinate({a: center.a, b: center.b - topOffset, exists: true}); // top\\n\\n        uint8 upperOffset = topOffset;\\n        if (upperOffset % 2 != 0) {\\n            upperOffset++;\\n        }\\n        anchors[2] = Types.Coordinate({a: center.a, b: center.b - (upperOffset / 2), exists: true}); // inner top\\n\\n        uint8 lowerOffset = bottomOffset;\\n        if (lowerOffset % 2 != 0) {\\n            lowerOffset++;\\n        }\\n        anchors[3] = Types.Coordinate({a: center.a, b: center.b + (lowerOffset / 2), exists: true}); // inner bottom\\n\\n        anchors[4] = Types.Coordinate({a: center.a, b: center.b + bottomOffset, exists: true}); // bottom\\n    }\\n\\n    function getBox(Types.Matrix memory matrix)\\n        internal\\n        pure\\n        returns (\\n            uint8 topOffset,\\n            uint8 bottomOffset,\\n            Types.Coordinate memory center\\n        )\\n    {\\n        center.a = (matrix.width) / 2;\\n        center.b = (matrix.height) / 2;\\n        center.exists = true;\\n\\n        bool topFound = false;\\n        bool bottomFound = false;\\n        bool sideFound = false;\\n        bool shouldExpandSide = true;\\n\\n        topOffset = 1;\\n        bottomOffset = 1;\\n        uint8 sideOffset = 1;\\n\\n        bool allFound = false;\\n\\n        while (!allFound) {\\n            if (shouldExpandSide = !shouldExpandSide && !sideFound) {\\n                if (\\n                    matrix.version.bigMatrixHasPixelAt(center.a - (sideOffset + 1), center.b - topOffset) &&\\n                    // potential top left\\n                    matrix.version.bigMatrixHasPixelAt(center.a + (sideOffset + 1), center.b - topOffset) &&\\n                    // potential top right\\n                    matrix.version.bigMatrixHasPixelAt(center.a - (sideOffset + 1), center.b + bottomOffset) &&\\n                    // potential bot left\\n                    matrix.version.bigMatrixHasPixelAt(center.a + (sideOffset + 1), center.b + bottomOffset)\\n                    // potential bot right\\n                ) {\\n                    sideOffset++;\\n                } else {\\n                    sideFound = true;\\n                }\\n            }\\n            if (!topFound) {\\n                if (\\n                    center.b - topOffset > 0 &&\\n                    matrix.version.bigMatrixHasPixelAt(center.a - sideOffset, center.b - (topOffset + 1)) &&\\n                    // potential top left\\n                    matrix.version.bigMatrixHasPixelAt(center.a + sideOffset, center.b - (topOffset + 1))\\n                    // potential top right\\n                ) {\\n                    topOffset++;\\n                } else {\\n                    topFound = true;\\n                }\\n            }\\n            if (!bottomFound) {\\n                if (\\n                    center.b + bottomOffset < matrix.height - 1 &&\\n                    matrix.version.bigMatrixHasPixelAt(center.a - sideOffset, center.b + (bottomOffset + 1)) &&\\n                    // potential bot left\\n                    matrix.version.bigMatrixHasPixelAt(center.a + sideOffset, center.b + (bottomOffset + 1))\\n                    // potenetial bot right\\n                ) {\\n                    bottomOffset++;\\n                } else {\\n                    bottomFound = true;\\n                }\\n            }\\n            if (bottomFound && topFound && sideFound) allFound = true;\\n        }\\n\\n        if (topOffset != bottomOffset) {\\n            uint8 newHeight = topOffset + bottomOffset + 1;\\n            uint8 relativeCenter = (newHeight % 2 == 0 ? newHeight : newHeight + 1) / 2;\\n            uint8 newCenter = relativeCenter + center.b - 1 - topOffset;\\n            if (newCenter > center.b) {\\n                uint8 diff = newCenter - center.b;\\n                topOffset += diff;\\n                bottomOffset > diff ? bottomOffset = bottomOffset - diff : bottomOffset = diff - bottomOffset;\\n            } else {\\n                uint8 diff = center.b - newCenter;\\n                topOffset > diff ? topOffset = topOffset - diff : topOffset = diff - topOffset;\\n                bottomOffset += diff;\\n            }\\n            center.b = newCenter;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0c5e9cf79b7793bcce58b7ec7393121e0150e56a9603a8dfd7ffac9ce73552a7\",\"license\":\"MIT\"},\"src/logic/Calculator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport './Matrix.sol';\\nimport './Rgba.sol';\\nimport './Anchor.sol';\\n\\nimport '../types/Version.sol';\\nimport '../types/Pixel.sol';\\n\\nimport '../types/Types.sol';\\n\\nlibrary Calculator {\\n    using Rgba for Types.Rgba;\\n    using Matrix for Types.Matrix;\\n    using Pixel for uint256;\\n\\n    /**\\n     * @notice\\n     * @devg\\n     */\\n    function postionForCanvas(Types.Canvas memory canvas, Types.Mix memory mix) internal pure {\\n        Types.Anchor memory receiver = canvas.receivers[mix.feature];\\n        Types.Anchor memory anchor = mix.version.anchor;\\n\\n        mix.xoffset = receiver.coordinate.a > anchor.coordinate.a ? receiver.coordinate.a - anchor.coordinate.a : 0;\\n        mix.yoffset = receiver.coordinate.b > anchor.coordinate.b ? receiver.coordinate.b - anchor.coordinate.b : 0;\\n\\n        mix.xoffset++;\\n\\n        canvas.matrix.moveTo(mix.xoffset, mix.yoffset, mix.matrix.width, mix.matrix.height);\\n    }\\n\\n    /**\\n     * @notice\\n     * @dev\\n     */\\n    function formatForCanvas(Types.Canvas memory canvas, Types.Mix memory mix) internal pure {\\n        Types.Anchor memory receiver = canvas.receivers[mix.feature];\\n        Types.Anchor memory anchor = mix.version.anchor;\\n\\n        if (mix.version.expanders.l != 0 && anchor.radii.l != 0 && anchor.radii.l <= receiver.radii.l) {\\n            uint8 amount = receiver.radii.l - anchor.radii.l;\\n            mix.matrix.addColumnsAt(mix.version.expanders.l - 1, amount);\\n            anchor.coordinate.a += amount;\\n            if (mix.version.expanders.r > 0) mix.version.expanders.r += amount;\\n        }\\n        if (mix.version.expanders.r != 0 && anchor.radii.r != 0 && anchor.radii.r <= receiver.radii.r) {\\n            mix.matrix.addColumnsAt(mix.version.expanders.r - 1, receiver.radii.r - anchor.radii.r);\\n        }\\n        if (mix.version.expanders.d != 0 && anchor.radii.d != 0 && anchor.radii.d <= receiver.radii.d) {\\n            uint8 amount = receiver.radii.d - anchor.radii.d;\\n            mix.matrix.addRowsAt(mix.version.expanders.d, amount);\\n            anchor.coordinate.b += amount;\\n            if (mix.version.expanders.u > 0) mix.version.expanders.u += amount;\\n        }\\n        if (mix.version.expanders.u != 0 && anchor.radii.u != 0 && anchor.radii.u <= receiver.radii.u) {\\n            mix.matrix.addRowsAt(mix.version.expanders.u, receiver.radii.u - anchor.radii.u);\\n        }\\n    }\\n\\n    function pickVersionIndex(Types.Canvas memory canvas, Version.Memory[] memory versions) internal pure returns (uint8) {\\n        require(versions.length == 1, 'CALC:PVI:0');\\n        if (versions.length == 1) {\\n            return 0;\\n        }\\n        // uint8 index = uint8(versions.length) - 1;\\n        //\\n        // uint256 feature = (versions[0].data >> 75) & ShiftLib.mask(3);\\n\\n        // while (index > 0) {\\n        // uint256 bits = (versions[index].data >> 27) & ShiftLib.mask(24);\\n        // Types.Rlud memory anchorRadii = Types.Rlud({\\n        // r: uint8((bits >> 18) & ShiftLib.mask(6)),\\n        // l: uint8((bits >> 12) & ShiftLib.mask(6)),\\n        // u: uint8((bits >> 6) & ShiftLib.mask(6)),\\n        // d: uint8((bits) & ShiftLib.mask(6)),\\n        // exists: true\\n        // });\\n\\n        // if (checkRluds(anchorRadii, canvas.receivers[feature].radii)) {\\n        // return index;\\n        // }\\n        // index = index - 1;\\n        // }\\n\\n        return 0;\\n    }\\n\\n    function checkRluds(Types.Rlud memory r1, Types.Rlud memory r2) internal pure returns (bool) {\\n        return (r1.r <= r2.r && r1.l <= r2.l) || (r1.u <= r2.u && r1.d <= r2.d);\\n    }\\n\\n    function setMix(\\n        Types.Mix memory res,\\n        Version.Memory[] memory versions,\\n        uint8 versionIndex\\n    ) internal pure {\\n        uint256 radiiBits = (versions[versionIndex].data >> 27) & ShiftLib.mask(24);\\n        uint256 expanderBits = (versions[versionIndex].data >> 3) & ShiftLib.mask(24);\\n\\n        (uint256 x, uint256 y) = Version.getAnchor(versions[versionIndex]);\\n\\n        (uint256 width, uint256 height) = Version.getWidth(versions[versionIndex]);\\n\\n        res.version.width = uint8(width);\\n        res.version.height = uint8(height);\\n        res.version.anchor = Types.Anchor({\\n            radii: Types.Rlud({\\n                r: uint8((radiiBits >> 18) & ShiftLib.mask(6)),\\n                l: uint8((radiiBits >> 12) & ShiftLib.mask(6)),\\n                u: uint8((radiiBits >> 6) & ShiftLib.mask(6)),\\n                d: uint8((radiiBits >> 0) & ShiftLib.mask(6)),\\n                exists: true\\n            }),\\n            coordinate: Types.Coordinate({a: uint8(x), b: uint8(y), exists: true})\\n        });\\n        res.version.expanders = Types.Rlud({\\n            r: uint8((expanderBits >> 18) & ShiftLib.mask(6)),\\n            l: uint8((expanderBits >> 12) & ShiftLib.mask(6)),\\n            u: uint8((expanderBits >> 6) & ShiftLib.mask(6)),\\n            d: uint8((expanderBits >> 0) & ShiftLib.mask(6)),\\n            exists: true\\n        });\\n        res.version.calculatedReceivers = new Types.Coordinate[](8);\\n\\n        res.version.staticReceivers = new Types.Coordinate[](8);\\n\\n        for (uint256 i = 0; i < 8; i++) {\\n            (uint256 _x, uint256 _y, bool exists) = Version.getReceiverAt(versions[versionIndex], i, false);\\n            if (exists) {\\n                res.version.staticReceivers[i].a = uint8(_x);\\n                res.version.staticReceivers[i].b = uint8(_y);\\n                res.version.staticReceivers[i].exists = true;\\n            }\\n        }\\n\\n        for (uint256 i = 0; i < 8; i++) {\\n            (uint256 _x, uint256 _y, bool exists) = Version.getReceiverAt(versions[versionIndex], i, true);\\n            if (exists) {\\n                res.version.calculatedReceivers[i].a = uint8(_x);\\n                res.version.calculatedReceivers[i].b = uint8(_y);\\n                res.version.calculatedReceivers[i].exists = true;\\n            }\\n        }\\n\\n        // TODO - receivers?\\n        res.xoffset = 0;\\n        res.yoffset = 0;\\n        res.receivers = new Types.Anchor[](res.receivers.length);\\n        res.feature = uint8((versions[versionIndex].data >> 75) & ShiftLib.mask(3));\\n        res.matrix.set(versions[versionIndex], width, height);\\n    }\\n\\n    function updateReceivers(Types.Canvas memory canvas, Types.Mix memory mix) internal pure {\\n        for (uint8 i = 0; i < mix.receivers.length; i++) {\\n            Types.Anchor memory m = mix.receivers[i];\\n            if (m.coordinate.exists) {\\n                m.coordinate.a += mix.xoffset;\\n                m.coordinate.b += mix.yoffset;\\n                canvas.receivers[i] = m;\\n            }\\n        }\\n    }\\n\\n    function mergeToCanvas(Types.Canvas memory canvas, Types.Mix memory mix) internal pure {\\n        while (canvas.matrix.next() && mix.matrix.next()) {\\n            uint256 canvasPixel = canvas.matrix.current();\\n            uint256 mixPixel = mix.matrix.current();\\n\\n            if (mixPixel.e() && mixPixel.z() >= canvasPixel.z()) {\\n                canvas.matrix.setCurrent(Rgba.combine(canvasPixel, mixPixel));\\n            }\\n        }\\n        canvas.matrix.moveBack();\\n        canvas.matrix.resetIterator();\\n        mix.matrix.resetIterator();\\n    }\\n\\n    function calculateReceivers(Types.Mix memory mix) internal pure {\\n        Anchor.convertReceiversToAnchors(mix);\\n    }\\n}\\n\",\"keccak256\":\"0x6a61fbbfcfe981d18b70e6a6b294e5ad198f08c7e4b5ba0de4a4c41e6f67c0b0\",\"license\":\"MIT\"},\"src/logic/Matrix.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {Rgba} from '../logic/Rgba.sol';\\n\\nimport {Version} from '../types/Version.sol';\\nimport {Types} from '../types/Types.sol';\\n\\nlibrary Matrix {\\n    using Rgba for Types.Rgba;\\n    using Version for Version.Memory;\\n\\n    function create(uint8 width, uint8 height) internal pure returns (Types.Matrix memory res) {\\n        require(width % 2 == 1 && height % 2 == 1, 'ML:C:0');\\n\\n        Version.initBigMatrix(res.version, width);\\n        res.version.setWidth(width, height);\\n    }\\n\\n    function moveTo(\\n        Types.Matrix memory matrix,\\n        uint8 xoffset,\\n        uint8 yoffset,\\n        uint8 width,\\n        uint8 height\\n    ) internal pure {\\n        matrix.currentUnsetX = xoffset;\\n        matrix.currentUnsetY = yoffset;\\n        matrix.startX = xoffset;\\n        matrix.width = width + xoffset;\\n        matrix.height = height + yoffset;\\n    }\\n\\n    function next(Types.Matrix memory matrix) internal pure returns (bool res) {\\n        res = next(matrix, matrix.width);\\n    }\\n\\n    function next(Types.Matrix memory matrix, uint8 width) internal pure returns (bool res) {\\n        if (matrix.init) {\\n            if (width <= matrix.currentUnsetX + 1) {\\n                if (matrix.height == matrix.currentUnsetY + 1) {\\n                    return false;\\n                }\\n                matrix.currentUnsetX = matrix.startX; // 0 by default\\n                matrix.currentUnsetY++;\\n            } else {\\n                matrix.currentUnsetX++;\\n            }\\n        } else {\\n            matrix.init = true;\\n        }\\n        res = true;\\n    }\\n\\n    function current(Types.Matrix memory matrix) internal pure returns (uint256 res) {\\n        res = matrix.version.getBigMatrixPixelAt(matrix.currentUnsetX, matrix.currentUnsetY);\\n    }\\n\\n    function setCurrent(Types.Matrix memory matrix, uint256 pixel) internal pure {\\n        matrix.version.setBigMatrixPixelAt(matrix.currentUnsetX, matrix.currentUnsetY, pixel);\\n    }\\n\\n    function resetIterator(Types.Matrix memory matrix) internal pure {\\n        matrix.currentUnsetX = 0;\\n        matrix.currentUnsetY = 0;\\n        matrix.startX = 0;\\n        matrix.init = false;\\n    }\\n\\n    function moveBack(Types.Matrix memory matrix) internal pure {\\n        (uint256 width, uint256 height) = matrix.version.getWidth();\\n        matrix.width = uint8(width);\\n        matrix.height = uint8(height);\\n    }\\n\\n    function set(\\n        Types.Matrix memory matrix,\\n        Version.Memory memory data,\\n        uint256 groupWidth,\\n        uint256 groupHeight\\n    ) internal pure {\\n        matrix.height = uint8(groupHeight);\\n\\n        for (uint256 y = 0; y < groupHeight; y++) {\\n            for (uint256 x = 0; x < groupWidth; x++) {\\n                next(matrix, uint8(groupWidth));\\n                uint256 col = Version.getPixelAt(data, x, y);\\n                if (col != 0) {\\n                    (uint256 yo, , ) = Version.getPalletColorAt(data, col);\\n\\n                    setCurrent(matrix, yo);\\n                } else {\\n                    setCurrent(matrix, 0x0000000000);\\n                }\\n            }\\n        }\\n\\n        matrix.width = uint8(groupWidth);\\n\\n        resetIterator(matrix);\\n    }\\n\\n    function addRowsAt(\\n        Types.Matrix memory matrix,\\n        uint8 index,\\n        uint8 amount\\n    ) internal pure {\\n        for (uint256 i = 0; i < matrix.height; i++) {\\n            for (uint256 j = matrix.height; j > index; j--) {\\n                if (j < index) break;\\n                matrix.version.setBigMatrixPixelAt(i, j + amount, matrix.version.getBigMatrixPixelAt(i, j));\\n            }\\n            // \\\"<=\\\" is because this loop needs to run [amount] times\\n            for (uint256 j = index + 1; j <= index + amount; j++) {\\n                matrix.version.setBigMatrixPixelAt(i, j, matrix.version.getBigMatrixPixelAt(i, index));\\n            }\\n        }\\n        matrix.height += amount;\\n    }\\n\\n    function addColumnsAt(\\n        Types.Matrix memory matrix,\\n        uint8 index,\\n        uint8 amount\\n    ) internal pure {\\n        // require(index < matrix.data[0].length, 'MAT:ACA:0');\\n        for (uint256 i = 0; i < matrix.width; i++) {\\n            for (uint256 j = matrix.width; j > index; j--) {\\n                if (j < index) break;\\n                matrix.version.setBigMatrixPixelAt(j + amount, i, matrix.version.getBigMatrixPixelAt(j, i));\\n            }\\n            // \\\"<=\\\" is because this loop needs to run [amount] times\\n            for (uint256 j = index + 1; j <= index + amount; j++) {\\n                matrix.version.setBigMatrixPixelAt(j, i, matrix.version.getBigMatrixPixelAt(index, i));\\n            }\\n        }\\n        matrix.width += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x54c2c1c17ce6eb6e3f956f0bc16f1e9a66816457e9684dad23e4aaf70ff7d70f\",\"license\":\"MIT\"},\"src/logic/Rgba.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {Pixel} from '../types/Pixel.sol';\\n\\nlibrary Rgba {\\n    using Pixel for uint256;\\n\\n    function combine(uint256 base, uint256 mix) internal pure returns (uint256 res) {\\n        return mix;\\n        // if (mix.a() == 255 || base.a() == 0) {\\n        //     res = mix;\\n        //     return res;\\n        // }\\n        // // FIXME - i am pretty sure there is a bug here that causes the non-color pixel data to be deleted\\n        // res |= uint256((base.r() * (255 - mix.a()) + mix.r() * mix.a()) / 255) << 19;\\n        // res |= uint256((base.g() * (255 - mix.a()) + mix.g() * mix.a()) / 255) << 11;\\n        // res |= uint256((base.b() * (255 - mix.a()) + mix.b() * mix.a()) / 255) << 3;\\n        // res |= 0x7;\\n    }\\n}\\n\",\"keccak256\":\"0xc562948f12328168d8e7dda4b3e34a37b3da726e560c3a4dc33abacabd687dab\",\"license\":\"MIT\"},\"src/types/Pixel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {SafeCastLib} from '../libraries/SafeCastLib.sol';\\nimport {ShiftLib} from '../libraries/ShiftLib.sol';\\n\\nlibrary Pixel {\\n    using SafeCastLib for uint256;\\n\\n    function safePack(\\n        uint256 _rgb,\\n        uint256 _a,\\n        uint256 _id,\\n        uint256 _zindex,\\n        uint256 _feature\\n    ) internal pure returns (uint256 res) {\\n        unchecked {\\n            res |= uint256(_feature.safe3()) << 39;\\n            res |= uint256(_zindex.safe4()) << 35;\\n            res |= uint256(_id.safe8()) << 27;\\n            res |= uint256(_rgb) << 3;\\n            res |= uint256(compressA(_a.safe8()));\\n        }\\n    }\\n\\n    function unsafePack(\\n        uint256 _rgb,\\n        uint256 _a,\\n        uint256 _id,\\n        uint256 _zindex,\\n        uint256 _feature\\n    ) internal pure returns (uint256 res) {\\n        unchecked {\\n            res |= _feature << 39;\\n            res |= _zindex << 35;\\n            res |= _id << 27;\\n            res |= _rgb << 3;\\n            res |= compressA(uint8(_a));\\n        }\\n    }\\n\\n    function rgba(uint256 input) internal pure returns (uint256 res) {\\n        return ((input << 5) & 0xffffff_00) | a(input);\\n    }\\n\\n    function r(uint256 input) internal pure returns (uint256 res) {\\n        res = (input >> 19) & 0xff;\\n    }\\n\\n    function g(uint256 input) internal pure returns (uint256 res) {\\n        res = (input >> 11) & 0xff;\\n    }\\n\\n    function b(uint256 input) internal pure returns (uint256 res) {\\n        res = (input >> 3) & 0xff;\\n    }\\n\\n    // 3 bits\\n    function a(uint256 input) internal pure returns (uint256 res) {\\n        res = decompressA(uint8(input & 0x7));\\n    }\\n\\n    // this is 1-8 so 3 bits\\n    function id(uint256 input) internal pure returns (uint256 res) {\\n        res = (input >> 27) & 0xff;\\n    }\\n\\n    // 18 3,3,4 && 8\\n    // this is 1-16 so 4 bits\\n    function z(uint256 input) internal pure returns (uint256 res) {\\n        res = (input >> 35) & 0xf;\\n    }\\n\\n    // this is 1-8 so 3 bits\\n    function f(uint256 input) internal pure returns (uint256 res) {\\n        res = (input >> 39) & 0x7;\\n    }\\n\\n    /// @notice check for if a pixel exists\\n    /// @dev for a pixel to exist a must be > 0, so we can safely assume that if we see\\n    /// no data it is empty or a transparent pixel we do not need to process\\n    function e(uint256 input) internal pure returns (bool res) {\\n        res = input != 0x00;\\n    }\\n\\n    /// @notice converts an 8 bit (0-255) value into a 3 bit value (0-7)\\n    /// @dev a compressed value of 7 is equivilent to 255, and a compressed 0 is 0\\n    function compressA(uint256 input) internal pure returns (uint256 res) {\\n        return input.safe8() / 36;\\n    }\\n\\n    /// @notice converts an 8 bit value into a 3 bit value\\n    function decompressA(uint256 input) internal pure returns (uint256 res) {\\n        if (input == 7) return 255;\\n        else return input.safe3() * 36;\\n    }\\n}\\n\",\"keccak256\":\"0x86abc94661574fe3b206a469c0f05e113c3f434ffe5b6bc169ce88b636e98d8f\",\"license\":\"MIT\"},\"src/types/Types.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {Version as NewVersion} from '../types/Version.sol';\\n\\nlibrary Types {\\n    struct Rlud {\\n        bool exists;\\n        uint8 r;\\n        uint8 l;\\n        uint8 u;\\n        uint8 d;\\n    }\\n\\n    struct Rgba {\\n        uint8 r;\\n        uint8 g;\\n        uint8 b;\\n        uint8 a;\\n    }\\n\\n    struct Anchor {\\n        Rlud radii;\\n        Coordinate coordinate;\\n    }\\n\\n    struct Coordinate {\\n        uint8 a; // anchorId\\n        uint8 b; // yoffset\\n        bool exists;\\n    }\\n\\n    struct Version {\\n        uint8 width;\\n        uint8 height;\\n        Anchor anchor;\\n        // these must be in same order as canvas receivers, respectively\\n        Coordinate[] calculatedReceivers; // can be empty\\n        Coordinate[] staticReceivers; // can be empty\\n        Rlud expanders;\\n        bytes data;\\n    }\\n\\n    struct Canvas {\\n        Matrix matrix;\\n        Anchor[] receivers;\\n    }\\n\\n    struct Mix {\\n        uint8 feature;\\n        Version version;\\n        Matrix matrix;\\n        Anchor[] receivers;\\n        uint8 yoffset;\\n        uint8 xoffset;\\n    }\\n\\n    struct Matrix {\\n        uint8 width;\\n        uint8 height;\\n        NewVersion.Memory version;\\n        uint8 currentUnsetX;\\n        uint8 currentUnsetY;\\n        bool init;\\n        uint8 startX;\\n    }\\n}\\n\",\"keccak256\":\"0x47e33f18fa60b26856ec9185781093c18b2f958f3cfaa86dcdbd5e7c5a8f45e2\",\"license\":\"MIT\"},\"src/types/Version.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {ShiftLib} from '../libraries/ShiftLib.sol';\\nimport {BitReader} from '../libraries/BitReader.sol';\\nimport {SafeCastLib} from '../libraries/SafeCastLib.sol';\\n\\nimport {Pixel} from '../types/Pixel.sol';\\n\\nimport '../_test/utils/console.sol';\\n\\nlibrary Version {\\n    using BitReader for BitReader.Memory;\\n    using SafeCastLib for uint256;\\n\\n    struct Memory {\\n        uint256[] pallet;\\n        uint256[] minimatrix;\\n        uint256[] bigmatrix;\\n        uint256 receivers;\\n        uint256 data;\\n    }\\n    event log_named_bytes32(string key, bytes32 val);\\n\\n    function parsePallet(\\n        BitReader.Memory memory reader,\\n        uint256 id,\\n        uint256 feature\\n    ) internal view returns (uint256[] memory res) {\\n        uint256 palletLength = reader.select(4) + 1;\\n\\n        res = new uint256[](palletLength + 1);\\n\\n        for (uint256 i = 0; i < palletLength; i++) {\\n            // uint256 working = 0;\\n\\n            // 4 bits: zindex\\n            // working |= (reader.select(4) << 32);\\n            uint256 z = reader.select(4);\\n\\n            uint256 color;\\n\\n            uint256 selecta = reader.select(1);\\n            if (selecta == 1) {\\n                color = 0x000000;\\n            } else {\\n                uint256 r = reader.select(8);\\n                uint256 g = reader.select(8);\\n                uint256 b = reader.select(8);\\n\\n                color = (r << 16) | (g << 8) | b;\\n            }\\n\\n            // // 1 or 8 bits: a\\n            uint256 a = (reader.select(1) == 0x1 ? 0xff : reader.select(8));\\n\\n            res[i + 1] = Pixel.safePack(color, a, id, z, feature);\\n        }\\n    }\\n\\n    function parseData(\\n        BitReader.Memory memory reader,\\n        uint256 feature,\\n        uint8[] memory xovers,\\n        uint8[] memory yovers\\n    ) internal pure returns (uint256 res) {\\n        // 12 bits: coordinate - anchor x and y\\n\\n        res |= feature << 75;\\n\\n        uint256 width = reader.select(6);\\n        uint256 height = reader.select(6);\\n\\n        res |= height << 69; // heighth and width\\n        res |= width << 63;\\n\\n        uint256 anchorX = reader.select(6);\\n        uint256 anchorY = reader.select(6);\\n\\n        if (xovers.length == 8 && yovers.length == 8 && (xovers[feature] != 0 || yovers[feature] != 0)) {\\n            res |= uint256(yovers[feature]) << 57;\\n            res |= uint256(xovers[feature]) << 51;\\n        } else {\\n            // 12 bits: coordinate - anchor x and y\\n            res |= anchorX << 51;\\n            res |= anchorY << 57;\\n        }\\n\\n        // 1 or 25 bits: rlud - radii\\n        res |= (reader.select(1) == 0x1 ? 0x000000 : reader.select(24)) << 27;\\n\\n        // 1 or 25 bits: rlud - expanders\\n        res |= (reader.select(1) == 0x1 ? 0x000000 : reader.select(24)) << 3;\\n    }\\n\\n    function parseReceivers(BitReader.Memory memory reader) internal pure returns (uint256 res) {\\n        uint256 receiversLength = reader.select(1) == 0x1 ? 0x1 : reader.select(4);\\n\\n        for (uint256 j = 0; j < receiversLength; j++) {\\n            uint256 receiver = 0;\\n\\n            uint256 yOrYOffset = reader.select(6);\\n\\n            uint256 xOrPreset = reader.select(6);\\n\\n            // rFeature\\n            uint256 rFeature = reader.select(3);\\n\\n            uint256 calculated = reader.select(1);\\n\\n            if (calculated == 0x1) {\\n                receiver |= yOrYOffset << 6;\\n                receiver |= xOrPreset;\\n            } else {\\n                receiver |= xOrPreset << 6;\\n                receiver |= yOrYOffset;\\n            }\\n\\n            receiver <<= ((rFeature * 12) + (calculated == 0x1 ? 128 : 0));\\n\\n            res |= receiver;\\n        }\\n    }\\n\\n    function parseMiniMatrix(\\n        BitReader.Memory memory reader,\\n        uint256 height,\\n        uint256 width\\n    ) internal pure returns (uint256[] memory res) {\\n        uint256 groupsLength = reader.select(1) == 0x1 ? reader.select(8) + 1 : reader.select(16) + 1;\\n\\n        res = new uint256[]((height * width) / 64 + 1);\\n\\n        uint256 index = 0;\\n\\n        for (uint256 a = 0; a < groupsLength; a++) {\\n            uint256 len = reader.select(2) + 1;\\n\\n            if (len == 4) len = reader.select(4) + 4;\\n\\n            uint256 key = reader.select(4);\\n\\n            for (uint256 i = 0; i < len; i++) {\\n                res[index / 64] |= (key << (4 * (index % 64)));\\n                index++;\\n            }\\n        }\\n    }\\n\\n    function getReceiverAt(\\n        Memory memory m,\\n        uint256 index,\\n        bool calculated\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint256 x,\\n            uint256 y,\\n            bool exists\\n        )\\n    {\\n        uint256 data = m.receivers >> (index * 12 + (calculated ? 128 : 0));\\n\\n        data &= ShiftLib.mask(12);\\n\\n        x = data & ShiftLib.mask(6);\\n        y = data >> 6;\\n\\n        exists = x != 0 || y != 0;\\n    }\\n\\n    function setReceiverAt(\\n        Memory memory m,\\n        uint256 index,\\n        bool calculated,\\n        uint256 x,\\n        uint256 y\\n    ) internal pure returns (uint256 res) {\\n        // yOrYOffset\\n        res |= y << 6;\\n\\n        //xOrPreset\\n        res |= x;\\n\\n        m.receivers |= res << ((index * 12) + (calculated ? 128 : 0));\\n    }\\n\\n    function setOffset(\\n        Memory memory m,\\n        bool negX,\\n        uint256 diffX,\\n        bool negY,\\n        uint256 diffY\\n    ) internal pure {\\n        m.data |= ((((diffX & 0xff) << 1) | (((negX ? 0x1 : 0x0)))) << 85);\\n        m.data |= ((((diffY & 0xff) << 1) | ((((negY ? 0x1 : 0x0))))) << 94);\\n    }\\n\\n    function getOffset(Memory memory m)\\n        internal\\n        pure\\n        returns (\\n            bool negX,\\n            uint256 diffX,\\n            bool negY,\\n            uint256 diffY\\n        )\\n    {\\n        uint256 data = m.data;\\n        negX = (data >> 85) & 0x1 == 1;\\n        diffX = (data >> 86) & 0xff;\\n        negY = (data >> 94) & 0x1 == 1;\\n        diffY = (data >> 95) & 0xff;\\n    }\\n\\n    function setZ(Memory memory m, uint256 z) internal pure {\\n        require(z <= 0xf, 'VERS:SETZ:0');\\n        m.data |= z << 78;\\n    }\\n\\n    function getZ(Memory memory m) internal pure returns (uint256 res) {\\n        res = (m.data >> 78) & 0xf;\\n    }\\n\\n    function setFeature(Memory memory m, uint256 z) internal pure {\\n        require(z <= ShiftLib.mask(3), 'VERS:SETF:0');\\n        m.data &= ShiftLib.fullsubmask(3, 75);\\n        m.data |= (z << 75);\\n    }\\n\\n    function getFeature(Memory memory m) internal pure returns (uint256 res) {\\n        res = (m.data >> 75) & ShiftLib.mask(3);\\n    }\\n\\n    function getWidth(Memory memory m) internal pure returns (uint256 width, uint256 height) {\\n        // yOrYOffset\\n        width = (m.data >> 63) & ShiftLib.mask(6);\\n        height = (m.data >> 69) & ShiftLib.mask(6);\\n    }\\n\\n    function setWidth(\\n        Memory memory m,\\n        uint256 w,\\n        uint256 h\\n    ) internal pure {\\n        require(w <= ShiftLib.mask(6), 'VERS:SETW:0');\\n        require(h <= ShiftLib.mask(6), 'VERS:SETW:1');\\n\\n        m.data &= ShiftLib.fullsubmask(12, 63);\\n\\n        m.data |= (w << 63);\\n        m.data |= (h << 69);\\n    }\\n\\n    function getAnchor(Memory memory m) internal pure returns (uint256 x, uint256 y) {\\n        // yOrYOffset\\n        x = (m.data >> 51) & ShiftLib.mask(6);\\n        y = (m.data >> 57) & ShiftLib.mask(6);\\n    }\\n\\n    function getOverrides(Memory memory m)\\n        internal\\n        pure\\n        returns (\\n            bool shouldOverride,\\n            uint8 x,\\n            uint8 y\\n        )\\n    {\\n        // yOrYOffset\\n        x = uint8((m.data >> 78) & ShiftLib.mask(6));\\n        y = uint8((m.data >> 84) & ShiftLib.mask(6));\\n\\n        shouldOverride = x != 0 && y != 0;\\n    }\\n\\n    function getPixelAt(\\n        Memory memory m,\\n        uint256 x,\\n        uint256 y\\n    ) internal pure returns (uint256 palletKey) {\\n        (uint256 width, ) = getWidth(m);\\n        uint256 index = x + (y * width);\\n\\n        if (index / 64 >= m.minimatrix.length) return 0x0;\\n\\n        palletKey = (m.minimatrix[index / 64] >> (4 * (index % 64))) & 0xf;\\n    }\\n\\n    function getPalletColorAt(Memory memory m, uint256 index)\\n        internal\\n        pure\\n        returns (\\n            uint256 res,\\n            uint256 color,\\n            uint256 zindex\\n        )\\n    {\\n        // res = (m.pallet[index / 7] >> (36 * (index % 7))) & ShiftLib.mask(36);\\n        res = m.pallet[index];\\n\\n        color = Pixel.rgba(res);\\n\\n        zindex = Pixel.z(res);\\n    }\\n\\n    function initBigMatrix(Memory memory m, uint256 width) internal pure {\\n        m.bigmatrix = new uint256[](((width * width) / 6) + 2);\\n    }\\n\\n    function setBigMatrixPixelAt(\\n        Memory memory m,\\n        uint256 x,\\n        uint256 y,\\n        uint256 color\\n    ) internal pure {\\n        (uint256 width, ) = getWidth(m);\\n\\n        uint256 index = x + (y * width);\\n\\n        setBigMatrixPixelAt(m, index, color);\\n    }\\n\\n    function setBigMatrixPixelAt(\\n        Memory memory m,\\n        uint256 index,\\n        uint256 color\\n    ) internal pure {\\n        if (m.bigmatrix.length > index / 6) {\\n            uint8 offset = (42 * (index % 6)).safe8();\\n            m.bigmatrix[index / 6] &= ShiftLib.fullsubmask(42, offset);\\n            m.bigmatrix[index / 6] |= (color << offset);\\n        }\\n    }\\n\\n    function getBigMatrixPixelAt(\\n        Memory memory m,\\n        uint256 x,\\n        uint256 y\\n    ) internal pure returns (uint256 res) {\\n        (uint256 width, ) = getWidth(m);\\n\\n        (res, ) = getPixelAt(m.bigmatrix, x, y, width);\\n    }\\n\\n    function getPixelAt(\\n        uint256[] memory arr,\\n        uint256 x,\\n        uint256 y,\\n        uint256 width\\n    ) internal pure returns (uint256 res, uint256 row) {\\n        uint256 index = x + (y * width);\\n\\n        if (index / 6 >= arr.length) return (0, 0);\\n\\n        row = (arr[index / 6] >> (42 * (index % 6)));\\n\\n        res = row & ShiftLib.mask(42);\\n    }\\n\\n    function bigMatrixHasPixelAt(\\n        Memory memory m,\\n        uint256 x,\\n        uint256 y\\n    ) internal pure returns (bool res) {\\n        uint256 pix = getBigMatrixPixelAt(m, x, y);\\n\\n        res = pix & 0x7 != 0x00;\\n    }\\n\\n    function setArrayLength(uint256[] memory input, uint256 size) internal pure {\\n        assembly {\\n            let ptr := mload(input)\\n            ptr := size\\n            mstore(input, ptr)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x78bfa87e8ebc2a8194bc3b9149ac791d8d14c0ba3b52b9ddeb25d799ed6e52c9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c80639280123011610097578063b17995c711610066578063b17995c714610260578063d17c777f14610281578063db41f7cf146102a1578063e8fb95df146102ea57600080fd5b806392801230146101c55780639cd7d0071461020a5780639dc42d591461022b578063acb4e9a41461023e57600080fd5b80634796cd78116100d35780634796cd781461015c578063597bf3dd1461017d5780635edd57e31461019d57806387ae7031146101b057600080fd5b8063084050f5146100fa57806311c16aa314610124578063191adaf814610149575b600080fd5b61010d61010836600461181b565b6102fd565b60405161011b9291906118fd565b60405180910390f35b610137610132366004611978565b610455565b60405160ff909116815260200161011b565b61010d61015736600461181b565b6105d4565b61016f61016a3660046119cd565b61070a565b60405161011b929190611bd9565b61019061018b366004611fbc565b610929565b60405161011b9190612085565b61010d6101ab36600461181b565b610c26565b6101c36101be36600461209f565b610d5c565b005b6002546101e59073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161011b565b61021d61021836600461181b565b610dae565b60405161011b9291906120e1565b610190610239366004611fbc565b610edf565b61025361024c366004611fbc565b5090919050565b60405161011b9190612110565b61027361026e36600461181b565b610fd0565b60405161011b929190612123565b61029461028f366004611fbc565b611173565b60405161011b9190612152565b6101376102af366004612165565b73ffffffffffffffffffffffffffffffffffffffff91909116600090815260016020908152604080832060ff94851684529091529020541690565b6101906102f8366004611fbc565b6111ee565b6000606060008061030f89898861070a565b909250905073ffffffffffffffffffffffffffffffffffffffff871615610438576040517f597bf3dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff88169063597bf3dd9061038690859085908a9060040161219e565b60006040518083038186803b15801561039e57600080fd5b505afa9250505080156103f157506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526103ee919081019061221c565b60015b61042b573d80801561041f576040519150601f19603f3d011682016040523d82523d6000602084013e610424565b606091505b5050610438565b879450925061044b915050565b30610444838388610929565b9350935050505b9550959350505050565b6000806104618361121b565b905060008160ff16116104d5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600360248201527f463a30000000000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b600061050185856040516020016104ed9291906122a0565b60405160208183030381529060405261122f565b3360008181526020818152604080832060ff808d168086529184528285208054600181810183559187528587200180547fffffffffffffffffffffff0000000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8a1674ff000000000000000000000000000000000000000060a08e901b161717905595855294835281842090845290915281208054939450859390926105b0918591166123a8565b92506101000a81548160ff021916908360ff16021790555081925050509392505050565b600060606000806105e689898861070a565b909250905073ffffffffffffffffffffffffffffffffffffffff8716156106fe576040517f9dc42d5900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff881690639dc42d599061065d90859085908a9060040161219e565b60006040518083038186803b15801561067557600080fd5b505afa9250505080156106c857506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526106c5919081019061221c565b60015b61042b573d8080156106f6576040519150601f19603f3d011682016040523d82523d6000602084013e6106fb565b606091505b50505b30610444838388610edf565b606061077f60405180610160016040528060008152602001600081526020016060815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160608152602001606081526020016060815260200160608152602001606081525090565b6040517f5e983d4f0000000000000000000000000000000000000000000000000000000081526004810185905273ffffffffffffffffffffffffffffffffffffffff861690635e983d4f9060240160006040518083038186803b1580156107e557600080fd5b505afa1580156107f9573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261083f91908101906124bc565b90506000610851868360c0015161130a565b6002546040517fda7233db00000000000000000000000000000000000000000000000000000000815291925073ffffffffffffffffffffffffffffffffffffffff169063da7233db906108ac90849086908990600401612639565b60006040518083038186803b1580156108c457600080fd5b505afa1580156108d8573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261091e9190810190612759565b925050935093915050565b60025460408084015160608581015192517fa2b493be000000000000000000000000000000000000000000000000000000008152909373ffffffffffffffffffffffffffffffffffffffff16926330375a35929184906346eceb3a90829063a2b493be9061099f908c908e908d9060040161278e565b60006040518083038186803b1580156109b757600080fd5b505afa1580156109cb573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610a11919081019061221c565b6040518263ffffffff1660e01b8152600401610a2d9190612085565b60006040518083038186803b158015610a4557600080fd5b505afa158015610a59573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610a9f919081019061221c565b60025460a08901516040517f4a7c7e4600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90921691634a7c7e4691610afc9160040190815260200190565b60006040518083038186803b158015610b1457600080fd5b505afa158015610b28573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610b6e919081019061221c565b604051602001610b8194939291906127b3565b6040516020818303038152906040526040518263ffffffff1660e01b8152600401610bac9190612085565b60006040518083038186803b158015610bc457600080fd5b505afa158015610bd8573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610c1e919081019061221c565b949350505050565b60006060600080610c3889898861070a565b909250905073ffffffffffffffffffffffffffffffffffffffff871615610d50576040517fe8fb95df00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff88169063e8fb95df90610caf90859085908a9060040161219e565b60006040518083038186803b158015610cc757600080fd5b505afa925050508015610d1a57506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610d17919081019061221c565b60015b61042b573d808015610d48576040519150601f19603f3d011682016040523d82523d6000602084013e610d4d565b606091505b50505b306104448383886111ee565b60005b60088160ff161015610da957610d968184848460ff16818110610d8457610d846128dc565b9050602002810190610132919061290b565b5080610da181612973565b915050610d5f565b505050565b60006060600080610dc089898861070a565b909250905073ffffffffffffffffffffffffffffffffffffffff871615610ed8576040517facb4e9a400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff88169063acb4e9a490610e3790859085908a9060040161219e565b60006040518083038186803b158015610e4f57600080fd5b505afa925050508015610ea257506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610e9f9190810190612759565b60015b61042b573d808015610ed0576040519150601f19603f3d011682016040523d82523d6000602084013e610ed5565b606091505b50505b3082610444565b6002546040517fa2b493be00000000000000000000000000000000000000000000000000000000815260609173ffffffffffffffffffffffffffffffffffffffff16906346eceb3a90829063a2b493be90610f429088908a90899060040161278e565b60006040518083038186803b158015610f5a57600080fd5b505afa158015610f6e573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610fb4919081019061221c565b6040518263ffffffff1660e01b8152600401610bac9190612085565b600061104560405180610160016040528060008152602001600081526020016060815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160608152602001606081526020016060815260200160608152602001606081525090565b60008061105389898861070a565b909250905073ffffffffffffffffffffffffffffffffffffffff87161561116b576040517fd17c777f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff88169063d17c777f906110ca90859085908a9060040161219e565b60006040518083038186803b1580156110e257600080fd5b505afa92505050801561113557506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261113291908101906124bc565b60015b61042b573d808015611163576040519150601f19603f3d011682016040523d82523d6000602084013e611168565b606091505b50505b306104448383885b6111e660405180610160016040528060008152602001600081526020016060815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160608152602001606081526020016060815260200160608152602001606081525090565b509092915050565b60608383604051602001611203929190611bd9565b60405160208183030381529060405290509392505050565b600060ff82111561122b57600080fd5b5090565b600080826040516020016112439190612993565b6040516020818303038152906040529050600081518260405160200161126a9291906129b9565b60405160208183030381529060405290508051602082016000f0925073ffffffffffffffffffffffffffffffffffffffff8316611303576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4445504c4f594d454e545f4641494c454400000000000000000000000000000060448201526064016104cc565b5050919050565b6060815167ffffffffffffffff81111561132657611326611c07565b60405190808252806020026020018201604052801561135957816020015b60608152602001906001900390816113445790505b50905060005b82518160ff16101561142357828160ff1681518110611380576113806128dc565b602002602001015160ff16600014156113c9576040805160008152602081019091528251839060ff84169081106113b9576113b96128dc565b6020026020010181905250611411565b6113f08482858460ff16815181106113e3576113e36128dc565b602002602001015161142a565b828260ff1681518110611405576114056128dc565b60200260200101819052505b8061141b81612973565b91505061135f565b5092915050565b606060ff8216611496576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600360248201527f463a31000000000000000000000000000000000000000000000000000000000060448201526064016104cc565b816114a081612a50565b73ffffffffffffffffffffffffffffffffffffffff8616600090815260016020908152604080832060ff808a168552925290912054919450908116915083168111611547576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600360248201527f463a32000000000000000000000000000000000000000000000000000000000060448201526064016104cc565b73ffffffffffffffffffffffffffffffffffffffff851660009081526020818152604080832060ff881684528252808320805482518185028101850190935280835291929091908301828280156115d557602002820191906000526020600020905b815474ffffffffffffffffffffffffffffffffffffffffff1681526001909101906020018083116115a9575b50505050509050600080600080600090505b845181101561169157600060a0868381518110611606576116066128dc565b602002602001015174ffffffffffffffffffffffffffffffffffffffffff16901c90508860ff16818461163991906123a8565b60ff16111561167257858281518110611654576116546128dc565b60200260200101519450828961166a9190612a8b565b935050611691565b61167c81846123a8565b9250508061168981612aae565b9150506115e7565b5073ffffffffffffffffffffffffffffffffffffffff831661170f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600360248201527f463a33000000000000000000000000000000000000000000000000000000000060448201526064016104cc565b61171883611755565b80602001905181019061172b9190612ae7565b8260ff168151811061173f5761173f6128dc565b6020026020010151955050505050509392505050565b606061178382600161177e8173ffffffffffffffffffffffffffffffffffffffff84163b612b98565b611789565b92915050565b60408051603f838501017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168101909152818152818360208301863c9392505050565b73ffffffffffffffffffffffffffffffffffffffff811681146117ee57600080fd5b50565b80356117fc816117cc565b919050565b60ff811681146117ee57600080fd5b80356117fc81611801565b600080600080600060a0868803121561183357600080fd5b853561183e816117cc565b9450602086013593506040860135611855816117cc565b9250606086013561186581611801565b9150608086013561187581611801565b809150509295509295909350565b60005b8381101561189e578181015183820152602001611886565b838111156118ad576000848401525b50505050565b600081518084526118cb816020860160208601611883565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b73ffffffffffffffffffffffffffffffffffffffff83168152604060208201526000610c1e60408301846118b3565b60008083601f84011261193e57600080fd5b50813567ffffffffffffffff81111561195657600080fd5b6020830191508360208260051b850101111561197157600080fd5b9250929050565b60008060006040848603121561198d57600080fd5b833561199881611801565b9250602084013567ffffffffffffffff8111156119b457600080fd5b6119c08682870161192c565b9497909650939450505050565b6000806000606084860312156119e257600080fd5b83356119ed816117cc565b9250602084013591506040840135611a0481611801565b809150509250925092565b600081518084526020808501945080840160005b83811015611a3f57815187529582019590820190600101611a23565b509495945050505050565b600081518084526020808501945080840160005b83811015611a3f57815160ff1687529582019590820190600101611a5e565b600081518084526020808501808196508360051b8101915082860160005b85811015611ac5578284038952611ab38483516118b3565b98850198935090840190600101611a9b565b5091979650505050505050565b600061016082518452602083015160208501526040830151816040860152611afc828601826118b3565b91505060608301518482036060860152611b1682826118b3565b9150506080830151611b40608086018273ffffffffffffffffffffffffffffffffffffffff169052565b5060a083015160a085015260c083015184820360c0860152611b628282611a4a565b91505060e083015184820360e0860152611b7c8282611a4a565b9150506101008084015185830382870152611b978382611a4a565b925050506101208084015185830382870152611bb38382611a7d565b925050506101408084015185830382870152611bcf83826118b3565b9695505050505050565b604081526000611bec6040830185611a0f565b8281036020840152611bfe8185611ad2565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610160810167ffffffffffffffff81118282101715611c5a57611c5a611c07565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715611ca757611ca7611c07565b604052919050565b600067ffffffffffffffff821115611cc957611cc9611c07565b5060051b60200190565b600067ffffffffffffffff821115611ced57611ced611c07565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b600082601f830112611d2a57600080fd5b8135611d3d611d3882611cd3565b611c60565b818152846020838601011115611d5257600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f830112611d8057600080fd5b81356020611d90611d3883611caf565b82815260059290921b84018101918181019086841115611daf57600080fd5b8286015b84811015611dd3578035611dc681611801565b8352918301918301611db3565b509695505050505050565b600082601f830112611def57600080fd5b81356020611dff611d3883611caf565b82815260059290921b84018101918181019086841115611e1e57600080fd5b8286015b84811015611dd357803567ffffffffffffffff811115611e425760008081fd5b611e508986838b0101611d19565b845250918301918301611e22565b60006101608284031215611e7157600080fd5b611e79611c36565b90508135815260208201356020820152604082013567ffffffffffffffff80821115611ea457600080fd5b611eb085838601611d19565b60408401526060840135915080821115611ec957600080fd5b611ed585838601611d19565b6060840152611ee6608085016117f1565b608084015260a084013560a084015260c0840135915080821115611f0957600080fd5b611f1585838601611d6f565b60c084015260e0840135915080821115611f2e57600080fd5b611f3a85838601611d6f565b60e084015261010091508184013581811115611f5557600080fd5b611f6186828701611d6f565b838501525061012091508184013581811115611f7c57600080fd5b611f8886828701611dde565b838501525061014091508184013581811115611fa357600080fd5b611faf86828701611d19565b8385015250505092915050565b600080600060608486031215611fd157600080fd5b833567ffffffffffffffff80821115611fe957600080fd5b818601915086601f830112611ffd57600080fd5b8135602061200d611d3883611caf565b82815260059290921b8401810191818101908a84111561202c57600080fd5b948201945b8386101561204a57853582529482019490820190612031565b9750508701359250508082111561206057600080fd5b5061206d86828701611e5e565b92505061207c60408501611810565b90509250925092565b60208152600061209860208301846118b3565b9392505050565b600080602083850312156120b257600080fd5b823567ffffffffffffffff8111156120c957600080fd5b6120d58582860161192c565b90969095509350505050565b73ffffffffffffffffffffffffffffffffffffffff83168152604060208201526000610c1e6040830184611a0f565b6020815260006120986020830184611a0f565b73ffffffffffffffffffffffffffffffffffffffff83168152604060208201526000610c1e6040830184611ad2565b6020815260006120986020830184611ad2565b6000806040838503121561217857600080fd5b8235612183816117cc565b9150602083013561219381611801565b809150509250929050565b6060815260006121b16060830186611a0f565b82810360208401526121c38186611ad2565b91505060ff83166040830152949350505050565b600082601f8301126121e857600080fd5b81516121f6611d3882611cd3565b81815284602083860101111561220b57600080fd5b610c1e826020830160208701611883565b60006020828403121561222e57600080fd5b815167ffffffffffffffff81111561224557600080fd5b610c1e848285016121d7565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561228357600080fd5b8260051b8083602087013760009401602001938452509192915050565b6020808252818101839052600090600560408085019086831b86010187855b8881101561236b577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc088840301845281357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18b360301811261232057600080fd5b8a01803567ffffffffffffffff81111561233957600080fd5b80871b36038c131561234a57600080fd5b61235785828a8501612251565b9588019594505050908501906001016122bf565b509098975050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060ff821660ff84168060ff038211156123c5576123c5612379565b019392505050565b80516117fc816117cc565b600082601f8301126123e957600080fd5b815160206123f9611d3883611caf565b82815260059290921b8401810191818101908684111561241857600080fd5b8286015b84811015611dd357805161242f81611801565b835291830191830161241c565b600082601f83011261244d57600080fd5b8151602061245d611d3883611caf565b82815260059290921b8401810191818101908684111561247c57600080fd5b8286015b84811015611dd357805167ffffffffffffffff8111156124a05760008081fd5b6124ae8986838b01016121d7565b845250918301918301612480565b6000602082840312156124ce57600080fd5b815167ffffffffffffffff808211156124e657600080fd5b9083019061016082860312156124fb57600080fd5b612503611c36565b825181526020830151602082015260408301518281111561252357600080fd5b61252f878286016121d7565b60408301525060608301518281111561254757600080fd5b612553878286016121d7565b606083015250612565608084016123cd565b608082015260a083015160a082015260c08301518281111561258657600080fd5b612592878286016123d8565b60c08301525060e0830151828111156125aa57600080fd5b6125b6878286016123d8565b60e08301525061010080840151838111156125d057600080fd5b6125dc888287016123d8565b82840152505061012080840151838111156125f657600080fd5b6126028882870161243c565b828401525050610140808401518381111561261c57600080fd5b612628888287016121d7565b918301919091525095945050505050565b6000606082016060835280865180835260808501915060808160051b860101925060208089016000805b848110156126d5578887037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80018652825180518089529085019085890190845b818110156126bf578351835292870192918701916001016126a3565b5090985050509483019491830191600101612663565b505050858403818701525050506126ec8186611ad2565b915050610c1e604083018460ff169052565b600082601f83011261270f57600080fd5b8151602061271f611d3883611caf565b82815260059290921b8401810191818101908684111561273e57600080fd5b8286015b84811015611dd35780518352918301918301612742565b60006020828403121561276b57600080fd5b815167ffffffffffffffff81111561278257600080fd5b610c1e848285016126fe565b6060815260006127a16060830186611ad2565b82810360208401526121c38186611a0f565b7f7b226e616d65223a2200000000000000000000000000000000000000000000008152600085516127eb816009850160208a01611883565b7f222c226465736372697074696f6e223a22000000000000000000000000000000600991840191820152855161282881601a840160208a01611883565b7f222c2022696d616765223a202200000000000000000000000000000000000000601a92909101918201528451612866816027840160208901611883565b7f222c22746f6b656e4964223a22000000000000000000000000000000000000006027929091019182015283516128a4816034840160208801611883565b7f227d000000000000000000000000000000000000000000000000000000000000603492909101918201526036019695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261294057600080fd5b83018035915067ffffffffffffffff82111561295b57600080fd5b6020019150600581901b360382131561197157600080fd5b600060ff821660ff81141561298a5761298a612379565b60010192915050565b60008152600082516129ac816001850160208701611883565b9190910160010192915050565b7f630000000000000000000000000000000000000000000000000000000000000081527fffffffff000000000000000000000000000000000000000000000000000000008360e01b1660018201527f80600e6000396000f30000000000000000000000000000000000000000000000600582015260008251612a4281600e850160208701611883565b91909101600e019392505050565b600060ff821680612a6357612a63612379565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0192915050565b600060ff821660ff841680821015612aa557612aa5612379565b90039392505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612ae057612ae0612379565b5060010190565b60006020808385031215612afa57600080fd5b825167ffffffffffffffff80821115612b1257600080fd5b818501915085601f830112612b2657600080fd5b8151612b34611d3882611caf565b81815260059190911b83018401908481019088831115612b5357600080fd5b8585015b83811015612b8b57805185811115612b6f5760008081fd5b612b7d8b89838a01016126fe565b845250918601918601612b57565b5098975050505050505050565b600082821015612baa57612baa612379565b50039056fea2646970667358221220137c797b32942ebcbe8ef48b0666c95662ac03cb241d66208da504e94ebb12ab64736f6c63430008090033",
  "devdoc": {
    "author": "nugg.xyz - danny7even & dub6ix",
    "details": "hold my margarita",
    "kind": "dev",
    "methods": {},
    "title": "dotnugg V1 - onchain encoder/decoder protocol for dotnugg files",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "yoU CAN'T HaVe ImAgES oN THe BlOCkcHAIn",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9379,
        "contract": "src/DotnuggV1.sol:DotnuggV1",
        "label": "sstore2Pointers",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_mapping(t_uint8,t_array(t_uint168)dyn_storage))"
      },
      {
        "astId": 9385,
        "contract": "src/DotnuggV1.sol:DotnuggV1",
        "label": "featureLengths",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint8))"
      },
      {
        "astId": 1702,
        "contract": "src/DotnuggV1.sol:DotnuggV1",
        "label": "lib",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(DotnuggV1Lib)9356"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint168)dyn_storage": {
        "base": "t_uint168",
        "encoding": "dynamic_array",
        "label": "uint168[]",
        "numberOfBytes": "32"
      },
      "t_contract(DotnuggV1Lib)9356": {
        "encoding": "inplace",
        "label": "contract DotnuggV1Lib",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint8,t_array(t_uint168)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint8 => uint168[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint8,t_array(t_uint168)dyn_storage)"
      },
      "t_mapping(t_address,t_mapping(t_uint8,t_uint8))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint8 => uint8))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint8,t_uint8)"
      },
      "t_mapping(t_uint8,t_array(t_uint168)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => uint168[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint168)dyn_storage"
      },
      "t_mapping(t_uint8,t_uint8)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => uint8)",
        "numberOfBytes": "32",
        "value": "t_uint8"
      },
      "t_uint168": {
        "encoding": "inplace",
        "label": "uint168",
        "numberOfBytes": "21"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}