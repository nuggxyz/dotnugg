{
  "address": "0xFF19E6E699b959C8Ed435D3FC1183afdc5484700",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "width",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "height",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "internalType": "int8",
                  "name": "zindex",
                  "type": "int8"
                },
                {
                  "components": [
                    {
                      "internalType": "uint8",
                      "name": "r",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "g",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "b",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "a",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct IDotNugg.Rgba",
                  "name": "rgba",
                  "type": "tuple"
                },
                {
                  "internalType": "bool",
                  "name": "exists",
                  "type": "bool"
                }
              ],
              "internalType": "struct IDotNugg.Pixel[][]",
              "name": "data",
              "type": "tuple[][]"
            },
            {
              "internalType": "uint8",
              "name": "currentUnsetX",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "currentUnsetY",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "init",
              "type": "bool"
            },
            {
              "internalType": "uint8",
              "name": "startX",
              "type": "uint8"
            }
          ],
          "internalType": "struct IDotNugg.Matrix",
          "name": "matrix",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "resolveFile",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "res",
          "type": "bytes"
        },
        {
          "internalType": "string",
          "name": "fileType",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x00eb968c84bd604e131e32cfc49cad5049ecb070aad4a8265b1c9d0c481b4e57",
  "receipt": {
    "to": null,
    "from": "0xB666C13b621568FeC210724DF161604adccfA257",
    "contractAddress": "0xFF19E6E699b959C8Ed435D3FC1183afdc5484700",
    "transactionIndex": 1,
    "gasUsed": "952846",
    "logsBloom": "0x
    "blockHash": "0x7f85175f4b974fb24cd86170c2daa88ed2fd2700c3ce13904037a32f6a4c035d",
    "transactionHash": "0x00eb968c84bd604e131e32cfc49cad5049ecb070aad4a8265b1c9d0c481b4e57",
    "logs": [],
    "blockNumber": 11433094,
    "cumulativeGasUsed": "977114",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "90f288ce3a0251461453e654dcf5b24f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"width\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"height\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"int8\",\"name\":\"zindex\",\"type\":\"int8\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"r\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"g\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"b\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"a\",\"type\":\"uint8\"}],\"internalType\":\"struct IDotNugg.Rgba\",\"name\":\"rgba\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"internalType\":\"struct IDotNugg.Pixel[][]\",\"name\":\"data\",\"type\":\"tuple[][]\"},{\"internalType\":\"uint8\",\"name\":\"currentUnsetX\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"currentUnsetY\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"init\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"startX\",\"type\":\"uint8\"}],\"internalType\":\"struct IDotNugg.Matrix\",\"name\":\"matrix\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"resolveFile\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"res\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"fileType\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/resolvers/SvgFileResolver.sol\":\"SvgFileResolver\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"contracts/erc165/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x80ad8fd0a17bb32ad123b37e3a8fd331ddfa0ddf565028b62a8e67071cc1bb60\",\"license\":\"MIT\"},\"contracts/interfaces/IDotNugg.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.4;\\n\\ninterface IDotNugg {\\n    function nuggify(\\n        bytes memory _collection,\\n        bytes[] memory _items,\\n        address _resolver,\\n        string memory name,\\n        string memory description,\\n        uint256 tokenId,\\n        bytes32 seed,\\n        bytes memory data\\n    ) external view returns (string memory image);\\n\\n    struct Rlud {\\n        bool exists;\\n        uint8 r;\\n        uint8 l;\\n        uint8 u;\\n        uint8 d;\\n    }\\n\\n    struct Rgba {\\n        uint8 r;\\n        uint8 g;\\n        uint8 b;\\n        uint8 a;\\n    }\\n\\n    struct Anchor {\\n        Rlud radii;\\n        Coordinate coordinate;\\n    }\\n\\n    struct Coordinate {\\n        uint8 a; // anchorId\\n        uint8 b; // yoffset\\n        bool exists;\\n    }\\n\\n    struct Collection {\\n        uint8 width;\\n        uint8 height;\\n        uint8 numFeatures;\\n        bytes[] defaults;\\n    }\\n\\n    struct Item {\\n        uint8 feature;\\n        Pixel[] pallet;\\n        Version[] versions;\\n    }\\n\\n    struct Version {\\n        uint8 width;\\n        uint8 height;\\n        Anchor anchor;\\n        // these must be in same order as canvas receivers, respectively\\n        Coordinate[] calculatedReceivers; // can be empty\\n        Coordinate[] staticReceivers; // can be empty\\n        Rlud expanders;\\n        bytes data;\\n    }\\n\\n    struct Canvas {\\n        Matrix matrix;\\n        Anchor[] receivers;\\n    }\\n\\n    struct Mix {\\n        uint8 feature;\\n        Version version;\\n        Matrix matrix;\\n        Anchor[] receivers;\\n    }\\n\\n    struct Pixel {\\n        int8 zindex;\\n        Rgba rgba;\\n        bool exists;\\n    }\\n\\n    struct Pallet {\\n        Pixel[] pixels;\\n    }\\n\\n    struct Matrix {\\n        uint8 width;\\n        uint8 height;\\n        Pixel[][] data;\\n        uint8 currentUnsetX;\\n        uint8 currentUnsetY;\\n        bool init;\\n        uint8 startX;\\n    }\\n}\\n\",\"keccak256\":\"0x3bb49b7d80e114e7b4049f271c76058506aad4a147fab69e43b5cd4fdcf88a05\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/INuggIn.sol\":{\"content\":\"pragma solidity 0.8.4;\\n\\nimport '../erc165/IERC165.sol';\\nimport './IDotNugg.sol';\\n\\ninterface IColorResolver is IERC165 {\\n    function resolveColor(IDotNugg.Matrix memory matrix, bytes memory data) external pure returns (bytes memory res);\\n\\n    function supportsInterface(bytes4 interfaceId) external view override returns (bool);\\n}\\n\\ninterface IFileResolver is IERC165 {\\n    function resolveFile(IDotNugg.Matrix memory matrix, bytes memory data) external view returns (bytes memory, string memory fileType);\\n\\n    function supportsInterface(bytes4 interfaceId) external view override returns (bool);\\n}\\n\",\"keccak256\":\"0xaacc620e878e4ad374f975c7e2969f0b5e01e70a2d1d73b26657b46e9451d11f\"},\"contracts/libraries/Byte.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\n/**\\n * @dev Bytes1 operations.\\n */\\nlibrary Byte {\\n    bytes32 internal constant ALPHABET = '0123456789abcdef';\\n\\n    function toAscii(bytes1 value) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2);\\n        for (uint256 i = 2; i > 0; i--) {\\n            buffer[i - 1] = ALPHABET[uint8(value) & 0xf];\\n            value >>= 4;\\n        }\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x70187fc2acfa2c13f534f742ab38b7ca5036fdb069f8b4e1107ba5831944b362\",\"license\":\"MIT\"},\"contracts/libraries/Bytes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport './Byte.sol';\\n\\n/**\\n * @dev Bytes operations.\\n */\\nlibrary Bytes {\\n    using Byte for bytes1;\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1, 'toUint8_outOfBounds');\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint4(bytes memory _bytes, uint256 _start) internal pure returns (uint8, uint8) {\\n        uint8 tempUint = toUint8(_bytes, _start);\\n        return (tempUint >> 4, tempUint & 0xf);\\n    }\\n\\n    function toInt8(bytes memory _bytes, uint256 _start) internal pure returns (int8) {\\n        uint8 tempUint = toUint8(_bytes, _start);\\n        return (int8(~tempUint) + 1) * -1;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, 'toUint16_outOfBounds');\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, 'toUint64_outOfBounds');\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toAscii(bytes memory val) internal pure returns (string memory res) {\\n        for (uint8 i = 0; i < val.length; i++) {\\n            res = string(abi.encodePacked(res, val[i].toAscii()));\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x875014d8021ba67e7beec7e2ef5bcb5bb939b93bce28ee900c0c3c828b376ded\",\"license\":\"MIT\"},\"contracts/libraries/Uint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\n/*\\n * @dev Uint operations.\\n */\\nlibrary Uint8 {\\n    function toByte(uint8 u) internal pure returns (bytes1 res) {\\n        res = bytes1(u);\\n    }\\n\\n    function toString(uint8 u) internal pure returns (string memory res) {\\n        res = Uint256.toString(uint256(u));\\n    }\\n}\\n\\n/*\\n * @dev Uint operations.\\n */\\nlibrary Uint256 {\\n    bytes16 private constant _HEX_SYMBOLS = '0123456789abcdef';\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return '0';\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0x00';\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = '0';\\n        buffer[1] = 'x';\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, 'Strings: hex length insufficient');\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xfa26c3fb5f7d48a24967b53795836c403b999c0cb7a396392e1545dab19879e4\",\"license\":\"MIT\"},\"contracts/logic/Matrix.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '../interfaces/IDotNugg.sol';\\nimport '../libraries/Bytes.sol';\\nimport '../logic/Rgba.sol';\\n\\nimport '../test/Console.sol';\\n\\nlibrary Matrix {\\n    using Bytes for bytes;\\n    using Rgba for IDotNugg.Rgba;\\n\\n    function create(uint8 width, uint8 height) internal view returns (IDotNugg.Matrix memory res) {\\n        require(width % 2 == 1 && height % 2 == 1, 'ML:C:0');\\n\\n        res.data = new IDotNugg.Pixel[][](height);\\n        for (uint8 i = 0; i < height; i++) {\\n            res.data[i] = new IDotNugg.Pixel[](width);\\n        }\\n    }\\n\\n    function moveTo(\\n        IDotNugg.Matrix memory matrix,\\n        uint8 xoffset,\\n        uint8 yoffset,\\n        uint8 width,\\n        uint8 height\\n    ) internal view {\\n        matrix.currentUnsetX = xoffset;\\n        matrix.currentUnsetY = yoffset;\\n        matrix.startX = xoffset;\\n        matrix.width = width + xoffset;\\n        matrix.height = height + yoffset;\\n    }\\n\\n    function next(IDotNugg.Matrix memory matrix) internal view returns (bool res) {\\n        res = next(matrix, matrix.width);\\n    }\\n\\n    function next(IDotNugg.Matrix memory matrix, uint8 width) internal view returns (bool res) {\\n        if (matrix.init) {\\n            if (width <= matrix.currentUnsetX + 1) {\\n                if (matrix.height == matrix.currentUnsetY + 1) {\\n                    return false;\\n                }\\n                matrix.currentUnsetX = matrix.startX; // 0 by default\\n                matrix.currentUnsetY++;\\n            } else {\\n                matrix.currentUnsetX++;\\n            }\\n        } else {\\n            matrix.init = true;\\n        }\\n        res = true;\\n    }\\n\\n    function current(IDotNugg.Matrix memory matrix) internal view returns (IDotNugg.Pixel memory res) {\\n\\n\\n        res = matrix.data[matrix.currentUnsetY][matrix.currentUnsetX];\\n    }\\n\\n    function setCurrent(IDotNugg.Matrix memory matrix, IDotNugg.Pixel memory pix) internal view {\\n        matrix.data[matrix.currentUnsetY][matrix.currentUnsetX] = pix;\\n    }\\n\\n    function resetIterator(IDotNugg.Matrix memory matrix) internal view {\\n        matrix.currentUnsetX = 0;\\n        matrix.currentUnsetY = 0;\\n        matrix.startX = 0;\\n        matrix.init = false;\\n    }\\n\\n    function moveBack(IDotNugg.Matrix memory matrix) internal view {\\n        matrix.width = uint8(matrix.data[0].length);\\n        matrix.height = uint8(matrix.data.length);\\n    }\\n\\n    function reset(IDotNugg.Matrix memory matrix) internal view {\\n        for (; next(matrix); ) if (current(matrix).exists) delete matrix.data[matrix.currentUnsetY][matrix.currentUnsetX];\\n        matrix.width = 0;\\n        matrix.height = 0;\\n        resetIterator(matrix);\\n    }\\n\\n    function set(\\n        IDotNugg.Matrix memory matrix,\\n        bytes memory data,\\n        IDotNugg.Pixel[] memory pallet,\\n        uint8 groupWidth,\\n        uint8 groupHeight\\n    ) internal view {\\n        uint256 totalLength = 0;\\n        matrix.height = groupHeight;\\n        for (uint256 i = 0; i < data.length; i++) {\\n            (uint8 colorKey, uint8 len) = data.toUint4(i);\\n            len++;\\n\\n            totalLength += len;\\n            for (uint256 j = 0; j < len; j++) {\\n                next(matrix, groupWidth);\\n                setCurrent(matrix, pallet[colorKey]);\\n\\n            }\\n\\n        }\\n\\n\\n\\n\\n\\n        require(totalLength % groupWidth == 0, 'MTRX:SET:0');\\n        require(totalLength / groupWidth == groupHeight, 'MTRX:SET:1');\\n\\n        matrix.width = groupWidth;\\n        matrix.height = uint8(totalLength / groupWidth);\\n\\n        resetIterator(matrix);\\n    }\\n\\n    function addRowsAt(\\n        IDotNugg.Matrix memory matrix,\\n        uint8 index,\\n        uint8 amount\\n    ) internal view {\\n        require(index < matrix.data.length, 'MAT:ARA:0');\\n        for (uint256 j = matrix.width; j > index; j--) {\\n            if (j < index) break;\\n            if (matrix.data[j].length > 0) matrix.data[j + amount] = matrix.data[j];\\n        }\\n        // \\\"<=\\\" is because this loop needs to run [amount] times\\n        for (uint256 j = index + 1; j <= index + amount; j++) {\\n            //\\n            matrix.data[j] = matrix.data[index];\\n        }\\n        matrix.height += amount;\\n    }\\n\\n    function addColumnsAt(\\n        IDotNugg.Matrix memory matrix, /// cowboy hat\\n        uint8 index,\\n        uint8 amount\\n    ) internal view {\\n        require(index < matrix.data[0].length, 'MAT:ACA:0');\\n        for (uint256 i = 0; i < matrix.width; i++) {\\n            for (uint256 j = matrix.width; j > index; j--) {\\n                if (j < index) break;\\n                //  if (matrix.data[i][j].exists) @note - do not completly understand this.. but it fixes a bug\\n                matrix.data[i][j + amount] = matrix.data[i][j];\\n            }\\n            // \\\"<=\\\" is because this loop needs to run [amount] times\\n            for (uint256 j = index + 1; j <= index + amount; j++) {\\n                matrix.data[i][j] = matrix.data[i][index];\\n            }\\n        }\\n        matrix.width += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x84fcc22621efd2ff09bec8d76003bfbe5f8d2249064fccb33a4426d208f57e5d\",\"license\":\"MIT\"},\"contracts/logic/Rgba.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.4;\\n\\nimport '../libraries/Bytes.sol';\\nimport '../interfaces/IDotNugg.sol';\\nimport '../test/Console.sol';\\n\\nlibrary Rgba {\\n    using Bytes for bytes;\\n\\n    struct RGBA16 {\\n        uint16 r;\\n        uint16 g;\\n        uint16 b;\\n        uint16 a;\\n    }\\n\\n    function combine(IDotNugg.Rgba memory base, IDotNugg.Rgba memory mix) internal view {\\n        if (mix.a == 255 || base.a == 0) {\\n            base.r = mix.r;\\n            base.g = mix.g;\\n            base.b = mix.b;\\n            base.a = mix.a;\\n            return;\\n        }\\n\\n        RGBA16 memory baseRGB = RGBA16({r: uint16(base.r), g: uint16(base.g), b: uint16(base.b), a: uint16(base.a)});\\n        RGBA16 memory mixRGB = RGBA16({r: uint16(mix.r), g: uint16(mix.g), b: uint16(mix.b), a: uint16(mix.a)});\\n\\n        // uint8 alpha = uint8(255 - (((255 - baseRGB.a) * (255 - mixRGB.a)) / 255));\\n        base.r = uint8((baseRGB.r * (255 - mixRGB.a) + mixRGB.r * mixRGB.a) / 255);\\n        base.g = uint8((baseRGB.g * (255 - mixRGB.a) + mixRGB.g * mixRGB.a) / 255);\\n        base.b = uint8((baseRGB.b * (255 - mixRGB.a) + mixRGB.b * mixRGB.a) / 255);\\n        base.a = 255;\\n        //   return IDotNugg.Rgba({r: r, g: g, b: b, a: 255});\\n    }\\n\\n    function toUint64(IDotNugg.Rgba memory base) internal view returns (uint64 res) {\\n        bytes memory input = abi.encodePacked(base.r, base.g, base.b, base.a);\\n        return input.toUint64(0);\\n    }\\n\\n    function toAscii(IDotNugg.Rgba memory base) internal view returns (string memory res) {\\n        bytes memory input = abi.encodePacked(base.r, base.g, base.b, base.a);\\n        return input.toAscii();\\n    }\\n\\n    function equalssss(IDotNugg.Rgba memory base, IDotNugg.Rgba memory next) internal view returns (bool res) {\\n        res = base.a == next.a && base.r == next.r && base.g == next.g && base.b == next.b;\\n    }\\n}\\n\",\"keccak256\":\"0x2f65480f7e46e1b0e34e0de221dc3eb9ea3f128ef6673966a60a4c341695d261\",\"license\":\"GPL-2.0-or-later\"},\"contracts/resolvers/SvgFileResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '.././interfaces/IDotNugg.sol';\\nimport '.././interfaces/INuggIn.sol';\\nimport '.././erc165/IERC165.sol';\\nimport '../../contracts/logic/Rgba.sol';\\nimport '../../contracts/logic/Matrix.sol';\\nimport '../../contracts/libraries/Uint.sol';\\n\\n// import '../erc165/ERC165.sol';\\n\\n// /**\\n//  * @dev Bytes1 operations.\\n//  */\\ncontract SvgFileResolver is IFileResolver {\\n    using Rgba for IDotNugg.Rgba;\\n    using Uint256 for uint256;\\n\\n    using Matrix for IDotNugg.Matrix;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view override(IFileResolver) returns (bool) {\\n        return interfaceId == type(IFileResolver).interfaceId || interfaceId == type(IERC165).interfaceId;\\n    }\\n\\n    function resolveFile(IDotNugg.Matrix memory matrix, bytes memory data) public view override returns (bytes memory res, string memory fileType) {\\n        uint256 svgWidth = uint256(matrix.width) * 10;\\n        bytes memory header = abi.encodePacked(\\n            \\\"<svg viewBox='0 0 \\\",\\n            svgWidth.toString(),\\n            ' ',\\n            svgWidth.toString(),\\n            \\\"' width='\\\",\\n            svgWidth.toString(),\\n            \\\"' height='\\\",\\n            svgWidth.toString(),\\n            \\\"' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'>\\\\n\\\"\\n        );\\n        bytes memory rects = getSvgRects(matrix, 10);\\n        return (abi.encodePacked(header, rects, '</svg>'), 'svg');\\n    }\\n\\n    function getSvgRects(IDotNugg.Matrix memory matrix, uint256 pixelWidth) internal view returns (bytes memory res) {\\n        IDotNugg.Rgba memory lastRgba;\\n        uint8 lastX;\\n\\n        //   uint256 xtracker;\\n        uint256 count = 1;\\n        while (matrix.next()) {\\n            if ((lastRgba.equalssss(matrix.current().rgba) && matrix.currentUnsetX < matrix.data[matrix.currentUnsetY].length)) {\\n                //  lastRgba = matrix.current().rgba;\\n                count++;\\n                continue;\\n            }\\n            if (lastRgba.a != 0) {\\n                res = abi.encodePacked(res, getRekt(lastRgba, lastX * pixelWidth, matrix.currentUnsetY * pixelWidth, pixelWidth, count * pixelWidth));\\n            }\\n            lastRgba = matrix.current().rgba;\\n            lastX = matrix.currentUnsetX;\\n            // xtracker = 0;\\n            count = 1;\\n        }\\n\\n        res = abi.encodePacked(res, getRekt(matrix.current().rgba, lastX * pixelWidth, matrix.currentUnsetY * pixelWidth, pixelWidth, count * pixelWidth));\\n\\n        //   while (!done) {\\n        //       lastPix = matrix.current();\\n        //       while (!done) {\\n        //           if (!matrix.next()) {\\n        //               done = true;\\n        //               break;\\n        //           }\\n        //           if (!lastPix.rgba.equalssss(matrix.current().rgba)) break;\\n\\n        //           count++;\\n        //           if (count == matrix.width - 1) break;\\n        //       }\\n        //       if (lastPix.rgba.a != 0) {\\n        //           if (matrix.currentUnsetX < count) {\\n        //               uint256 diff = count - matrix.currentUnsetX;\\n\\n\\n\\n        //               res = abi.encodePacked(\\n        //                   res,\\n        //                   getRekt(lastPix.rgba, (matrix.width - diff) * pixelWidth, (matrix.currentUnsetY - 1) * pixelWidth, pixelWidth, diff * pixelWidth),\\n        //                   getRekt(lastPix.rgba, 0, (matrix.currentUnsetY) * pixelWidth, pixelWidth, (count - diff) * pixelWidth)\\n        //               );\\n        //               //  res = abi.encodePacked(res, getRekt(lastPix.rgba, 0, (lastPix.currentUnsetY) * pixelWidth, pixelWidth, (count - diff) * pixelWidth));\\n        //           } else {\\n        //               res = abi.encodePacked(\\n        //                   res,\\n        //                   getRekt(lastPix.rgba, (matrix.width - count) * pixelWidth, (matrix.currentUnsetY - 1) * pixelWidth, pixelWidth, count * pixelWidth)\\n        //               );\\n        //           }\\n        //       }\\n        //   }\\n    }\\n\\n    function getRekt(\\n        IDotNugg.Rgba memory rgba,\\n        uint256 x,\\n        uint256 y,\\n        uint256 xlen,\\n        uint256 ylen\\n    ) internal view returns (bytes memory res) {\\n        if (rgba.a == 0) return '';\\n        //   (rgba, ) = rgba.combine(IDotNugg.Rgba({r: 0, g: 255, b: 0, a: 99}));\\n        res = abi.encodePacked(\\n            \\\"\\\\t<rect fill='#\\\",\\n            rgba.toAscii(),\\n            \\\"' x='\\\",\\n            x.toString(),\\n            \\\"' y='\\\",\\n            y.toString(),\\n            \\\"' height='\\\",\\n            xlen.toString(),\\n            \\\"' width='\\\",\\n            ylen.toString(),\\n            \\\"'/>\\\\n\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x57b05f1ca9d3d6ac5d717e559f078bc8ba3d584910ede532323076be5f5bb81f\",\"license\":\"MIT\"},\"contracts/test/Console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n    function _sendLogPayload(bytes memory payload) private view {\\n        uint256 payloadLength = payload.length;\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        assembly {\\n            let payloadStart := add(payload, 32)\\n            let r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n        }\\n    }\\n\\n    function log() internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log()'));\\n    }\\n\\n    function logInt(int256 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(int)', p0));\\n    }\\n\\n    function logUint(uint256 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint)', p0));\\n    }\\n\\n    function logString(string memory p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string)', p0));\\n    }\\n\\n    function logBool(bool p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool)', p0));\\n    }\\n\\n    function logAddress(address p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address)', p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes)', p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes1)', p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes2)', p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes3)', p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes4)', p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes5)', p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes6)', p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes7)', p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes8)', p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes9)', p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes10)', p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes11)', p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes12)', p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes13)', p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes14)', p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes15)', p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes16)', p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes17)', p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes18)', p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes19)', p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes20)', p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes21)', p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes22)', p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes23)', p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes24)', p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes25)', p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes26)', p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes27)', p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes28)', p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes29)', p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes30)', p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes31)', p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes32)', p0));\\n    }\\n\\n    function log(uint256 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint)', p0));\\n    }\\n\\n    function log(string memory p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string)', p0));\\n    }\\n\\n    function log(bool p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool)', p0));\\n    }\\n\\n    function log(address p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address)', p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint)', p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string)', p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool)', p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address)', p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint)', p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string)', p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool)', p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address)', p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint)', p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string)', p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool)', p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address)', p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint)', p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string)', p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool)', p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address)', p0, p1));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,address,address)', p0, p1, p2, p3));\\n    }\\n}\\n\",\"keccak256\":\"0x96e3621e83cc5dc501c1974c0041f430df6158d55a09838c0967a90a436e9a33\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611045806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806301ffc9a71461003b5780635236730614610063575b600080fd5b61004e610049366004610a0c565b610084565b60405190151581526020015b60405180910390f35b610076610071366004610a34565b6100bb565b60405161005a929190610dcc565b60006001600160e01b031982166353c9baa160e01b14806100b557506001600160e01b031982166301ffc9a760e01b145b92915050565b6060806000846000015160ff16600a6100d49190610f01565b905060006100e182610172565b6100ea83610172565b6100f384610172565b6100fc85610172565b60405160200161010f9493929190610cb1565b6040516020818303038152906040529050600061012d87600a610293565b90508181604051602001610142929190610b81565b60408051808303601f19018152828201909152600382526273766760e81b60208301529890975095505050505050565b6060816101965750506040805180820190915260018152600360fc1b602082015290565b8160005b81156101c057806101aa81610f7e565b91506101b99050600a83610eed565b915061019a565b6000816001600160401b038111156101e857634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015610212576020820181803683370190505b5090505b841561028b57610227600183610f20565b9150610234600a86610fb9565b61023f906030610eb0565b60f81b81838151811061026257634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350610284600a86610eed565b9450610216565b949350505050565b6040805160808101825260008082526020820181905291810182905260608082018390529160015b6102c486610409565b156103c0576102e06102d587610419565b6020015184906104c3565b801561032557508560400151866080015160ff168151811061031257634e487b7160e01b600052603260045260246000fd5b602002602001015151866060015160ff16105b1561033c578061033481610f7e565b9150506102bb565b606083015160ff16156103a1578361037e8461035b8860ff8716610f01565b888a6080015160ff1661036e9190610f01565b896103798188610f01565b610523565b60405160200161038f929190610b52565b60405160208183030381529060405293505b6103aa86610419565b60200151925085606001519150600190506102bb565b836103de6103cd88610419565b6020015161035b8860ff8716610f01565b6040516020016103ef929190610b52565b604051602081830303815290604052935050505092915050565b60006100b58283600001516105a1565b61045b60408051606080820183526000808352835160808101855281815260208181018390529481018290529182015290918201908152600060209091015290565b8160400151826080015160ff168151811061048657634e487b7160e01b600052603260045260246000fd5b6020026020010151826060015160ff16815181106104b457634e487b7160e01b600052603260045260246000fd5b60200260200101519050919050565b6000816060015160ff16836060015160ff161480156104ea57508151835160ff9081169116145b80156105035750816020015160ff16836020015160ff16145b801561051c5750816040015160ff16836040015160ff16145b9392505050565b60608581015160ff166105455750604080516020810190915260008152610598565b61054e8661063b565b61055786610172565b61056086610172565b61056986610172565b61057286610172565b604051602001610586959493929190610bc1565b60405160208183030381529060405290505b95945050505050565b60008260a001511561062a5760608301516105bd906001610ec8565b60ff168260ff161161061a5760808301516105d9906001610ec8565b60ff16836020015160ff1614156105f2575060006100b5565b60c083015160ff1660608401526080830180519061060f82610f99565b60ff16905250610632565b6060830180519061060f82610f99565b600160a08401525b50600192915050565b805160208083015160408085015160608087015183516001600160f81b031960f898891b81169782019790975294871b8616602186015291861b85166022850152941b909216602382015281518082036004018152602490910190915261051c818360005b82518160ff16101561071c57816106e7848360ff16815181106106d357634e487b7160e01b600052603260045260246000fd5b01602001516001600160f81b031916610722565b6040516020016106f8929190610b52565b6040516020818303038152906040529150808061071490610f99565b9150506106a0565b50919050565b6040805160028082528183019092526060916000919060208201818036833701905050905060025b80156107f3576f181899199a1a9b1b9c1cb0b131b232b360811b600f60f886901c166020811061078a57634e487b7160e01b600052603260045260246000fd5b1a60f81b8261079a600184610f20565b815181106107b857634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506004846001600160f81b031916901c935080806107eb90610f67565b91505061074a565b5092915050565b600082601f83011261080a578081fd5b8135602061081f61081a83610e8d565b610e5d565b80838252828201915082860187848660051b890101111561083e578586fd5b855b8581101561096f5781356001600160401b0381111561085d578788fd5b8801603f81018a1361086d578788fd5b8581013561087d61081a82610e8d565b808282528882019150604084018d604060c08602870101111561089e578b8cfd5b8b94505b8385101561095957808e0360c08112156108ba578c8dfd5b6108c2610df1565b8235808f0b81146108d1578e8ffd5b81526080601f19830112156108e4578d8efd5b6108ec610e19565b91506108f98c84016109fb565b8252610907604084016109fb565b8c830152610917606084016109fb565b6040830152610928608084016109fb565b6060830152818c82015261093e60a0840161097c565b6040820152845250600194909401939189019160c0016108a2565b5087525050509284019290840190600101610840565b5090979650505050505050565b8035801515811461098c57600080fd5b919050565b600082601f8301126109a1578081fd5b81356001600160401b038111156109ba576109ba610ff9565b6109cd601f8201601f1916602001610e5d565b8181528460208386010111156109e1578283fd5b816020850160208301379081016020019190915292915050565b803560ff8116811461098c57600080fd5b600060208284031215610a1d578081fd5b81356001600160e01b03198116811461051c578182fd5b60008060408385031215610a46578081fd5b82356001600160401b0380821115610a5c578283fd5b9084019060e08287031215610a6f578283fd5b610a77610e3b565b610a80836109fb565b8152610a8e602084016109fb565b6020820152604083013582811115610aa4578485fd5b610ab0888286016107fa565b604083015250610ac2606084016109fb565b6060820152610ad3608084016109fb565b6080820152610ae460a0840161097c565b60a0820152610af560c084016109fb565b60c082015293506020850135915080821115610b0f578283fd5b50610b1c85828601610991565b9150509250929050565b60008151808452610b3e816020860160208601610f37565b601f01601f19169290920160200192915050565b60008351610b64818460208801610f37565b835190830190610b78818360208801610f37565b01949350505050565b60008351610b93818460208801610f37565b835190830190610ba7818360208801610f37565b651e17b9bb339f60d11b9101908152600601949350505050565b6d093c726563742066696c6c3d272360901b81528551600090610beb81600e850160208b01610f37565b642720783d2760d81b600e918401918201528651610c10816013840160208b01610f37565b642720793d2760d81b601392909101918201528551610c36816018840160208a01610f37565b6927206865696768743d2760b01b601892909101918201528451610c61816022840160208901610f37565b68272077696474683d2760b81b602292909101918201528351610c8b81602b840160208801610f37565b610ca4602b828401016313979f0560e11b815260040190565b9998505050505050505050565b7101e39bb33903b34b2bba137bc1e93981018160751b815260008551610cde816012850160208a01610f37565b600160fd1b6012918401918201528551610cff816013840160208a01610f37565b68272077696474683d2760b81b601392909101918201528451610d2981601c840160208901610f37565b6927206865696768743d2760b01b601c92909101918201528351610d54816026840160208801610f37565b7f2720786d6c6e733d27687474703a2f2f7777772e77332e6f72672f323030302f602692909101918201527f7376672720786d6c6e733a786c696e6b3d27687474703a2f2f7777772e77332e60468201527037b93397989c9c9c97bc3634b735939f0560791b60668201526077019695505050505050565b604081526000610ddf6040830185610b26565b82810360208401526105988185610b26565b604051606081016001600160401b0381118282101715610e1357610e13610ff9565b60405290565b604051608081016001600160401b0381118282101715610e1357610e13610ff9565b60405160e081016001600160401b0381118282101715610e1357610e13610ff9565b604051601f8201601f191681016001600160401b0381118282101715610e8557610e85610ff9565b604052919050565b60006001600160401b03821115610ea657610ea6610ff9565b5060051b60200190565b60008219821115610ec357610ec3610fcd565b500190565b600060ff821660ff84168060ff03821115610ee557610ee5610fcd565b019392505050565b600082610efc57610efc610fe3565b500490565b6000816000190483118215151615610f1b57610f1b610fcd565b500290565b600082821015610f3257610f32610fcd565b500390565b60005b83811015610f52578181015183820152602001610f3a565b83811115610f61576000848401525b50505050565b600081610f7657610f76610fcd565b506000190190565b6000600019821415610f9257610f92610fcd565b5060010190565b600060ff821660ff811415610fb057610fb0610fcd565b60010192915050565b600082610fc857610fc8610fe3565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea26469706673582212200bfc75c2e65e56fc249f3e52975bcd03d60e773721b24e6a5f3bd8eb515ab57164736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c806301ffc9a71461003b5780635236730614610063575b600080fd5b61004e610049366004610a0c565b610084565b60405190151581526020015b60405180910390f35b610076610071366004610a34565b6100bb565b60405161005a929190610dcc565b60006001600160e01b031982166353c9baa160e01b14806100b557506001600160e01b031982166301ffc9a760e01b145b92915050565b6060806000846000015160ff16600a6100d49190610f01565b905060006100e182610172565b6100ea83610172565b6100f384610172565b6100fc85610172565b60405160200161010f9493929190610cb1565b6040516020818303038152906040529050600061012d87600a610293565b90508181604051602001610142929190610b81565b60408051808303601f19018152828201909152600382526273766760e81b60208301529890975095505050505050565b6060816101965750506040805180820190915260018152600360fc1b602082015290565b8160005b81156101c057806101aa81610f7e565b91506101b99050600a83610eed565b915061019a565b6000816001600160401b038111156101e857634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015610212576020820181803683370190505b5090505b841561028b57610227600183610f20565b9150610234600a86610fb9565b61023f906030610eb0565b60f81b81838151811061026257634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350610284600a86610eed565b9450610216565b949350505050565b6040805160808101825260008082526020820181905291810182905260608082018390529160015b6102c486610409565b156103c0576102e06102d587610419565b6020015184906104c3565b801561032557508560400151866080015160ff168151811061031257634e487b7160e01b600052603260045260246000fd5b602002602001015151866060015160ff16105b1561033c578061033481610f7e565b9150506102bb565b606083015160ff16156103a1578361037e8461035b8860ff8716610f01565b888a6080015160ff1661036e9190610f01565b896103798188610f01565b610523565b60405160200161038f929190610b52565b60405160208183030381529060405293505b6103aa86610419565b60200151925085606001519150600190506102bb565b836103de6103cd88610419565b6020015161035b8860ff8716610f01565b6040516020016103ef929190610b52565b604051602081830303815290604052935050505092915050565b60006100b58283600001516105a1565b61045b60408051606080820183526000808352835160808101855281815260208181018390529481018290529182015290918201908152600060209091015290565b8160400151826080015160ff168151811061048657634e487b7160e01b600052603260045260246000fd5b6020026020010151826060015160ff16815181106104b457634e487b7160e01b600052603260045260246000fd5b60200260200101519050919050565b6000816060015160ff16836060015160ff161480156104ea57508151835160ff9081169116145b80156105035750816020015160ff16836020015160ff16145b801561051c5750816040015160ff16836040015160ff16145b9392505050565b60608581015160ff166105455750604080516020810190915260008152610598565b61054e8661063b565b61055786610172565b61056086610172565b61056986610172565b61057286610172565b604051602001610586959493929190610bc1565b60405160208183030381529060405290505b95945050505050565b60008260a001511561062a5760608301516105bd906001610ec8565b60ff168260ff161161061a5760808301516105d9906001610ec8565b60ff16836020015160ff1614156105f2575060006100b5565b60c083015160ff1660608401526080830180519061060f82610f99565b60ff16905250610632565b6060830180519061060f82610f99565b600160a08401525b50600192915050565b805160208083015160408085015160608087015183516001600160f81b031960f898891b81169782019790975294871b8616602186015291861b85166022850152941b909216602382015281518082036004018152602490910190915261051c818360005b82518160ff16101561071c57816106e7848360ff16815181106106d357634e487b7160e01b600052603260045260246000fd5b01602001516001600160f81b031916610722565b6040516020016106f8929190610b52565b6040516020818303038152906040529150808061071490610f99565b9150506106a0565b50919050565b6040805160028082528183019092526060916000919060208201818036833701905050905060025b80156107f3576f181899199a1a9b1b9c1cb0b131b232b360811b600f60f886901c166020811061078a57634e487b7160e01b600052603260045260246000fd5b1a60f81b8261079a600184610f20565b815181106107b857634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506004846001600160f81b031916901c935080806107eb90610f67565b91505061074a565b5092915050565b600082601f83011261080a578081fd5b8135602061081f61081a83610e8d565b610e5d565b80838252828201915082860187848660051b890101111561083e578586fd5b855b8581101561096f5781356001600160401b0381111561085d578788fd5b8801603f81018a1361086d578788fd5b8581013561087d61081a82610e8d565b808282528882019150604084018d604060c08602870101111561089e578b8cfd5b8b94505b8385101561095957808e0360c08112156108ba578c8dfd5b6108c2610df1565b8235808f0b81146108d1578e8ffd5b81526080601f19830112156108e4578d8efd5b6108ec610e19565b91506108f98c84016109fb565b8252610907604084016109fb565b8c830152610917606084016109fb565b6040830152610928608084016109fb565b6060830152818c82015261093e60a0840161097c565b6040820152845250600194909401939189019160c0016108a2565b5087525050509284019290840190600101610840565b5090979650505050505050565b8035801515811461098c57600080fd5b919050565b600082601f8301126109a1578081fd5b81356001600160401b038111156109ba576109ba610ff9565b6109cd601f8201601f1916602001610e5d565b8181528460208386010111156109e1578283fd5b816020850160208301379081016020019190915292915050565b803560ff8116811461098c57600080fd5b600060208284031215610a1d578081fd5b81356001600160e01b03198116811461051c578182fd5b60008060408385031215610a46578081fd5b82356001600160401b0380821115610a5c578283fd5b9084019060e08287031215610a6f578283fd5b610a77610e3b565b610a80836109fb565b8152610a8e602084016109fb565b6020820152604083013582811115610aa4578485fd5b610ab0888286016107fa565b604083015250610ac2606084016109fb565b6060820152610ad3608084016109fb565b6080820152610ae460a0840161097c565b60a0820152610af560c084016109fb565b60c082015293506020850135915080821115610b0f578283fd5b50610b1c85828601610991565b9150509250929050565b60008151808452610b3e816020860160208601610f37565b601f01601f19169290920160200192915050565b60008351610b64818460208801610f37565b835190830190610b78818360208801610f37565b01949350505050565b60008351610b93818460208801610f37565b835190830190610ba7818360208801610f37565b651e17b9bb339f60d11b9101908152600601949350505050565b6d093c726563742066696c6c3d272360901b81528551600090610beb81600e850160208b01610f37565b642720783d2760d81b600e918401918201528651610c10816013840160208b01610f37565b642720793d2760d81b601392909101918201528551610c36816018840160208a01610f37565b6927206865696768743d2760b01b601892909101918201528451610c61816022840160208901610f37565b68272077696474683d2760b81b602292909101918201528351610c8b81602b840160208801610f37565b610ca4602b828401016313979f0560e11b815260040190565b9998505050505050505050565b7101e39bb33903b34b2bba137bc1e93981018160751b815260008551610cde816012850160208a01610f37565b600160fd1b6012918401918201528551610cff816013840160208a01610f37565b68272077696474683d2760b81b601392909101918201528451610d2981601c840160208901610f37565b6927206865696768743d2760b01b601c92909101918201528351610d54816026840160208801610f37565b7f2720786d6c6e733d27687474703a2f2f7777772e77332e6f72672f323030302f602692909101918201527f7376672720786d6c6e733a786c696e6b3d27687474703a2f2f7777772e77332e60468201527037b93397989c9c9c97bc3634b735939f0560791b60668201526077019695505050505050565b604081526000610ddf6040830185610b26565b82810360208401526105988185610b26565b604051606081016001600160401b0381118282101715610e1357610e13610ff9565b60405290565b604051608081016001600160401b0381118282101715610e1357610e13610ff9565b60405160e081016001600160401b0381118282101715610e1357610e13610ff9565b604051601f8201601f191681016001600160401b0381118282101715610e8557610e85610ff9565b604052919050565b60006001600160401b03821115610ea657610ea6610ff9565b5060051b60200190565b60008219821115610ec357610ec3610fcd565b500190565b600060ff821660ff84168060ff03821115610ee557610ee5610fcd565b019392505050565b600082610efc57610efc610fe3565b500490565b6000816000190483118215151615610f1b57610f1b610fcd565b500290565b600082821015610f3257610f32610fcd565b500390565b60005b83811015610f52578181015183820152602001610f3a565b83811115610f61576000848401525b50505050565b600081610f7657610f76610fcd565b506000190190565b6000600019821415610f9257610f92610fcd565b5060010190565b600060ff821660ff811415610fb057610fb0610fcd565b60010192915050565b600082610fc857610fc8610fe3565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea26469706673582212200bfc75c2e65e56fc249f3e52975bcd03d60e773721b24e6a5f3bd8eb515ab57164736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}