{
  "address": "0xeBdE9e7F12449e043502227b9D7EBDe55A809925",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_collection",
          "type": "bytes"
        },
        {
          "internalType": "bytes[]",
          "name": "_items",
          "type": "bytes[]"
        },
        {
          "internalType": "address",
          "name": "_resolver",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "seed",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "nuggify",
      "outputs": [
        {
          "internalType": "string",
          "name": "image",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe1595259311c54a234f0bd0e14de04bbe8b79ab7b1aa58ba84cc4dd17e42fd29",
  "receipt": {
    "to": null,
    "from": "0xB666C13b621568FeC210724DF161604adccfA257",
    "contractAddress": "0xeBdE9e7F12449e043502227b9D7EBDe55A809925",
    "transactionIndex": 7,
    "gasUsed": "4295051",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x1846fd20f223d16af9c5a0790466220ac32f6214bc3552b67ba553c96c1a571b",
    "transactionHash": "0xe1595259311c54a234f0bd0e14de04bbe8b79ab7b1aa58ba84cc4dd17e42fd29",
    "logs": [],
    "blockNumber": 11433092,
    "cumulativeGasUsed": "7280813",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "90f288ce3a0251461453e654dcf5b24f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_collection\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"_items\",\"type\":\"bytes[]\"},{\"internalType\":\"address\",\"name\":\"_resolver\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"seed\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"nuggify\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Nugg Labs - @danny7even & @dub6ix\",\"details\":\"hold my margarita\",\"kind\":\"dev\",\"methods\":{},\"title\":\"DotNugg V1 - onchain encoder/decoder for dotnugg files\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"yoU CAN'T HaVe ImAgES oN THe BlOCkcHAIn\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DotNugg.sol\":\"DotNugg\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"contracts/DotNugg.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport './logic/Decoder.sol';\\nimport './logic/Calculator.sol';\\n\\nimport './libraries/Base64.sol';\\nimport './interfaces/IDotNugg.sol';\\nimport './interfaces/INuggIn.sol';\\n\\n/**\\n * @title DotNugg V1 - onchain encoder/decoder for dotnugg files\\n * @author Nugg Labs - @danny7even & @dub6ix\\n * @notice yoU CAN'T HaVe ImAgES oN THe BlOCkcHAIn\\n * @dev hold my margarita\\n */\\ncontract DotNugg is IDotNugg {\\n    using Calculator for IDotNugg.Collection;\\n    using Bytes for bytes;\\n    using Uint256 for uint256;\\n\\n    function nuggify(\\n        bytes memory _collection,\\n        bytes[] memory _items,\\n        address _resolver,\\n        string memory name,\\n        string memory,\\n        uint256 tokenId,\\n        bytes32 seed,\\n        bytes memory data\\n    ) public view override returns (string memory image) {\\n        IFileResolver fileResolver = IFileResolver(_resolver);\\n        IColorResolver colorResolver = IColorResolver(_resolver);\\n\\n        require(fileResolver.supportsInterface(type(IFileResolver).interfaceId), 'NUG:TURI:2');\\n\\n        IDotNugg.Collection memory collection = Decoder.parseCollection(_collection);\\n\\n        bytes[] memory selected = new bytes[](collection.numFeatures);\\n\\n        for (uint256 i = 0; i < _items.length; i++) {\\n            selected[Decoder.parseItemFeatureId(_items[i])] = _items[i];\\n        }\\n\\n        for (uint256 i = 0; i < collection.defaults.length; i++) {\\n            uint8 featureId = Decoder.parseItemFeatureId(collection.defaults[i]);\\n            if (selected[featureId].length == 0) {\\n                selected[featureId] = collection.defaults[i];\\n            }\\n        }\\n\\n        IDotNugg.Matrix memory matrix = collection.combine(selected);\\n\\n        if (colorResolver.supportsInterface(type(IColorResolver).interfaceId)) {\\n            colorResolver.resolveColor(matrix, data);\\n        }\\n        (bytes memory fileData, string memory fileType) = fileResolver.resolveFile(matrix, data);\\n\\n        image = Base64.encode(\\n            bytes(\\n                abi.encodePacked(\\n                    '{\\\"name\\\":\\\"',\\n                    name,\\n                    '\\\",\\\"tokenId\\\":\\\"',\\n                    tokenId.toString(),\\n                    '\\\",\\\"description\\\":\\\"',\\n                    uint256(seed).toString(),\\n                    '\\\", \\\"image\\\": \\\"',\\n                    Base64.encode(fileData, fileType),\\n                    '\\\"}'\\n                )\\n            ),\\n            'json'\\n        );\\n        //   image = fileData.toAscii();\\n    }\\n}\\n\",\"keccak256\":\"0xdb84672bc0827f641d18a3b3c22e8ad177c7c4f807a37439a89e43469825e006\",\"license\":\"MIT\"},\"contracts/erc165/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x80ad8fd0a17bb32ad123b37e3a8fd331ddfa0ddf565028b62a8e67071cc1bb60\",\"license\":\"MIT\"},\"contracts/interfaces/IDotNugg.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.4;\\n\\ninterface IDotNugg {\\n    function nuggify(\\n        bytes memory _collection,\\n        bytes[] memory _items,\\n        address _resolver,\\n        string memory name,\\n        string memory description,\\n        uint256 tokenId,\\n        bytes32 seed,\\n        bytes memory data\\n    ) external view returns (string memory image);\\n\\n    struct Rlud {\\n        bool exists;\\n        uint8 r;\\n        uint8 l;\\n        uint8 u;\\n        uint8 d;\\n    }\\n\\n    struct Rgba {\\n        uint8 r;\\n        uint8 g;\\n        uint8 b;\\n        uint8 a;\\n    }\\n\\n    struct Anchor {\\n        Rlud radii;\\n        Coordinate coordinate;\\n    }\\n\\n    struct Coordinate {\\n        uint8 a; // anchorId\\n        uint8 b; // yoffset\\n        bool exists;\\n    }\\n\\n    struct Collection {\\n        uint8 width;\\n        uint8 height;\\n        uint8 numFeatures;\\n        bytes[] defaults;\\n    }\\n\\n    struct Item {\\n        uint8 feature;\\n        Pixel[] pallet;\\n        Version[] versions;\\n    }\\n\\n    struct Version {\\n        uint8 width;\\n        uint8 height;\\n        Anchor anchor;\\n        // these must be in same order as canvas receivers, respectively\\n        Coordinate[] calculatedReceivers; // can be empty\\n        Coordinate[] staticReceivers; // can be empty\\n        Rlud expanders;\\n        bytes data;\\n    }\\n\\n    struct Canvas {\\n        Matrix matrix;\\n        Anchor[] receivers;\\n    }\\n\\n    struct Mix {\\n        uint8 feature;\\n        Version version;\\n        Matrix matrix;\\n        Anchor[] receivers;\\n    }\\n\\n    struct Pixel {\\n        int8 zindex;\\n        Rgba rgba;\\n        bool exists;\\n    }\\n\\n    struct Pallet {\\n        Pixel[] pixels;\\n    }\\n\\n    struct Matrix {\\n        uint8 width;\\n        uint8 height;\\n        Pixel[][] data;\\n        uint8 currentUnsetX;\\n        uint8 currentUnsetY;\\n        bool init;\\n        uint8 startX;\\n    }\\n}\\n\",\"keccak256\":\"0x3bb49b7d80e114e7b4049f271c76058506aad4a147fab69e43b5cd4fdcf88a05\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/INuggIn.sol\":{\"content\":\"pragma solidity 0.8.4;\\n\\nimport '../erc165/IERC165.sol';\\nimport './IDotNugg.sol';\\n\\ninterface IColorResolver is IERC165 {\\n    function resolveColor(IDotNugg.Matrix memory matrix, bytes memory data) external pure returns (bytes memory res);\\n\\n    function supportsInterface(bytes4 interfaceId) external view override returns (bool);\\n}\\n\\ninterface IFileResolver is IERC165 {\\n    function resolveFile(IDotNugg.Matrix memory matrix, bytes memory data) external view returns (bytes memory, string memory fileType);\\n\\n    function supportsInterface(bytes4 interfaceId) external view override returns (bool);\\n}\\n\",\"keccak256\":\"0xaacc620e878e4ad374f975c7e2969f0b5e01e70a2d1d73b26657b46e9451d11f\"},\"contracts/libraries/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\n/**\\n * @title Base64\\n * @author Nugg Labs - @danny7even & @dub6ix\\n * @notice library for encoding bytes into base64\\n */\\nlibrary Base64 {\\n    string internal constant _TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    string internal constant _BASE64_PREFIX_JSON = 'data:application/json;base64,';\\n    string internal constant _BASE64_PREFIX_DOTNUGG = 'data:image/dotnugg;base64,';\\n    string internal constant _BASE64_PREFIX_SVGs = 'data:image/svg+xml;base64,';\\n\\n    /**\\n     * @notice wrapper for _encode for svg data\\n     * @param data bytes to encode\\n     * @return base64 string representation of input bytes, prefixed with json base64 prefix\\n     */\\n    function encode(bytes memory data, string memory file) internal pure returns (string memory) {\\n        return string(abi.encodePacked('data:', file, ';base64,', _encode(data)));\\n    }\\n\\n    /**\\n     * @notice Encodes some bytes in base64\\n     * @param data bytes to encode\\n     * @return base64 string representation of input bytes\\n     * @dev Credit to Brecht Devos - <brecht@loopring.org> - under MIT license https://github.com/Brechtpd/base64/blob/main/base64.sol\\n     * @dev modified for solidity v8\\n     */\\n    function _encode(bytes memory data) private pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = _TABLE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {\\n\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                dataPtr := add(dataPtr, 3)\\n\\n                // read 3 bytes\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F)))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F)))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(6, input), 0x3F)))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore(resultPtr, shl(248, mload(add(tablePtr, and(input, 0x3F)))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n            }\\n            case 2 {\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x18b902fe9f7c7d2c7e195ef89ec76238ec65fc524133737723f5836596f8a6d7\",\"license\":\"MIT\"},\"contracts/libraries/Byte.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\n/**\\n * @dev Bytes1 operations.\\n */\\nlibrary Byte {\\n    bytes32 internal constant ALPHABET = '0123456789abcdef';\\n\\n    function toAscii(bytes1 value) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2);\\n        for (uint256 i = 2; i > 0; i--) {\\n            buffer[i - 1] = ALPHABET[uint8(value) & 0xf];\\n            value >>= 4;\\n        }\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x70187fc2acfa2c13f534f742ab38b7ca5036fdb069f8b4e1107ba5831944b362\",\"license\":\"MIT\"},\"contracts/libraries/Bytes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport './Byte.sol';\\n\\n/**\\n * @dev Bytes operations.\\n */\\nlibrary Bytes {\\n    using Byte for bytes1;\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1, 'toUint8_outOfBounds');\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint4(bytes memory _bytes, uint256 _start) internal pure returns (uint8, uint8) {\\n        uint8 tempUint = toUint8(_bytes, _start);\\n        return (tempUint >> 4, tempUint & 0xf);\\n    }\\n\\n    function toInt8(bytes memory _bytes, uint256 _start) internal pure returns (int8) {\\n        uint8 tempUint = toUint8(_bytes, _start);\\n        return (int8(~tempUint) + 1) * -1;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, 'toUint16_outOfBounds');\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, 'toUint64_outOfBounds');\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toAscii(bytes memory val) internal pure returns (string memory res) {\\n        for (uint8 i = 0; i < val.length; i++) {\\n            res = string(abi.encodePacked(res, val[i].toAscii()));\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x875014d8021ba67e7beec7e2ef5bcb5bb939b93bce28ee900c0c3c828b376ded\",\"license\":\"MIT\"},\"contracts/libraries/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\nlibrary BytesLib {\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    ) internal pure returns (bytes memory) {\\n        require(_length + 31 >= _length, 'slice_overflow');\\n        require(_bytes.length >= _start + _length, 'slice_outOfBounds');\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                    // the next line is the loop condition:\\n                    // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\",\"keccak256\":\"0xc69ad5f6b801c2435196435ad07b8a1b43a97433d2ffd27d42361e08cada8a02\",\"license\":\"Unlicense\"},\"contracts/libraries/Checksum.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\n/**\\n * @dev Bytes1 operations.\\n */\\n\\nlibrary Checksum {\\n    function fletcher16(bytes memory data) internal pure returns (uint16 res) {\\n        uint16 sum1 = 0;\\n        uint16 sum2 = 0;\\n        for (uint256 index = 0; index < data.length; index++) {\\n            sum1 = (sum1 + uint8(data[index])) % 255;\\n            sum2 = (sum2 + sum1) % 255;\\n        }\\n\\n        res = (sum2 << 8) | sum1;\\n    }\\n}\\n\",\"keccak256\":\"0xa30ad41fddc1055a017c5078d077e46b70a48a75df0270004936d05ab4eb0c7f\",\"license\":\"MIT\"},\"contracts/libraries/Uint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\n/*\\n * @dev Uint operations.\\n */\\nlibrary Uint8 {\\n    function toByte(uint8 u) internal pure returns (bytes1 res) {\\n        res = bytes1(u);\\n    }\\n\\n    function toString(uint8 u) internal pure returns (string memory res) {\\n        res = Uint256.toString(uint256(u));\\n    }\\n}\\n\\n/*\\n * @dev Uint operations.\\n */\\nlibrary Uint256 {\\n    bytes16 private constant _HEX_SYMBOLS = '0123456789abcdef';\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return '0';\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0x00';\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = '0';\\n        buffer[1] = 'x';\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, 'Strings: hex length insufficient');\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xfa26c3fb5f7d48a24967b53795836c403b999c0cb7a396392e1545dab19879e4\",\"license\":\"MIT\"},\"contracts/logic/Anchor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '../interfaces/IDotNugg.sol';\\nimport './Matrix.sol';\\nimport '../test/Console.sol';\\n\\nlibrary Anchor {\\n    using Matrix for IDotNugg.Matrix;\\n\\n    /*\\n     * @notice AKA fuck\\n     * @dev this is where we implement the logic you wrote in go\\n     */\\n\\n    function convertReceiversToAnchors(IDotNugg.Mix memory mix) internal view {\\n        IDotNugg.Coordinate[] memory anchors;\\n        uint8 stat = 0;\\n        uint8 cal = 0;\\n\\n        for (uint8 i = 0; i < mix.version.calculatedReceivers.length; i++) {\\n            IDotNugg.Coordinate memory coordinate;\\n            if (mix.version.staticReceivers[i].exists) {\\n                stat++;\\n                coordinate = mix.version.staticReceivers[i];\\n            } else if (mix.version.calculatedReceivers[i].exists) {\\n                cal++;\\n                if (anchors.length == 0) anchors = getAnchors(mix.matrix);\\n                coordinate = calculateReceiverCoordinate(mix, mix.version.calculatedReceivers[i], anchors);\\n                fledgeOutTheRluds(mix, coordinate, i);\\n            }\\n        }\\n\\n\\n\\n    }\\n\\n    // receiver := { feature: EYES, zindex: 2, yoffset: +2 }\\n    // receiver := { feature: EARS, zindex: 2, yoffset: +2 }\\n    // receiver := { feature: GLASSES, zindex: 2, yoffset: +2 }\\n    // receiver := { feature: MOUTH, zindex: 3, yoffset: +0 }\\n    // receiver := { feature: HAIR, zindex: 1, yoffset: +1 }\\n    // receiver := { feature: SAUCE, zindex: 4, yoffset: +0 }\\n    // receiver := { feature: HAT, zindex: 1, yoffset: +1 }\\n    // receiver := { feature: SPECIAL, zindex: 0, yoffset: +0 }\\n\\n    function fledgeOutTheRluds(\\n        IDotNugg.Mix memory mix,\\n        IDotNugg.Coordinate memory coordinate,\\n        uint8 index\\n    ) internal view {\\n        IDotNugg.Rlud memory radii;\\n        while (coordinate.a < mix.matrix.width - 1 && mix.matrix.data[coordinate.b][coordinate.a + (radii.r + 1)].exists) {\\n            radii.r++;\\n        }\\n        while (coordinate.a != 0 && mix.matrix.data[coordinate.b][coordinate.a - (radii.l + 1)].exists) {\\n            radii.l++;\\n        }\\n        while (coordinate.b != 0 && mix.matrix.data[coordinate.b - (radii.u + 1)][coordinate.a].exists) {\\n            radii.u++;\\n        }\\n        while (coordinate.b < mix.matrix.height - 1 && mix.matrix.data[coordinate.b + (radii.d + 1)][coordinate.a].exists) {\\n            radii.d++;\\n        }\\n\\n        if (!mix.receivers[index].coordinate.exists) {\\n            mix.receivers[index] = IDotNugg.Anchor({radii: radii, coordinate: coordinate});\\n        }\\n\\n\\n\\n\\n    }\\n\\n    function calculateReceiverCoordinate(\\n        IDotNugg.Mix memory mix,\\n        IDotNugg.Coordinate memory calculatedReceiver,\\n        IDotNugg.Coordinate[] memory anchors\\n    ) internal view returns (IDotNugg.Coordinate memory coordinate) {\\n        coordinate.a = anchors[calculatedReceiver.a].a;\\n        coordinate.b = anchors[calculatedReceiver.a].b;\\n        coordinate.exists = true;\\n\\n        if (calculatedReceiver.b < 8) {\\n            coordinate.b = coordinate.b - calculatedReceiver.b;\\n        } else {\\n            coordinate.b = coordinate.b + (8 - calculatedReceiver.b);\\n        }\\n\\n        while (!mix.matrix.data[coordinate.b][coordinate.a].exists) {\\n            if (anchors[0].b > coordinate.b) {\\n                coordinate.b++;\\n            } else {\\n                coordinate.b--;\\n            }\\n        }\\n        return coordinate;\\n    }\\n\\n    function getAnchors(IDotNugg.Matrix memory matrix) internal view returns (IDotNugg.Coordinate[] memory anchors) {\\n        (uint8 topOffset, uint8 bottomOffset, IDotNugg.Coordinate memory center) = getBox(matrix);\\n\\n        anchors = new IDotNugg.Coordinate[](5);\\n\\n        anchors[0] = center; // center\\n\\n        anchors[1] = IDotNugg.Coordinate({a: center.a, b: center.b - topOffset, exists: true}); // top\\n\\n        uint8 upperOffset = topOffset;\\n        if (upperOffset % 2 != 0) {\\n            upperOffset++;\\n        }\\n        anchors[2] = IDotNugg.Coordinate({a: center.a, b: center.b - (upperOffset / 2), exists: true}); // inner top\\n\\n        uint8 lowerOffset = bottomOffset;\\n        if (lowerOffset % 2 != 0) {\\n            lowerOffset++;\\n        }\\n        anchors[3] = IDotNugg.Coordinate({a: center.a, b: center.b + (lowerOffset / 2), exists: true}); // inner bottom\\n\\n        anchors[4] = IDotNugg.Coordinate({a: center.a, b: center.b + bottomOffset, exists: true}); // inner bottom\\n    }\\n\\n    function getBox(IDotNugg.Matrix memory matrix)\\n        internal\\n        view\\n        returns (\\n            uint8 topOffset,\\n            uint8 bottomOffset,\\n            IDotNugg.Coordinate memory center\\n        )\\n    {\\n        center.a = (matrix.width) / 2;\\n        center.b = (matrix.height) / 2;\\n        center.exists = true;\\n\\n        bool topFound = false;\\n        bool bottomFound = false;\\n        bool sideFound = false;\\n        bool shouldExpandSide = true;\\n\\n        topOffset = 1;\\n        bottomOffset = 1;\\n        uint8 sideOffset = 1;\\n\\n        bool allFound = false;\\n\\n        while (!allFound) {\\n            if (shouldExpandSide = !shouldExpandSide && !sideFound) {\\n                if (\\n                    matrix.data[center.b - topOffset][center.a - (sideOffset + 1)].exists && // potential top left\\n                    matrix.data[center.b - topOffset][center.a + (sideOffset + 1)].exists && // potential top right\\n                    matrix.data[center.b + bottomOffset][center.a - (sideOffset + 1)].exists && // potential bot left\\n                    matrix.data[center.b + bottomOffset][center.a + (sideOffset + 1)].exists // potential bot right\\n                ) {\\n                    sideOffset++;\\n                } else {\\n                    sideFound = true;\\n                }\\n            }\\n            if (!topFound) {\\n                if (\\n                    center.b - topOffset > 0 &&\\n                    matrix.data[center.b - (topOffset + 1)][center.a - sideOffset].exists && // potential top left\\n                    matrix.data[center.b - (topOffset + 1)][center.a + sideOffset].exists // potential top right\\n                ) {\\n                    topOffset++;\\n                } else {\\n                    topFound = true;\\n                }\\n            }\\n            if (!bottomFound) {\\n                if (\\n                    center.b + bottomOffset < matrix.height - 1 &&\\n                    matrix.data[center.b + (bottomOffset + 1)][center.a - sideOffset].exists && // potential bot left\\n                    matrix.data[center.b + (bottomOffset + 1)][center.a + sideOffset].exists // potenetial bot right\\n                ) {\\n                    bottomOffset++;\\n                } else {\\n                    bottomFound = true;\\n                }\\n            }\\n            if (bottomFound && topFound && sideFound) allFound = true;\\n        }\\n\\n        if (topOffset != bottomOffset) {\\n            uint8 newHeight = topOffset + bottomOffset + 1;\\n            uint8 relativeCenter = (newHeight % 2 == 0 ? newHeight : newHeight + 1) / 2;\\n            uint8 newCenter = relativeCenter + center.b - 1 - topOffset;\\n            if (newCenter > center.b) {\\n                uint8 diff = newCenter - center.b;\\n                topOffset += diff;\\n                bottomOffset > diff ? bottomOffset = bottomOffset - diff : bottomOffset = diff - bottomOffset;\\n            } else {\\n                uint8 diff = center.b - newCenter;\\n                topOffset > diff ? topOffset = topOffset - diff : topOffset = diff - topOffset;\\n                bottomOffset += diff;\\n            }\\n            center.b = newCenter;\\n        }\\n    }\\n}\\n// Whatcha gonna do with all that junk\\n// All that junk inside your trunk\\n// I'ma get get get get you drunk\\n// Get you love drunk off my hump\\n// My hump my hump my hump my hump my hump\\n// My hump my hump my hump my lovely little lumps\\n// Check it out\\n// I drive these brothers crazy\\n// I do it on the daily\\n// They treat me really nicely\\n// They buy me all these ice\\n// Dolce and Gabbana\\n// Fendi and Madonna\\n// Caring they be sharin'\\n// All their money got me wearing fly\\n// Whether I ain't askin'\\n// They say they love mah ass in\\n// Seven jeans\\n// True religion\\n// I say no\\n// But they keep givin'\\n// So I keep on takin'\\n// And no I ain't takin'\\n// We can keep on datin'\\n// Now keep on demonstratin'\\n// My love my love my love my love\\n// You love my lady lumps\\n// My hump my hump my hump\\n// My humps they got you\\n// She's got me spending\\n// Oh, spending all your money on me\\n// And spending time on me\\n// She's got me spending\\n// Oh, spending all your money on me\\n// Uh on me on me\\n// Whatcha gonna do with all that junk\\n// All that junk inside that trunk\\n// I'm a get get get get you drunk\\n// Get you love drunk off my hump\\n// Whatcha gonna do with all that ass\\n// All that ass inside your jeans\\n// I'm a make make make make you scream\\n// Make you scream make you scream\\n// 'Cause of my humps my hump my hump my hump\\n// My hump my hump my hump my lovely lady lumps\\n// Check it out\\n// I met a girl down at the disco\\n// She said hey hey hey ya lets go\\n// I can be ya baby, you could be my honey\\n// Let's spend time not money\\n// And mix your milk with my coco puff\\n// Milky milky coco\\n// Mix your milk with my coco puff\\n// Milky milky\\n// Right\\n// They say I'm really sexy\\n// The boys they wanna sex me\\n// They always standin' next to me\\n// Always dancin' next to me\\n// Tryin' a feel my hump hump\\n// Lookin' at my lump lump\\n// You can look but you can't touch it\\n// If you touch it\\n// I'm a start some drama\\n// You don't want no drama\\n// No no drama no no no no drama\\n// So don't pull on my hand boy\\n// You ain't my man boy\\n// I'm just tryin' a dance boy\\n// And move my hump\\n// My hump my hump my hump my hump\\n// My hump my hump my hump my hump my hump my hump\\n// My lovely lady lumps\\n// My lovely lady lumps my lovely lady lumps\\n// In the back and in the front\\n// My loving got you\\n// She's got me spending\\n// Oh, spending all your money on me\\n// And spending time on me\\n// She's got me spending\\n// Oh, spending all your money on me\\n// Uh on me on me\\n// Whatcha gonna do with all that junk\\n// All that junk inside that trunk\\n// I'm a get get get get you drunk\\n// Get you love drunk off my hump\\n// Whatcha gonna do with all that ass\\n// All that ass inside your jeans\\n// I'm a make make make make you scream\\n// Make you scream make you scream\\n// Whatcha gonna do with all that junk\\n// All that junk inside that trunk\\n// I'm a get get get get you drunk\\n// Get you love drunk off this hump\\n// Whatcha gonna do with all that breast\\n// All that breast inside that shirt\\n// I'm a make make make make you work\\n// Make you work work make you work\\n// She's got me spending\\n// Oh, spending all your money on me\\n// And spending time on me\\n// She's got me spending\\n// Oh, spending all your money on me\\n// Uh on me on me\\n\",\"keccak256\":\"0x09ce679a61fd47d466fd9dde196823570dd235bba7ac5716c9c3d8a90a1d1a4d\",\"license\":\"MIT\"},\"contracts/logic/Calculator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport './Matrix.sol';\\nimport './Decoder.sol';\\nimport './Rgba.sol';\\nimport './Anchor.sol';\\n\\nimport '../interfaces/IDotNugg.sol';\\n\\nlibrary Calculator {\\n    using Rgba for IDotNugg.Rgba;\\n    using Matrix for IDotNugg.Matrix;\\n\\n    /**\\n     * @notice\\n     * @dev\\n     */\\n    function combine(IDotNugg.Collection memory collection, bytes[] memory inputs) internal view returns (IDotNugg.Matrix memory resa) {\\n        IDotNugg.Canvas memory canvas;\\n        canvas.matrix = Matrix.create(collection.width, collection.height);\\n        canvas.receivers = new IDotNugg.Anchor[](collection.numFeatures);\\n        IDotNugg.Coordinate memory coord;\\n        coord.a = collection.width / 2;\\n        coord.b = collection.width / 2;\\n        coord.exists = true;\\n        IDotNugg.Rlud memory r;\\n        for (uint8 i = 0; i < collection.numFeatures; i++) {\\n            canvas.receivers[i] = IDotNugg.Anchor({coordinate: coord, radii: r});\\n        }\\n        canvas.matrix.width = collection.width;\\n        canvas.matrix.height = collection.height;\\n\\n        IDotNugg.Mix memory mix;\\n        mix.matrix = Matrix.create(collection.width, collection.height);\\n        mix.receivers = new IDotNugg.Anchor[](collection.numFeatures);\\n\\n        IDotNugg.Item[] memory items = Decoder.parseItems(inputs, collection.numFeatures);\\n\\n        for (uint8 i = 0; i < items.length; i++) {\\n            if (items[i].versions.length > 0) {\\n\\n                setMix(mix, items[i], pickVersionIndex(canvas, items[i]));\\n\\n                formatForCanvas(canvas, mix);\\n\\n                postionForCanvas(canvas, mix);\\n\\n                mergeToCanvas(canvas, mix);\\n\\n                calculateReceivers(mix);\\n\\n                updateReceivers(canvas, mix);\\n\\n            }\\n        }\\n\\n        return canvas.matrix;\\n    }\\n\\n    /**\\n     * @notice\\n     * @devg\\n     */\\n    function postionForCanvas(IDotNugg.Canvas memory canvas, IDotNugg.Mix memory mix) internal view {\\n        IDotNugg.Anchor memory receiver = canvas.receivers[mix.feature];\\n        IDotNugg.Anchor memory anchor = mix.version.anchor;\\n\\n        uint8 xoffset = receiver.coordinate.a - anchor.coordinate.a;\\n        uint8 yoffset = receiver.coordinate.b - anchor.coordinate.b;\\n\\n        canvas.matrix.moveTo(xoffset, yoffset, mix.matrix.width, mix.matrix.height);\\n    }\\n\\n    /**\\n     * @notice\\n     * @dev\\n     */\\n    function formatForCanvas(IDotNugg.Canvas memory canvas, IDotNugg.Mix memory mix) internal view {\\n        IDotNugg.Anchor memory receiver = canvas.receivers[mix.feature];\\n        IDotNugg.Anchor memory anchor = mix.version.anchor;\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n        if (mix.version.expanders.l != 0 && anchor.radii.l != 0 && anchor.radii.l <= receiver.radii.l) {\\n            uint8 amount = receiver.radii.l - anchor.radii.l;\\n            mix.matrix.addColumnsAt(mix.version.expanders.l - 1, amount);\\n            anchor.coordinate.a += amount;\\n            if (mix.version.expanders.r > 0) mix.version.expanders.r += amount;\\n        }\\n        if (mix.version.expanders.r != 0 && anchor.radii.r != 0 && anchor.radii.r <= receiver.radii.r) {\\n            mix.matrix.addColumnsAt(mix.version.expanders.r - 1, receiver.radii.r - anchor.radii.r);\\n        }\\n        if (mix.version.expanders.d != 0 && anchor.radii.d != 0 && anchor.radii.d <= receiver.radii.d) {\\n            uint8 amount = receiver.radii.d - anchor.radii.d;\\n            mix.matrix.addRowsAt(mix.version.expanders.d, amount);\\n            anchor.coordinate.b += amount;\\n            if (mix.version.expanders.u > 0) mix.version.expanders.u += amount;\\n        }\\n        if (mix.version.expanders.u != 0 && anchor.radii.u != 0 && anchor.radii.u <= receiver.radii.u) {\\n            mix.matrix.addRowsAt(mix.version.expanders.u, receiver.radii.u - anchor.radii.u);\\n        }\\n\\n\\n\\n    }\\n\\n    /**\\n     * @notice\\n     * @dev\\n     * makes the sorts versions\\n     */\\n    function pickVersionIndex(IDotNugg.Canvas memory canvas, IDotNugg.Item memory item) internal view returns (uint8) {\\n        require(item.versions.length > 0, 'CALC:PVI:0');\\n        if (item.versions.length == 1) {\\n            return 0;\\n        }\\n        uint8 index = uint8(item.versions.length) - 1;\\n\\n        while (index > 0) {\\n            if (checkRluds(item.versions[index].anchor.radii, canvas.receivers[item.feature].radii)) {\\n                return index;\\n            }\\n            index = index - 1;\\n        }\\n\\n        return 0;\\n    }\\n\\n    function checkRluds(IDotNugg.Rlud memory r1, IDotNugg.Rlud memory r2) internal view returns (bool) {\\n        return (r1.r <= r2.r && r1.l <= r2.l) || (r1.u <= r2.u && r1.d <= r2.d);\\n    }\\n\\n    /**\\n     * @notice\\n     * @dev done\\n     * makes the sorts versions\\n     */\\n    function setMix(\\n        IDotNugg.Mix memory res,\\n        IDotNugg.Item memory item,\\n        uint8 versionIndex\\n    ) internal view {\\n        res.version = item.versions[versionIndex];\\n        res.feature = item.feature;\\n        res.receivers = new IDotNugg.Anchor[](res.receivers.length);\\n\\n        res.matrix.set(res.version.data, item.pallet, res.version.width, res.version.height);\\n    }\\n\\n    /**\\n     * @notice done\\n     * @dev\\n     */\\n    function updateReceivers(IDotNugg.Canvas memory canvas, IDotNugg.Mix memory mix) internal view {\\n        for (uint8 i = 0; i < mix.receivers.length; i++) {\\n            IDotNugg.Anchor memory m = mix.receivers[i];\\n            if (m.coordinate.exists) {\\n                canvas.receivers[i] = m;\\n            }\\n        }\\n        // for (uint8 i = 0 ; i < canvas.receivers.length; i++) {\\n\\n\\n\\n        // }\\n    }\\n\\n    /**\\n     * @notice done\\n     * @dev\\n     */\\n    function mergeToCanvas(IDotNugg.Canvas memory canvas, IDotNugg.Mix memory mix) internal view {\\n        while (canvas.matrix.next() && mix.matrix.next()) {\\n            IDotNugg.Pixel memory canvasPixel = canvas.matrix.current();\\n            IDotNugg.Pixel memory mixPixel = mix.matrix.current();\\n\\n\\n\\n\\n            if (mixPixel.exists && mixPixel.zindex >= canvasPixel.zindex) {\\n                canvasPixel.zindex = mixPixel.zindex;\\n\\n\\n\\n\\n\\n                canvasPixel.rgba.combine(mixPixel.rgba);\\n\\n\\n\\n            }\\n        }\\n        canvas.matrix.moveBack();\\n        canvas.matrix.resetIterator();\\n        mix.matrix.resetIterator();\\n    }\\n\\n    /**\\n     * @notice poop\\n     * @dev\\n     */\\n    function calculateReceivers(IDotNugg.Mix memory mix) internal view {\\n        Anchor.convertReceiversToAnchors(mix);\\n    }\\n\\n    // you combine one by one, and as you combine, child refs get overridden\\n\\n    // function add(Combinable comb, )\\n}\\n// add parent refs, if any - will use ***REMOVED***s algo only for the canvas\\n// the canvas will always be defined as the first, so if it isnt (will not happen for dotnugg), we define the center as all the child refs\\n//  pick best version\\n// figure out offset\\n\\n// function merge(Canvas memory canvas, Matrix memory versionMatrix) internal view {\\n//     for (int8 y = (canvas.matrix.data.length / 2) * -1; y <= canvas.matrix.data.length / 2; y++) {\\n//         for (int8 x = (canvas.matrix.width / 2) * -1; x <= canvas.matrix[j].width / 2; x++) {\\n//             Pixel memory canvas = canvas.matrix.at(x, y);\\n//             Pixel memory addr = combinable.matrix.at(x, y);\\n\\n//             if (addr != 0 && addr.layer > canvas.layer) {\\n//                 canvas.layer = addr.layer;\\n//                 canvas.rgba = Colors.combine(canvas.rgba, add.rgba);\\n//             }\\n//         }\\n//     }\\n// }\\n// Oh my god\\n// Becky, look at her butt\\n// Its so big\\n// She looks like one of those rap guys girlfriends\\n// Who understands those rap guys\\n// They only talk to her because she looks like a total prostitute\\n// I mean her butt\\n// It's just so big\\n// I can't believe it's so round\\n// It's just out there\\n// I mean, it's gross\\n// Look, she's just so black\\n\\n// *rap*\\n// I like big butts and I can not lie\\n// You other brothers can't deny\\n// That when a girl walks in with an itty bitty waist\\n// And a round thing in your face\\n// You get sprung\\n// Wanna pull up tough\\n// Cuz you notice that butt was stuffed\\n// Deep in the jeans she's wearing\\n// I'm hooked and I can't stop staring\\n// Oh, baby I wanna get with ya\\n// And take your picture\\n// My homeboys tried to warn me\\n// But that butt you got\\n// Make Me so horney\\n// Ooh, rump of smooth skin\\n// You say you wanna get in my benz\\n// Well use me use me cuz you aint that average groupy\\n\\n// I've seen them dancin'\\n// The hell with romancin'\\n// She's Sweat,Wet, got it goin like a turbo vette\\n\\n// I'm tired of magazines\\n// Saying flat butts are the thing\\n// Take the average black man and ask him that\\n// She gotta pack much back\\n\\n// So Fellas (yeah) Fellas(yeah)\\n// Has your girlfriend got the butt (hell yeah)\\n// Well shake it, shake it, shake it, shake it, shake that healthy butt\\n// Baby got back\\n\\n// (LA face with Oakland booty)\\n\\n// I like'em round and big\\n// And when I'm throwin a gig\\n// I just can't help myself\\n// I'm actin like an animal\\n// Now here's my scandal\\n\\n// I wanna get you home\\n// And UH, double up UH UH\\n// I aint talkin bout playboy\\n// Cuz silicone parts were made for toys\\n// I wannem real thick and juicy\\n// So find that juicy double\\n// Mixalot's in trouble\\n// Beggin for a piece of that bubble\\n// So I'm lookin' at rock videos\\n// Knockin these bimbos walkin like hoes\\n// You can have them bimbos\\n// I'll keep my women like Flo Jo\\n// A word to the thick soul sistas\\n// I wanna get with ya\\n// I won't cus or hit ya\\n// But I gotta be straight when I say I wanna --\\n// Til the break of dawn\\n// Baby Got it goin on\\n// Alot of pimps won't like this song\\n// Cuz them punks lie to hit it and quit it\\n// But I'd rather stay and play\\n// Cuz I'm long and I'm strong\\n// And I'm down to get the friction on\\n\\n// So ladies (yeah), Ladies (yeah)\\n// Do you wanna roll in my Mercedes (yeah)\\n// Then turn around\\n// Stick it out\\n// Even white boys got to shout\\n// Baby got back\\n\\n// (LA face with the Oakland booty)\\n\\n// Yeah baby\\n// When it comes to females\\n// Cosmo ain't got nothin to do with my selection\\n// 36-24-36\\n// Only if she's 5'3\\\"\\n\\n// So your girlfriend throws a Honda\\n// Playin workout tapes by Fonda\\n// But Fonda ain't got a motor in the back of her Honda\\n// My anaconda don't want none unless you've got buns hun\\n// You can do side bends or sit-ups, but please don't lose that butt\\n// Some brothers wanna play that hard role\\n// And tell you that the butt ain't gold\\n// So they toss it and leave it\\n// And I pull up quick to retrieve it\\n// So cosmo says you're fat\\n// Well I ain't down with that\\n// Cuz your waste is small and your curves are kickin\\n// And I'm thinkin bout stickin\\n// To the beanpole dames in the magazines\\n// You aint it miss thing\\n// Give me a sista I can't resist her\\n// Red beans and rice did miss her\\n// Some knucklehead tried to dis\\n// Cuz his girls were on my list\\n// He had game but he chose to hit 'em\\n// And pulled up quick to get with 'em\\n// So ladies if the butt is round\\n// And you wanna triple X throw down\\n// Dial 1-900-MIXALOT and kick them nasty thoughts\\n// Baby got back\\n// Baby got back\\n// Little in tha middle but she got much back x4\\n\",\"keccak256\":\"0x5094a28e3d09107604b5c1767c8b71edd6370c1d4584408ef9c68e4aaadd1293\",\"license\":\"MIT\"},\"contracts/logic/Decoder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '../interfaces/IDotNugg.sol';\\n\\nimport '../libraries/Bytes.sol';\\nimport '../libraries/BytesLib.sol';\\nimport '../libraries/Checksum.sol';\\nimport '../libraries/Uint.sol';\\nimport '../logic/Rgba.sol';\\n\\nimport '../test/Console.sol';\\n\\nlibrary Decoder {\\n    using Bytes for bytes;\\n    using Bytes for bytes;\\n\\n    using Checksum for bytes;\\n    using BytesLib for bytes;\\n\\n    using Uint256 for uint256;\\n    using Rgba for IDotNugg.Rgba;\\n\\n    // \\u250c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2510\\n    // \\u2502                                                              \\u2502\\n    // \\u2502           _____       _ _           _   _                    \\u2502\\n    // \\u2502          /  __ \\\\     | | |         | | (_)                   \\u2502\\n    // \\u2502          | /  \\\\/ ___ | | | ___  ___| |_ _  ___  _ __         \\u2502\\n    // \\u2502          | |    / _ \\\\| | |/ _ \\\\/ __| __| |/ _ \\\\| '_ \\\\        \\u2502\\n    // \\u2502          | \\\\__/\\\\ (_) | | |  __/ (__| |_| | (_) | | | |       \\u2502\\n    // \\u2502           \\\\____/\\\\___/|_|_|\\\\___|\\\\___|\\\\__|_|\\\\___/|_| |_|       \\u2502\\n    // \\u2502                                                              \\u2502\\n    // \\u2502   \\u250c\\u2500\\u2500\\u2500\\u2500\\u2500\\u252c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2510   \\u2502\\n    // \\u2502   \\u2502 0-6 \\u2502  \\\"DOTNUGG\\\" (7 bytes in ascii)                  \\u2502   \\u2502\\n    // \\u2502   \\u251c\\u2500\\u2500\\u2500\\u2500\\u2500\\u253c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2524   \\u2502\\n    // \\u2502   \\u2502  x  \\u2502  file type (0x01) - (1 byte)                   \\u2502   \\u2502\\n    // \\u2502   \\u251c\\u2500\\u2500\\u2500\\u2500\\u2500\\u253c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2524   \\u2502\\n    // \\u2502   \\u2502  7  \\u2502  width / height (1 byte because square)        \\u2502   \\u2502\\n    // \\u2502   \\u251c\\u2500\\u2500\\u2500\\u2500\\u2500\\u253c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2524   \\u2502\\n    // \\u2502   \\u2502  8  \\u2502  numFeatures (1 byte)                          \\u2502   \\u2502\\n    // \\u2502   \\u251c\\u2500\\u2500\\u2500\\u2500\\u2500\\u253c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2524   \\u2502\\n    // \\u2502   \\u25029-*  \\u2502  item data index array ([*][2]byte)            \\u2502   \\u2502\\n    // \\u2502   \\u251c\\u2500\\u2500\\u2500\\u2500\\u2500\\u253c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2524   \\u2502\\n    // \\u2502   \\u2502 *-* \\u2502  item array ([*][*]byte)                       \\u2502   \\u2502\\n    // \\u2502   \\u2514\\u2500\\u2500\\u2500\\u2500\\u2500\\u2534\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2518   \\u2502\\n    // \\u2502                                                              \\u2502\\n    // \\u2514\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2518\\n\\n    function parseCollection(bytes memory data) internal view returns (IDotNugg.Collection memory res) {\\n        res.width = data.toUint8(7);\\n        res.height = res.width;\\n\\n        res.numFeatures = data.toUint8(8);\\n        uint16 tmp = data.toUint16(9);\\n        uint16[] memory itemIndexs = new uint16[]((tmp - 9) / 2);\\n\\n        itemIndexs[0] = tmp;\\n        for (uint16 i = 1; i < itemIndexs.length; i++) {\\n            itemIndexs[i] = data.toUint16(9 + i * 2);\\n        }\\n\\n        res.defaults = new bytes[](itemIndexs.length);\\n\\n        for (uint16 i = 0; i < itemIndexs.length; i++) {\\n            uint256 endIndex = i + 1 == itemIndexs.length ? data.length : itemIndexs[i + 1];\\n            res.defaults[i] = data.slice(itemIndexs[i], endIndex - itemIndexs[i]);\\n        }\\n        return res;\\n    }\\n\\n    function parseItems(bytes[] memory data, uint8 featureLen) internal view returns (IDotNugg.Item[] memory res) {\\n        res = new IDotNugg.Item[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            if (data[i].length > 0) res[i] = parseItem(data[i], featureLen);\\n        }\\n    }\\n\\n    // \\u250c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2510\\n    // \\u2502                                                                   \\u2502\\n    // \\u2502                     _____ _                                       \\u2502\\n    // \\u2502                    |_   _| |                                      \\u2502\\n    // \\u2502                      | | | |_ ___ _ __ ___                        \\u2502\\n    // \\u2502                      | | | __/ _ \\\\ '_ ` _ \\\\                       \\u2502\\n    // \\u2502                     _| |_| ||  __/ | | | | |                      \\u2502\\n    // \\u2502                     \\\\___/ \\\\__\\\\___|_| |_| |_|                      \\u2502\\n    // \\u2502                                                                   \\u2502\\n    // \\u2502                                                                   \\u2502\\n    // \\u2502     \\u250c\\u2500\\u2500\\u2500\\u2500\\u2500\\u252c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2510      \\u2502\\n    // \\u2502     \\u2502 0-6 \\u2502  \\\"DOTNUGG\\\" (7 bytes in ascii)                  \\u2502      \\u2502\\n    // \\u2502     \\u251c\\u2500\\u2500\\u2500\\u2500\\u2500\\u253c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2524      \\u2502\\n    // \\u2502     \\u2502 7-8 \\u2502  checksum - (2 bytes)                          \\u2502      \\u2502\\n    // \\u2502     \\u251c\\u2500\\u2500\\u2500\\u2500\\u2500\\u253c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2524      \\u2502\\n    // \\u2502     \\u2502  9  \\u2502  feature key - (1 byte)                        \\u2502      \\u2502\\n    // \\u2502     \\u251c\\u2500\\u2500\\u2500\\u2500\\u2500\\u253c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2524      \\u2502\\n    // \\u2502     \\u250210-11\\u2502  colors array index from 0 (uint16)            \\u2502      \\u2502\\n    // \\u2502     \\u251c\\u2500\\u2500\\u2500\\u2500\\u2500\\u253c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2524      \\u2502\\n    // \\u2502     \\u250212-* \\u2502  version index array - ([*][2]byte)            \\u2502      \\u2502\\n    // \\u2502     \\u251c\\u2500\\u2500\\u2500\\u2500\\u2500\\u253c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2524      \\u2502\\n    // \\u2502     \\u2502 *-* \\u2502  color array - ([*][6]byte)                    \\u2502      \\u2502\\n    // \\u2502     \\u251c\\u2500\\u2500\\u2500\\u2500\\u2500\\u253c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2524      \\u2502\\n    // \\u2502     \\u2502 *-* \\u2502  version array ([*][*]byte)                    \\u2502      \\u2502\\n    // \\u2502     \\u2514\\u2500\\u2500\\u2500\\u2500\\u2500\\u2534\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2518      \\u2502\\n    // \\u2502                                                                   \\u2502\\n    // \\u2502                                                                   \\u2502\\n    // \\u2514\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2518\\n\\n    function validateItem(bytes memory data) internal view {\\n        require(data.length > 13, 'D:VI:0');\\n        require(data.slice(0, 7).equal(abi.encodePacked('DOTNUGG')), 'D:VI:1');\\n        require(data.slice(9, data.length - 9).fletcher16() == data.toUint16(7), 'D:VI:2');\\n    }\\n\\n    function parseItem(bytes memory data, uint8 featureLen) internal view returns (IDotNugg.Item memory res) {\\n        validateItem(data);\\n\\n        res.feature = parseItemFeatureId(data);\\n\\n        uint16 colorsIndex = data.toUint16(10);\\n        uint16[] memory versionsIndexz = new uint16[]((colorsIndex - 12) / 2);\\n\\n\\n        for (uint16 i = 0; i < versionsIndexz.length; i++) {\\n            versionsIndexz[i] = data.toUint16(12 + i * 2);\\n        }\\n\\n        res.pallet = new IDotNugg.Pixel[](1 + (versionsIndexz[0] - colorsIndex) / 5);\\n        res.versions = new IDotNugg.Version[](versionsIndexz.length);\\n\\n\\n        require(res.versions.length > 0, 'DEC:PI:0');\\n        res.pallet[0] = IDotNugg.Pixel({rgba: IDotNugg.Rgba({r: 1, g: 1, b: 1, a: 0}), zindex: 0, exists: false});\\n        for (uint16 i = 1; i < res.pallet.length; i++) {\\n            res.pallet[i] = parsePixel(data, colorsIndex + 5 * (i - 1));\\n\\n        }\\n\\n        for (uint16 i = 0; i < versionsIndexz.length; i++) {\\n            uint256 endIndex = i + 1 == versionsIndexz.length ? data.length : versionsIndexz[i + 1];\\n            res.versions[i] = parseVersion(data, versionsIndexz[i], uint16(endIndex), featureLen);\\n        }\\n    }\\n\\n    function parseItemFeatureId(bytes memory data) internal view returns (uint8 res) {\\n        res = uint8(data[9]);\\n    }\\n\\n    // \\u250c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2510\\n    // \\u2502                                                              \\u2502\\n    // \\u2502                                                              \\u2502\\n    // \\u2502                    ______ _          _                       \\u2502\\n    // \\u2502                    | ___ (_)        | |                      \\u2502\\n    // \\u2502                    | |_/ /___  _____| |                      \\u2502\\n    // \\u2502                    |  __/| \\\\ \\\\/ / _ \\\\ |                      \\u2502\\n    // \\u2502                    | |   | |>  <  __/ |                      \\u2502\\n    // \\u2502                    \\\\_|   |_/_/\\\\_\\\\___|_|                      \\u2502\\n    // \\u2502                                                              \\u2502\\n    // \\u2502                                                              \\u2502\\n    // \\u2502   \\u250c\\u2500\\u2500\\u2500\\u2500\\u2500\\u252c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2510   \\u2502\\n    // \\u2502   \\u2502  0  \\u2502  zindex (int8)                                 \\u2502   \\u2502\\n    // \\u2502   \\u251c\\u2500\\u2500\\u2500\\u2500\\u2500\\u253c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2524   \\u2502\\n    // \\u2502   \\u2502 1-4 \\u2502  rgba (4 bytes)                                \\u2502   \\u2502\\n    // \\u2502   \\u2514\\u2500\\u2500\\u2500\\u2500\\u2500\\u2534\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2518   \\u2502\\n    // \\u2502                                                              \\u2502\\n    // \\u2514\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2518\\n\\n    function parsePixel(bytes memory _bytes, uint256 _start) internal view returns (IDotNugg.Pixel memory res) {\\n        require(_bytes.length >= _start + 5, 'parsePixel_outOfBounds');\\n\\n\\n\\n        res.zindex = _bytes.toInt8(_start);\\n\\n\\n        res.rgba = parseRgba(_bytes, _start + 1);\\n        res.exists = true;\\n    }\\n\\n    // \\u250c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2510\\n    // \\u2502                                                              \\u2502\\n    // \\u2502                                                              \\u2502\\n    // \\u2502                    ______      _                             \\u2502\\n    // \\u2502                    | ___ \\\\    | |                            \\u2502\\n    // \\u2502                    | |_/ /__ _| |__   __ _                   \\u2502\\n    // \\u2502                    |    // _` | '_ \\\\ / _` |                  \\u2502\\n    // \\u2502                    | |\\\\ \\\\ (_| | |_) | (_| |                  \\u2502\\n    // \\u2502                    \\\\_| \\\\_\\\\__, |_.__/ \\\\__,_|                  \\u2502\\n    // \\u2502                           __/ |                              \\u2502\\n    // \\u2502                          |___/                               \\u2502\\n    // \\u2502                                                              \\u2502\\n    // \\u2502    \\u250c\\u2500\\u2500\\u2500\\u2500\\u2500\\u252c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2510     \\u2502\\n    // \\u2502    \\u2502  0  \\u2502  r (uint8)                                  \\u2502     \\u2502\\n    // \\u2502    \\u251c\\u2500\\u2500\\u2500\\u2500\\u2500\\u253c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2524     \\u2502\\n    // \\u2502    \\u2502  1  \\u2502  l (uint8)                                  \\u2502     \\u2502\\n    // \\u2502    \\u251c\\u2500\\u2500\\u2500\\u2500\\u2500\\u253c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2524     \\u2502\\n    // \\u2502    \\u2502  2  \\u2502  u (uint8)                                  \\u2502     \\u2502\\n    // \\u2502    \\u251c\\u2500\\u2500\\u2500\\u2500\\u2500\\u253c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2524     \\u2502\\n    // \\u2502    \\u2502  3  \\u2502  d (uint8)                                  \\u2502     \\u2502\\n    // \\u2502    \\u2514\\u2500\\u2500\\u2500\\u2500\\u2500\\u2534\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2518     \\u2502\\n    // \\u2502                                                              \\u2502\\n    // \\u2502                                                              \\u2502\\n    // \\u2514\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2518\\n\\n    function parseRgba(bytes memory _bytes, uint256 _start) internal view returns (IDotNugg.Rgba memory res) {\\n        require(_bytes.length >= _start + 4, 'parsePixel_outOfBounds');\\n        res.r = uint8(_bytes[_start + 0]);\\n        res.g = uint8(_bytes[_start + 1]);\\n        res.b = uint8(_bytes[_start + 2]);\\n        res.a = uint8(_bytes[_start + 3]);\\n    }\\n\\n    function parseRlud(bytes memory _bytes, uint256 _start) internal view returns (IDotNugg.Rlud memory res) {\\n        // require(_bytes.length >= _start + 5, 'parseRlud_outOfBounds');\\n        res.exists = bool(uint8(_bytes[_start + 0]) == 1);\\n        if (res.exists) {\\n            res.r = uint8(_bytes[_start + 1]);\\n            res.l = uint8(_bytes[_start + 2]);\\n            res.u = uint8(_bytes[_start + 3]);\\n            res.d = uint8(_bytes[_start + 4]);\\n        }\\n    }\\n\\n    // \\u250c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2510\\n    // \\u2502                                                              \\u2502\\n    // \\u2502                _   _               _                         \\u2502\\n    // \\u2502               | | | |             (_)                        \\u2502\\n    // \\u2502               | | | | ___ _ __ ___ _  ___  _ __              \\u2502\\n    // \\u2502               | | | |/ _ \\\\ '__/ __| |/ _ \\\\| '_ \\\\             \\u2502\\n    // \\u2502               \\\\ \\\\_/ /  __/ |  \\\\__ \\\\ | (_) | | | |            \\u2502\\n    // \\u2502                \\\\___/ \\\\___|_|  |___/_|\\\\___/|_| |_|            \\u2502\\n    // \\u2502                                                              \\u2502\\n    // \\u2502                                                              \\u2502\\n    // \\u2502   \\u250c\\u2500\\u2500\\u2500\\u2500\\u2500\\u252c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2510   \\u2502\\n    // \\u2502   \\u2502  0  \\u2502  width (1 bytes)                               \\u2502   \\u2502\\n    // \\u2502   \\u251c\\u2500\\u2500\\u2500\\u2500\\u2500\\u253c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2524   \\u2502\\n    // \\u2502   \\u2502 1-2 \\u2502  anchor (2 bytes)                              \\u2502   \\u2502\\n    // \\u2502   \\u251c\\u2500\\u2500\\u2500\\u2500\\u2500\\u253c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2524   \\u2502\\n    // \\u2502   \\u2502 3-7 \\u2502  expanders (2 bytes - rlud - 5 uint4s)         \\u2502   \\u2502\\n    // \\u2502   \\u251c\\u2500\\u2500\\u2500\\u2500\\u2500\\u253c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2524   \\u2502\\n    // \\u2502   \\u2502 8-6 \\u2502  radii (2 bytes - rlud - 5 uint4s)             \\u2502   \\u2502\\n    // \\u2502   \\u251c\\u2500\\u2500\\u2500\\u2500\\u2500\\u253c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2524   \\u2502\\n    // \\u2502   \\u2502  7  \\u2502  groups index  (uint8)                         \\u2502   \\u2502\\n    // \\u2502   \\u251c\\u2500\\u2500\\u2500\\u2500\\u2500\\u253c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2524   \\u2502\\n    // \\u2502   \\u2502 8-* \\u2502  receivers ([*][2] bytes)                      \\u2502   \\u2502\\n    // \\u2502   \\u251c\\u2500\\u2500\\u2500\\u2500\\u2500\\u253c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2524   \\u2502\\n    // \\u2502   \\u2502 *-* \\u2502  group array ([*][1]byte)                      \\u2502   \\u2502\\n    // \\u2502   \\u2514\\u2500\\u2500\\u2500\\u2500\\u2500\\u2534\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2518   \\u2502\\n    // \\u2502                                                              \\u2502\\n    // \\u2514\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2518\\n\\n    function parseVersion(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _end,\\n        uint8 featureLen\\n    ) internal view returns (IDotNugg.Version memory res) {\\n        require(_bytes.length >= _end && _start < _end, 'parsePixel_outOfBounds');\\n\\n\\n        res.calculatedReceivers = new IDotNugg.Coordinate[](featureLen);\\n        res.staticReceivers = new IDotNugg.Coordinate[](featureLen);\\n        uint256 addr = 0;\\n        res.width = _bytes.toUint8(_start + addr++);\\n        res.height = _bytes.toUint8(_start + addr++);\\n        res.anchor.coordinate.a = _bytes.toUint8(_start + addr++);\\n        res.anchor.coordinate.b = _bytes.toUint8(_start + addr++);\\n        res.expanders = parseRlud(_bytes, _start + addr++);\\n        if (res.expanders.exists) addr += 4;\\n        res.anchor.radii = parseRlud(_bytes, _start + addr++);\\n        if (res.anchor.radii.exists) addr += 4;\\n\\n\\n\\n\\n\\n\\n        uint16 groupsIndex = uint16(_start) + _bytes.toUint8(_start + addr++);\\n\\n        uint256 i = _start + addr++;\\n\\n\\n        for (; i < groupsIndex; i += 2) {\\n            (IDotNugg.Coordinate memory rec, uint8 feature, bool calculated) = parseReceiver(_bytes, i);\\n\\n\\n            if (calculated) {\\n                res.calculatedReceivers[feature] = rec;\\n            } else {\\n                //  require(feature < 16, String.fromUint256(i));\\n                res.staticReceivers[feature] = rec;\\n            }\\n        }\\n\\n        res.data = _bytes.slice(groupsIndex, _end - groupsIndex);\\n    }\\n\\n    // \\u250c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2510\\n    // \\u2502                                                            \\u2502\\n    // \\u2502             ______              _                          \\u2502\\n    // \\u2502             | ___ \\\\            (_)                         \\u2502\\n    // \\u2502             | |_/ /___  ___ ___ ___   _____ _ __           \\u2502\\n    // \\u2502             |    // _ \\\\/ __/ _ \\\\ \\\\ \\\\ / / _ \\\\ '__|          \\u2502\\n    // \\u2502             | |\\\\ \\\\  __/ (_|  __/ |\\\\ V /  __/ |             \\u2502\\n    // \\u2502             \\\\_| \\\\_\\\\___|\\\\___\\\\___|_| \\\\_/ \\\\___|_|             \\u2502\\n    // \\u2502                                                            \\u2502\\n    // \\u2502                                                            \\u2502\\n    // \\u2502  \\u250c\\u2500\\u2500\\u2500\\u2500\\u2500\\u252c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2510  \\u2502\\n    // \\u2502  \\u2502  0  \\u2502  preset | x (uint4) & yoffset | y (int4)       \\u2502  \\u2502\\n    // \\u2502  \\u251c\\u2500\\u2500\\u2500\\u2500\\u2500\\u253c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2524  \\u2502\\n    // \\u2502  \\u2502  1  \\u2502  type (1 byte)                                 \\u2502  \\u2502\\n    // \\u2502  \\u2514\\u2500\\u2500\\u2500\\u2500\\u2500\\u2534\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2518  \\u2502\\n    // \\u2502                                                            \\u2502\\n    // \\u2514\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2518\\n\\n    function parseReceiver(bytes memory _bytes, uint256 _start)\\n        internal\\n        view\\n        returns (\\n            IDotNugg.Coordinate memory res,\\n            uint8 feature,\\n            bool calculated\\n        )\\n    {\\n        require(_bytes.length >= _start + 2, 'parseRlud_outOfBounds');\\n        (res.a, res.b) = _bytes.toUint4(_start + 0);\\n        res.exists = true;\\n        int8 tmpfeat = _bytes.toInt8(_start + 1);\\n\\n        if (tmpfeat >= 0) {\\n            feature = uint8(tmpfeat);\\n        } else {\\n            feature = uint8(tmpfeat * -1);\\n            calculated = true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x856042f8386ad2c167509541cb458eff5cd6393d8500f0c5599bbf30d869b912\",\"license\":\"MIT\"},\"contracts/logic/Matrix.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '../interfaces/IDotNugg.sol';\\nimport '../libraries/Bytes.sol';\\nimport '../logic/Rgba.sol';\\n\\nimport '../test/Console.sol';\\n\\nlibrary Matrix {\\n    using Bytes for bytes;\\n    using Rgba for IDotNugg.Rgba;\\n\\n    function create(uint8 width, uint8 height) internal view returns (IDotNugg.Matrix memory res) {\\n        require(width % 2 == 1 && height % 2 == 1, 'ML:C:0');\\n\\n        res.data = new IDotNugg.Pixel[][](height);\\n        for (uint8 i = 0; i < height; i++) {\\n            res.data[i] = new IDotNugg.Pixel[](width);\\n        }\\n    }\\n\\n    function moveTo(\\n        IDotNugg.Matrix memory matrix,\\n        uint8 xoffset,\\n        uint8 yoffset,\\n        uint8 width,\\n        uint8 height\\n    ) internal view {\\n        matrix.currentUnsetX = xoffset;\\n        matrix.currentUnsetY = yoffset;\\n        matrix.startX = xoffset;\\n        matrix.width = width + xoffset;\\n        matrix.height = height + yoffset;\\n    }\\n\\n    function next(IDotNugg.Matrix memory matrix) internal view returns (bool res) {\\n        res = next(matrix, matrix.width);\\n    }\\n\\n    function next(IDotNugg.Matrix memory matrix, uint8 width) internal view returns (bool res) {\\n        if (matrix.init) {\\n            if (width <= matrix.currentUnsetX + 1) {\\n                if (matrix.height == matrix.currentUnsetY + 1) {\\n                    return false;\\n                }\\n                matrix.currentUnsetX = matrix.startX; // 0 by default\\n                matrix.currentUnsetY++;\\n            } else {\\n                matrix.currentUnsetX++;\\n            }\\n        } else {\\n            matrix.init = true;\\n        }\\n        res = true;\\n    }\\n\\n    function current(IDotNugg.Matrix memory matrix) internal view returns (IDotNugg.Pixel memory res) {\\n\\n\\n        res = matrix.data[matrix.currentUnsetY][matrix.currentUnsetX];\\n    }\\n\\n    function setCurrent(IDotNugg.Matrix memory matrix, IDotNugg.Pixel memory pix) internal view {\\n        matrix.data[matrix.currentUnsetY][matrix.currentUnsetX] = pix;\\n    }\\n\\n    function resetIterator(IDotNugg.Matrix memory matrix) internal view {\\n        matrix.currentUnsetX = 0;\\n        matrix.currentUnsetY = 0;\\n        matrix.startX = 0;\\n        matrix.init = false;\\n    }\\n\\n    function moveBack(IDotNugg.Matrix memory matrix) internal view {\\n        matrix.width = uint8(matrix.data[0].length);\\n        matrix.height = uint8(matrix.data.length);\\n    }\\n\\n    function reset(IDotNugg.Matrix memory matrix) internal view {\\n        for (; next(matrix); ) if (current(matrix).exists) delete matrix.data[matrix.currentUnsetY][matrix.currentUnsetX];\\n        matrix.width = 0;\\n        matrix.height = 0;\\n        resetIterator(matrix);\\n    }\\n\\n    function set(\\n        IDotNugg.Matrix memory matrix,\\n        bytes memory data,\\n        IDotNugg.Pixel[] memory pallet,\\n        uint8 groupWidth,\\n        uint8 groupHeight\\n    ) internal view {\\n        uint256 totalLength = 0;\\n        matrix.height = groupHeight;\\n        for (uint256 i = 0; i < data.length; i++) {\\n            (uint8 colorKey, uint8 len) = data.toUint4(i);\\n            len++;\\n\\n            totalLength += len;\\n            for (uint256 j = 0; j < len; j++) {\\n                next(matrix, groupWidth);\\n                setCurrent(matrix, pallet[colorKey]);\\n\\n            }\\n\\n        }\\n\\n\\n\\n\\n\\n        require(totalLength % groupWidth == 0, 'MTRX:SET:0');\\n        require(totalLength / groupWidth == groupHeight, 'MTRX:SET:1');\\n\\n        matrix.width = groupWidth;\\n        matrix.height = uint8(totalLength / groupWidth);\\n\\n        resetIterator(matrix);\\n    }\\n\\n    function addRowsAt(\\n        IDotNugg.Matrix memory matrix,\\n        uint8 index,\\n        uint8 amount\\n    ) internal view {\\n        require(index < matrix.data.length, 'MAT:ARA:0');\\n        for (uint256 j = matrix.width; j > index; j--) {\\n            if (j < index) break;\\n            if (matrix.data[j].length > 0) matrix.data[j + amount] = matrix.data[j];\\n        }\\n        // \\\"<=\\\" is because this loop needs to run [amount] times\\n        for (uint256 j = index + 1; j <= index + amount; j++) {\\n            //\\n            matrix.data[j] = matrix.data[index];\\n        }\\n        matrix.height += amount;\\n    }\\n\\n    function addColumnsAt(\\n        IDotNugg.Matrix memory matrix, /// cowboy hat\\n        uint8 index,\\n        uint8 amount\\n    ) internal view {\\n        require(index < matrix.data[0].length, 'MAT:ACA:0');\\n        for (uint256 i = 0; i < matrix.width; i++) {\\n            for (uint256 j = matrix.width; j > index; j--) {\\n                if (j < index) break;\\n                //  if (matrix.data[i][j].exists) @note - do not completly understand this.. but it fixes a bug\\n                matrix.data[i][j + amount] = matrix.data[i][j];\\n            }\\n            // \\\"<=\\\" is because this loop needs to run [amount] times\\n            for (uint256 j = index + 1; j <= index + amount; j++) {\\n                matrix.data[i][j] = matrix.data[i][index];\\n            }\\n        }\\n        matrix.width += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x84fcc22621efd2ff09bec8d76003bfbe5f8d2249064fccb33a4426d208f57e5d\",\"license\":\"MIT\"},\"contracts/logic/Rgba.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.4;\\n\\nimport '../libraries/Bytes.sol';\\nimport '../interfaces/IDotNugg.sol';\\nimport '../test/Console.sol';\\n\\nlibrary Rgba {\\n    using Bytes for bytes;\\n\\n    struct RGBA16 {\\n        uint16 r;\\n        uint16 g;\\n        uint16 b;\\n        uint16 a;\\n    }\\n\\n    function combine(IDotNugg.Rgba memory base, IDotNugg.Rgba memory mix) internal view {\\n        if (mix.a == 255 || base.a == 0) {\\n            base.r = mix.r;\\n            base.g = mix.g;\\n            base.b = mix.b;\\n            base.a = mix.a;\\n            return;\\n        }\\n\\n        RGBA16 memory baseRGB = RGBA16({r: uint16(base.r), g: uint16(base.g), b: uint16(base.b), a: uint16(base.a)});\\n        RGBA16 memory mixRGB = RGBA16({r: uint16(mix.r), g: uint16(mix.g), b: uint16(mix.b), a: uint16(mix.a)});\\n\\n        // uint8 alpha = uint8(255 - (((255 - baseRGB.a) * (255 - mixRGB.a)) / 255));\\n        base.r = uint8((baseRGB.r * (255 - mixRGB.a) + mixRGB.r * mixRGB.a) / 255);\\n        base.g = uint8((baseRGB.g * (255 - mixRGB.a) + mixRGB.g * mixRGB.a) / 255);\\n        base.b = uint8((baseRGB.b * (255 - mixRGB.a) + mixRGB.b * mixRGB.a) / 255);\\n        base.a = 255;\\n        //   return IDotNugg.Rgba({r: r, g: g, b: b, a: 255});\\n    }\\n\\n    function toUint64(IDotNugg.Rgba memory base) internal view returns (uint64 res) {\\n        bytes memory input = abi.encodePacked(base.r, base.g, base.b, base.a);\\n        return input.toUint64(0);\\n    }\\n\\n    function toAscii(IDotNugg.Rgba memory base) internal view returns (string memory res) {\\n        bytes memory input = abi.encodePacked(base.r, base.g, base.b, base.a);\\n        return input.toAscii();\\n    }\\n\\n    function equalssss(IDotNugg.Rgba memory base, IDotNugg.Rgba memory next) internal view returns (bool res) {\\n        res = base.a == next.a && base.r == next.r && base.g == next.g && base.b == next.b;\\n    }\\n}\\n\",\"keccak256\":\"0x2f65480f7e46e1b0e34e0de221dc3eb9ea3f128ef6673966a60a4c341695d261\",\"license\":\"GPL-2.0-or-later\"},\"contracts/test/Console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n    function _sendLogPayload(bytes memory payload) private view {\\n        uint256 payloadLength = payload.length;\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        assembly {\\n            let payloadStart := add(payload, 32)\\n            let r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n        }\\n    }\\n\\n    function log() internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log()'));\\n    }\\n\\n    function logInt(int256 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(int)', p0));\\n    }\\n\\n    function logUint(uint256 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint)', p0));\\n    }\\n\\n    function logString(string memory p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string)', p0));\\n    }\\n\\n    function logBool(bool p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool)', p0));\\n    }\\n\\n    function logAddress(address p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address)', p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes)', p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes1)', p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes2)', p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes3)', p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes4)', p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes5)', p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes6)', p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes7)', p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes8)', p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes9)', p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes10)', p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes11)', p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes12)', p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes13)', p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes14)', p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes15)', p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes16)', p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes17)', p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes18)', p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes19)', p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes20)', p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes21)', p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes22)', p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes23)', p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes24)', p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes25)', p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes26)', p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes27)', p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes28)', p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes29)', p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes30)', p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes31)', p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes32)', p0));\\n    }\\n\\n    function log(uint256 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint)', p0));\\n    }\\n\\n    function log(string memory p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string)', p0));\\n    }\\n\\n    function log(bool p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool)', p0));\\n    }\\n\\n    function log(address p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address)', p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint)', p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string)', p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool)', p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address)', p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint)', p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string)', p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool)', p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address)', p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint)', p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string)', p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool)', p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address)', p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint)', p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string)', p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool)', p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address)', p0, p1));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,address,address)', p0, p1, p2, p3));\\n    }\\n}\\n\",\"keccak256\":\"0x96e3621e83cc5dc501c1974c0041f430df6158d55a09838c0967a90a436e9a33\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50614cbc806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80639f6556b214610030575b600080fd5b61004361003e36600461442a565b610059565b60405161005091906146f0565b60405180910390f35b6040516301ffc9a760e01b8152606090879081906001600160a01b038216906301ffc9a790610093906353c9baa160e01b906004016146db565b60206040518083038186803b1580156100ab57600080fd5b505afa1580156100bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100e391906143d8565b6101215760405162461bcd60e51b815260206004820152600a602482015269272aa39d2a2aa9249d1960b11b60448201526064015b60405180910390fd5b600061012c8c61052c565b90506000816040015160ff166001600160401b0381111561015d57634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561019057816020015b606081526020019060019003908161017b5790505b50905060005b8c51811015610237578c81815181106101bf57634e487b7160e01b600052603260045260246000fd5b6020026020010151826101f88f84815181106101eb57634e487b7160e01b600052603260045260246000fd5b602002602001015161083a565b60ff168151811061021957634e487b7160e01b600052603260045260246000fd5b6020026020010181905250808061022f90614b72565b915050610196565b5060005b826060015151811015610315576000610271846060015183815181106101eb57634e487b7160e01b600052603260045260246000fd5b9050828160ff168151811061029657634e487b7160e01b600052603260045260246000fd5b6020026020010151516000141561030257836060015182815181106102cb57634e487b7160e01b600052603260045260246000fd5b6020026020010151838260ff16815181106102f657634e487b7160e01b600052603260045260246000fd5b60200260200101819052505b508061030d81614b72565b91505061023b565b506000610322838361086b565b6040516301ffc9a760e01b81529091506001600160a01b038516906301ffc9a790610358906332c7d48160e01b906004016146db565b60206040518083038186803b15801561037057600080fd5b505afa158015610384573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a891906143d8565b156104315760405163199c0e9360e11b81526001600160a01b038516906333381d26906103db9084908b90600401614733565b60006040518083038186803b1580156103f357600080fd5b505afa158015610407573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261042f91908101906143f8565b505b600080866001600160a01b03166352367306848b6040518363ffffffff1660e01b8152600401610462929190614733565b60006040518083038186803b15801561047a57600080fd5b505afa15801561048e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104b69190810190614519565b915091506105178d6104c78d610b68565b6104d08d610b68565b6104da8686610c89565b6040516020016104ed94939291906145b8565b60408051601f1981840301815282820190915260048252633539b7b760e11b602083015290610c89565b97505050505050505098975050505050505050565b604080516080810182526000808252602082018190529181019190915260608082015261055a826007610cbd565b60ff168082526020820152610570826008610cbd565b60ff1660408201526000610585836009610d19565b905060006002610596600984614a93565b6105a09190614973565b61ffff166001600160401b038111156105c957634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156105f2578160200160208202803683370190505b509050818160008151811061061757634e487b7160e01b600052603260045260246000fd5b61ffff9092166020928302919091019091015260015b81518161ffff1610156106a75761065e610648826002614a4a565b610653906009614910565b869061ffff16610d19565b828261ffff168151811061068257634e487b7160e01b600052603260045260246000fd5b61ffff909216602092830291909101909101528061069f81614b50565b91505061062d565b5080516001600160401b038111156106cf57634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561070257816020015b60608152602001906001900390816106ed5790505b50606084015260005b81518161ffff161015610832578151600090610728836001614910565b61ffff1614610770578261073d836001614910565b61ffff168151811061075f57634e487b7160e01b600052603260045260246000fd5b602002602001015161ffff16610773565b85515b90506107eb838361ffff168151811061079c57634e487b7160e01b600052603260045260246000fd5b602002602001015161ffff16848461ffff16815181106107cc57634e487b7160e01b600052603260045260246000fd5b602002602001015161ffff16836107e39190614ab6565b889190610d76565b85606001518361ffff168151811061081357634e487b7160e01b600052603260045260246000fd5b602002602001018190525050808061082a90614b50565b91505061070b565b505050919050565b60008160098151811061085d57634e487b7160e01b600052603260045260246000fd5b016020015160f81c92915050565b61087361410a565b61087b614147565b61088d84600001518560200151610e85565b8152604084015160ff166001600160401b038111156108bc57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156108f557816020015b6108e2614167565b8152602001906001900390816108da5790505b50602082015261090361418c565b8451610911906002906149a8565b60ff1681528451610924906002906149a8565b60ff1660208201526001604082015261093b6141ac565b60005b866040015160ff168160ff1610156109aa5760405180604001604052808381526020018481525084602001518260ff168151811061098c57634e487b7160e01b600052603260045260246000fd5b602002602001018190525080806109a290614b8d565b91505061093e565b508551835160ff9182169052602080880151855192169101526109cb6141da565b6109dd87600001518860200151610e85565b8160400181905250866040015160ff166001600160401b03811115610a1257634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610a4b57816020015b610a38614167565b815260200190600190039081610a305790505b5081606001819052506000610a6487896040015161100e565b905060005b81518160ff161015610b58576000828260ff1681518110610a9a57634e487b7160e01b600052603260045260246000fd5b602002602001015160400151511115610b4657610b1583838360ff1681518110610ad457634e487b7160e01b600052603260045260246000fd5b6020026020010151610b1089868660ff1681518110610b0357634e487b7160e01b600052603260045260246000fd5b602002602001015161113e565b611255565b610b1f868461132a565b610b298684611641565b610b3386846116ec565b610b3c836117cb565b610b4686846117d7565b80610b5081614b8d565b915050610a69565b5050925193505050505b92915050565b606081610b8c5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610bb65780610ba081614b72565b9150610baf9050600a83614994565b9150610b90565b6000816001600160401b03811115610bde57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015610c08576020820181803683370190505b5090505b8415610c8157610c1d600183614ab6565b9150610c2a600a86614bce565b610c35906030614936565b60f81b818381518110610c5857634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350610c7a600a86614994565b9450610c0c565b949350505050565b606081610c9584611872565b604051602001610ca6929190614687565b604051602081830303815290604052905092915050565b6000610cca826001614936565b83511015610d105760405162461bcd60e51b8152602060048201526013602482015272746f55696e74385f6f75744f66426f756e647360681b6044820152606401610118565b50016001015190565b6000610d26826002614936565b83511015610d6d5760405162461bcd60e51b8152602060048201526014602482015273746f55696e7431365f6f75744f66426f756e647360601b6044820152606401610118565b50016002015190565b606081610d8481601f614936565b1015610dc35760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b6044820152606401610118565b610dcd8284614936565b84511015610e115760405162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b6044820152606401610118565b606082158015610e305760405191506000825260208201604052610e7a565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015610e69578051835260209283019201610e51565b5050858452601f01601f1916604052505b5090505b9392505050565b610e8d61410a565b610e98600284614be2565b60ff166001148015610eb75750610eb0600283614be2565b60ff166001145b610eec5760405162461bcd60e51b815260206004820152600660248201526504d4c3a433a360d41b6044820152606401610118565b8160ff166001600160401b03811115610f1557634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610f4857816020015b6060815260200190600190039081610f335790505b50604082015260005b8260ff168160ff161015611007578360ff166001600160401b03811115610f8857634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610fc157816020015b610fae614204565b815260200190600190039081610fa65790505b5082604001518260ff1681518110610fe957634e487b7160e01b600052603260045260246000fd5b60200260200101819052508080610fff90614b8d565b915050610f51565b5092915050565b606082516001600160401b0381111561103757634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561108f57816020015b61107c6040518060600160405280600060ff16815260200160608152602001606081525090565b8152602001906001900390816110555790505b50905060005b83518110156110075760008482815181106110c057634e487b7160e01b600052603260045260246000fd5b602002602001015151111561112c576111008482815181106110f257634e487b7160e01b600052603260045260246000fd5b6020026020010151846119e7565b82828151811061112057634e487b7160e01b600052603260045260246000fd5b60200260200101819052505b8061113681614b72565b915050611095565b600080826040015151116111815760405162461bcd60e51b815260206004820152600a602482015269043414c433a5056493a360b41b6044820152606401610118565b8160400151516001141561119757506000610b62565b600060018360400151516111ab9190614acd565b90505b60ff81161561124b5761122d83604001518260ff16815181106111e157634e487b7160e01b600052603260045260246000fd5b602002602001015160400151600001518560200151856000015160ff168151811061121c57634e487b7160e01b600052603260045260246000fd5b602002602001015160000151611e61565b15611239579050610b62565b611244600182614acd565b90506111ae565b5060009392505050565b81604001518160ff168151811061127c57634e487b7160e01b600052603260045260246000fd5b60209081029190910181015190840152815160ff1683526060830151516001600160401b038111156112be57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156112f757816020015b6112e4614167565b8152602001906001900390816112dc5790505b50606084015260208084015160c0810151848301518251929093015160408701516113259490939091611ec4565b505050565b60008260200151826000015160ff168151811061135757634e487b7160e01b600052603260045260246000fd5b6020026020010151905060008260200151604001519050826020015160a001516040015160ff16600014158015611395575080516040015160ff1615155b80156113b7575081600001516040015160ff1681600001516040015160ff1611155b156114555780516040908101518351909101516000916113d691614acd565b90506114006001856020015160a00151604001516113f49190614acd565b6040860151908361204d565b808260200151600001818151611416919061494e565b60ff90811690915260208087015160a001510151161590506114535780846020015160a0015160200181815161144c919061494e565b60ff169052505b505b60208084015160a00151015160ff1615801590611479575080516020015160ff1615155b801561149b575081600001516020015160ff1681600001516020015160ff1611155b156114e0576114e06001846020015160a00151602001516114bc9190614acd565b82516020908101518551909101516114d49190614acd565b6040860151919061204d565b602083015160a001516080015160ff1615801590611505575080516080015160ff1615155b8015611527575081600001516080015160ff1681600001516080015160ff1611155b156115bc57805160809081015183519091015160009161154691614acd565b602085015160a001516080015160408601519192506115669190836122c9565b80826020015160200181815161157c919061494e565b60ff908116909152602086015160a0015160600151161590506115ba5780846020015160a001516060018181516115b3919061494e565b60ff169052505b505b602083015160a001516060015160ff16158015906115e1575080516060015160ff1615155b8015611603575081600001516060015160ff1681600001516060015160ff1611155b1561163b57602083015160a00151606090810151825182015184519092015161163b9261162f91614acd565b604086015191906122c9565b50505050565b60008260200151826000015160ff168151811061166e57634e487b7160e01b600052603260045260246000fd5b602002602001015190506000826020015160400151905060008160200151600001518360200151600001516116a39190614acd565b905060008260200151602001518460200151602001516116c39190614acd565b6040860151805160209091015188519293506116e492918591859190612489565b505050505050565b81516116f7906124cd565b801561170b575061170b81604001516124cd565b1561177657600061171f83600001516124dd565b9050600061173083604001516124dd565b90508060400151801561174c575081518151600091820b910b12155b1561176f578051600090810b900b82526020808201519083015161176f9161254d565b50506116ec565b8151611781906126fa565b81516000606082018190526080820181905260c0820181905260a0909101526117c781604001516000606082018190526080820181905260c0820181905260a090910152565b5050565b6117d48161273f565b50565b60005b8160600151518160ff16101561132557600082606001518260ff168151811061181357634e487b7160e01b600052603260045260246000fd5b602002602001015190508060200151604001511561185f578084602001518360ff168151811061185357634e487b7160e01b600052603260045260246000fd5b60200260200101819052505b508061186a81614b8d565b9150506117da565b606081516000141561189257505060408051602081019091526000815290565b6000604051806060016040528060408152602001614c4760409139905060006003845160026118c19190614936565b6118cb9190614994565b6118d6906004614a74565b905060006118e5826020614936565b6001600160401b0381111561190a57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611934576020820181803683370190505b509050818152600183018586518101602084015b818310156119a25760039283018051603f601282901c811687015160f890811b8552600c83901c8216880151811b6001860152600683901c8216880151811b60028601529116860151901b93820193909352600401611948565b6003895106600181146119bc57600281146119cd576119d9565b613d3d60f01b6001198301526119d9565b603d60f81b6000198301525b509398975050505050505050565b611a0e6040518060600160405280600060ff16815260200160608152602001606081525090565b611a17836128ad565b611a208361083a565b60ff1681526000611a3284600a610d19565b905060006002611a43600c84614a93565b611a4d9190614973565b61ffff166001600160401b03811115611a7657634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611a9f578160200160208202803683370190505b50905060005b81518161ffff161015611b1f57611ad6611ac0826002614a4a565b611acb90600c614910565b879061ffff16610d19565b828261ffff1681518110611afa57634e487b7160e01b600052603260045260246000fd5b61ffff9092166020928302919091019091015280611b1781614b50565b915050611aa5565b5060058282600081518110611b4457634e487b7160e01b600052603260045260246000fd5b6020026020010151611b569190614a93565b611b609190614973565b611b6b906001614910565b61ffff166001600160401b03811115611b9457634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611bcd57816020015b611bba614204565b815260200190600190039081611bb25790505b50602084015280516001600160401b03811115611bfa57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611c3357816020015b611c20614243565b815260200190600190039081611c185790505b506040840181905251611c735760405162461bcd60e51b815260206004820152600860248201526704445433a50493a360c41b6044820152606401610118565b604080516060808201835260008083528351608081018552600180825260208281018290528287019190915292810182905282840152928201839052850151805191929091611cd257634e487b7160e01b600052603260045260246000fd5b602090810291909101015260015b8360200151518161ffff161015611d6457611d1e86611d00600184614a93565b611d0b906005614a4a565b611d159086614910565b61ffff166129c4565b84602001518261ffff1681518110611d4657634e487b7160e01b600052603260045260246000fd5b60200260200101819052508080611d5c90614b50565b915050611ce0565b5060005b81518161ffff161015611e58578151600090611d85836001614910565b61ffff1614611dcd5782611d9a836001614910565b61ffff1681518110611dbc57634e487b7160e01b600052603260045260246000fd5b602002602001015161ffff16611dd0565b86515b9050611e1187848461ffff1681518110611dfa57634e487b7160e01b600052603260045260246000fd5b602002602001015161ffff168361ffff1689612a30565b85604001518361ffff1681518110611e3957634e487b7160e01b600052603260045260246000fd5b6020026020010181905250508080611e5090614b50565b915050611d68565b50505092915050565b6000816020015160ff16836020015160ff1611158015611e8f5750816040015160ff16836040015160ff1611155b80610e7e5750816060015160ff16836060015160ff1611158015610e7e57505060809081015191015160ff9182169116111590565b60ff811660208601526000805b8551811015611f7e57600080611ee78884612d36565b915091508080611ef690614b8d565b9150611f07905060ff821685614936565b935060005b8160ff16811015611f6857611f218a88612d5b565b50611f568a898560ff1681518110611f4957634e487b7160e01b600052603260045260246000fd5b6020026020010151612df5565b80611f6081614b72565b915050611f0c565b5050508080611f7690614b72565b915050611ed1565b50611f8c60ff841682614bce565b15611fc65760405162461bcd60e51b815260206004820152600a60248201526904d5452583a5345543a360b41b6044820152606401610118565b8160ff168360ff1682611fd99190614994565b146120135760405162461bcd60e51b815260206004820152600a6024820152694d5452583a5345543a3160b01b6044820152606401610118565b60ff83168087526120249082614994565b60ff1660208701526000606087018190526080870181905260c0870181905260a08701526116e4565b826040015160008151811061207257634e487b7160e01b600052603260045260246000fd5b6020026020010151518260ff16106120b85760405162461bcd60e51b815260206004820152600960248201526804d41543a4143413a360bc1b6044820152606401610118565b60005b835160ff168110156122ab57835160ff165b8360ff168111156121b2578360ff168110156120e8576121b2565b8460400151828151811061210c57634e487b7160e01b600052603260045260246000fd5b6020026020010151818151811061213357634e487b7160e01b600052603260045260246000fd5b60200260200101518560400151838151811061215f57634e487b7160e01b600052603260045260246000fd5b60200260200101518460ff16836121769190614936565b8151811061219457634e487b7160e01b600052603260045260246000fd5b602002602001018190525080806121aa90614b1c565b9150506120cd565b5060006121c084600161494e565b60ff1690505b6121d0838561494e565b60ff16811161229857846040015182815181106121fd57634e487b7160e01b600052603260045260246000fd5b60200260200101518460ff168151811061222757634e487b7160e01b600052603260045260246000fd5b60200260200101518560400151838151811061225357634e487b7160e01b600052603260045260246000fd5b6020026020010151828151811061227a57634e487b7160e01b600052603260045260246000fd5b6020026020010181905250808061229090614b72565b9150506121c6565b50806122a381614b72565b9150506120bb565b5080836000018181516122be919061494e565b60ff16905250505050565b8260400151518260ff161061230c5760405162461bcd60e51b815260206004820152600960248201526804d41543a4152413a360bc1b6044820152606401610118565b825160ff165b8260ff168111156123de578260ff1681101561232d576123de565b60008460400151828151811061235357634e487b7160e01b600052603260045260246000fd5b60200260200101515111156123cc578360400151818151811061238657634e487b7160e01b600052603260045260246000fd5b602002602001015184604001518360ff16836123a29190614936565b815181106123c057634e487b7160e01b600052603260045260246000fd5b60200260200101819052505b806123d681614b1c565b915050612312565b5060006123ec83600161494e565b60ff1690505b6123fc828461494e565b60ff1681116124765783604001518360ff168151811061242c57634e487b7160e01b600052603260045260246000fd5b60200260200101518460400151828151811061245857634e487b7160e01b600052603260045260246000fd5b6020026020010181905250808061246e90614b72565b9150506123f2565b5080836020018181516122be919061494e565b60ff80851660608701819052908416608087015260c08601526124ac848361494e565b60ff1685526124bb838261494e565b60ff1660209095019490945250505050565b6000610b62828360000151612d5b565b6124e5614204565b8160400151826080015160ff168151811061251057634e487b7160e01b600052603260045260246000fd5b6020026020010151826060015160ff168151811061253e57634e487b7160e01b600052603260045260246000fd5b60200260200101519050919050565b806060015160ff1660ff14806125685750606082015160ff16155b1561259a57805160ff908116835260208083015182169084015260408083015182169084015260609182015116910152565b6040805160808082018352845160ff9081168352602080870151821681850152868501518216848601526060808801518316818601528551938401865286518316808552878301518416928501929092528686015183169584019590955285850151821694830185905292939192909161261391614a4a565b60608301516126239060ff614a93565b845161262f9190614a4a565b6126399190614910565b6126439190614973565b60ff90811685526060820151602083015161265e9190614a4a565b606083015161266e9060ff614a93565b846020015161267d9190614a4a565b6126879190614910565b6126919190614973565b60ff9081166020860152606082015160408301516126af9190614a4a565b60608301516126bf9060ff614a93565b84604001516126ce9190614a4a565b6126d89190614910565b6126e29190614973565b60ff9081166040860152606090940193909352505050565b806040015160008151811061271f57634e487b7160e01b600052603260045260246000fd5b6020908102919091018101515160ff908116835260408301515116910152565b606060008060005b846020015160600151518160ff1610156128a65761276361418c565b8560200151608001518260ff168151811061278e57634e487b7160e01b600052603260045260246000fd5b602002602001015160400151156127e657836127a981614b8d565b9450508560200151608001518260ff16815181106127d757634e487b7160e01b600052603260045260246000fd5b60200260200101519050612893565b8560200151606001518260ff168151811061281157634e487b7160e01b600052603260045260246000fd5b60200260200101516040015115612893578261282c81614b8d565b935050845160001415612849576128468660400151612e5e565b94505b612886868760200151606001518460ff168151811061287857634e487b7160e01b600052603260045260246000fd5b6020026020010151876130bf565b9050612893868284613274565b508061289e81614b8d565b915050612747565b5050505050565b600d8151116128e75760405162461bcd60e51b81526020600482015260066024820152650443a56493a360d41b6044820152606401610118565b60405166444f544e55474760c81b60208201526129249060270160408051601f1981840301815291905261291e8360006007610d76565b906135fa565b6129595760405162461bcd60e51b8152602060048201526006602482015265443a56493a3160d01b6044820152606401610118565b612964816007610d19565b61ffff1661298a612985600980855161297d9190614ab6565b859190610d76565b61365e565b61ffff16146117d45760405162461bcd60e51b8152602060048201526006602482015265221d2b249d1960d11b6044820152606401610118565b6129cc614204565b6129d7826005614936565b835110156129f75760405162461bcd60e51b815260040161011890614703565b612a0183836136e7565b600090810b900b8152612a1e83612a19846001614936565b61370e565b60208201526001604082015292915050565b612a38614243565b82855110158015612a4857508284105b612a645760405162461bcd60e51b815260040161011890614703565b8160ff166001600160401b03811115612a8d57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612ac657816020015b612ab361418c565b815260200190600190039081612aab5790505b50606082015260ff82166001600160401b03811115612af557634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612b2e57816020015b612b1b61418c565b815260200190600190039081612b135790505b5060808201526000612b5681612b4381614b72565b9250612b4f9087614936565b8790610cbd565b60ff168252612b6881612b4381614b72565b60ff166020830152612b7d81612b4381614b72565b60408301516020015160ff9091169052612b9a81612b4381614b72565b604083015160209081015160ff909216910152612bcc8682612bbb81614b72565b9350612bc79088614936565b61383d565b60a083018190525115612be757612be4600482614936565b90505b612bf58682612bbb81614b72565b6040830180519190915251515115612c1557612c12600482614936565b90505b6000612c3782612c2481614b72565b9350612c309088614936565b8890610cbd565b612c449060ff1687614910565b9050600082612c5281614b72565b9350612c5e9088614936565b90505b8161ffff16811015612d0b576000806000612c7c8b85613966565b9250925092508015612cc0578287606001518360ff1681518110612cb057634e487b7160e01b600052603260045260246000fd5b6020026020010181905250612cf4565b8287608001518360ff1681518110612ce857634e487b7160e01b600052603260045260246000fd5b60200260200101819052505b505050600281612d049190614936565b9050612c61565b612d2561ffff8316612d1d8189614ab6565b8a9190610d76565b60c085015250919695505050505050565b6000806000612d458585610cbd565b600f600482901c81169450169150509250929050565b60008260a0015115612de4576060830151612d7790600161494e565b60ff168260ff1611612dd4576080830151612d9390600161494e565b60ff16836020015160ff161415612dac57506000610b62565b60c083015160ff16606084015260808301805190612dc982614b8d565b60ff16905250612dec565b60608301805190612dc982614b8d565b600160a08401525b50600192915050565b808260400151836080015160ff1681518110612e2157634e487b7160e01b600052603260045260246000fd5b6020026020010151836060015160ff1681518110612e4f57634e487b7160e01b600052603260045260246000fd5b60200260200101819052505050565b60606000806000612e6e85613a38565b60408051600580825260c082019092529396509194509250816020015b612e9361418c565b815260200190600190039081612e8b5790505093508084600081518110612eca57634e487b7160e01b600052603260045260246000fd5b60200260200101819052506040518060600160405280826000015160ff168152602001848360200151612efd9190614acd565b60ff1681526020016001151581525084600181518110612f2d57634e487b7160e01b600052603260045260246000fd5b602090810291909101015282612f44600282614be2565b60ff1615612f5a5780612f5681614b8d565b9150505b6040805160608101909152825160ff16815260208101612f7b6002846149a8565b8460200151612f8a9190614acd565b60ff1681526020016001151581525085600281518110612fba57634e487b7160e01b600052603260045260246000fd5b602090810291909101015282612fd1600282614be2565b60ff1615612fe75780612fe381614b8d565b9150505b6040805160608101909152835160ff168152602081016130086002846149a8565b8560200151613017919061494e565b60ff168152602001600115158152508660038151811061304757634e487b7160e01b600052603260045260246000fd5b60200260200101819052506040518060600160405280846000015160ff16815260200185856020015161307a919061494e565b60ff16815260200160011515815250866004815181106130aa57634e487b7160e01b600052603260045260246000fd5b60200260200101819052505050505050919050565b6130c761418c565b81836000015160ff16815181106130ee57634e487b7160e01b600052603260045260246000fd5b60209081029190910101515160ff90811682528351835184929190911690811061312857634e487b7160e01b600052603260045260246000fd5b60209081029190910181015181015160ff90811683830152600160408401529084015160089116101561317657826020015181602001516131699190614acd565b60ff16602082015261319e565b6020830151613186906008614acd565b8160200151613195919061494e565b60ff1660208201525b836040015160400151816020015160ff16815181106131cd57634e487b7160e01b600052603260045260246000fd5b6020026020010151816000015160ff16815181106131fb57634e487b7160e01b600052603260045260246000fd5b602002602001015160400151610e7e57806020015160ff168260008151811061323457634e487b7160e01b600052603260045260246000fd5b60200260200101516020015160ff161115613264576020810180519061325982614b8d565b60ff1690525061319e565b6020810180519061325982614b33565b61327c6141ac565b60408401515161328e90600190614acd565b60ff16836000015160ff161080156133235750836040015160400151836020015160ff16815181106132d057634e487b7160e01b600052603260045260246000fd5b6020026020010151816020015160016132e9919061494e565b84516132f5919061494e565b60ff168151811061331657634e487b7160e01b600052603260045260246000fd5b6020026020010151604001515b15613343576020810180519061333882614b8d565b60ff1690525061327c565b825160ff16158015906133d35750836040015160400151836020015160ff168151811061338057634e487b7160e01b600052603260045260246000fd5b602002602001015181604001516001613399919061494e565b84516133a59190614acd565b60ff16815181106133c657634e487b7160e01b600052603260045260246000fd5b6020026020010151604001515b156133f357604081018051906133e882614b8d565b60ff16905250613343565b602083015160ff161580159061348757506040808501510151606082015161341c90600161494e565b846020015161342b9190614acd565b60ff168151811061344c57634e487b7160e01b600052603260045260246000fd5b6020026020010151836000015160ff168151811061347a57634e487b7160e01b600052603260045260246000fd5b6020026020010151604001515b156134a7576060810180519061349c82614b8d565b60ff169052506133f3565b60018460400151602001516134bc9190614acd565b60ff16836020015160ff161080156135525750604080850151015160808201516134e790600161494e565b84602001516134f6919061494e565b60ff168151811061351757634e487b7160e01b600052603260045260246000fd5b6020026020010151836000015160ff168151811061354557634e487b7160e01b600052603260045260246000fd5b6020026020010151604001515b15613572576080810180519061356782614b8d565b60ff169052506134a7565b83606001518260ff168151811061359957634e487b7160e01b600052603260045260246000fd5b6020026020010151602001516040015161163b5760405180604001604052808281526020018481525084606001518360ff16815181106135e957634e487b7160e01b600052603260045260246000fd5b602002602001018190525050505050565b8151815160009160019181148083146136165760009250613654565b600160208701838101602088015b60028483851001141561364f5780518351146136435760009650600093505b60209283019201613624565b505050505b5090949350505050565b60008080805b84518110156136d75760ff85828151811061368f57634e487b7160e01b600052603260045260246000fd5b01602001516136a19060f81c85614910565b6136ab9190614bad565b925060ff6136b98484614910565b6136c39190614bad565b9150806136cf81614b72565b915050613664565b5060081b62ffff00161792915050565b6000806136f48484610cbd565b9050613702811960016148d0565b610c81906000196149ca565b60408051608081018252600080825260208201819052918101829052606081019190915261373d826004614936565b8351101561375d5760405162461bcd60e51b815260040161011890614703565b82613769836000614936565b8151811061378757634e487b7160e01b600052603260045260246000fd5b016020015160f81c81528261379d836001614936565b815181106137bb57634e487b7160e01b600052603260045260246000fd5b0160209081015160f81c90820152826137d5836002614936565b815181106137f357634e487b7160e01b600052603260045260246000fd5b016020015160f81c60408201528261380c836003614936565b8151811061382a57634e487b7160e01b600052603260045260246000fd5b016020015160f81c606082015292915050565b6138456141ac565b82613851836000614936565b8151811061386f57634e487b7160e01b600052603260045260246000fd5b60209101015160f81c60011480825215610b62578261388f836001614936565b815181106138ad57634e487b7160e01b600052603260045260246000fd5b0160209081015160f81c90820152826138c7836002614936565b815181106138e557634e487b7160e01b600052603260045260246000fd5b016020015160f81c6040820152826138fe836003614936565b8151811061391c57634e487b7160e01b600052603260045260246000fd5b016020015160f81c606082015282613935836004614936565b8151811061395357634e487b7160e01b600052603260045260246000fd5b016020015160f81c608082015292915050565b61396e61418c565b60008061397c846002614936565b855110156139c45760405162461bcd60e51b81526020600482015260156024820152747061727365526c75645f6f75744f66426f756e647360581b6044820152606401610118565b6139d96139d2856000614936565b8690612d36565b60ff9081166020860152168352600160408401819052600090613a0890613a01908790614936565b87906136e7565b905060008160000b12613a1d57809250613a30565b613a29816000196149ca565b9250600191505b509250925092565b600080613a4361418c565b8351613a51906002906149a8565b60ff1681526020840151613a67906002906149a8565b60ff1660208201526001604082018190529250829150600080808480825b80613fb75782158015613a96575083155b92508215613ce2578960400151898860200151613ab39190614acd565b60ff1681518110613ad457634e487b7160e01b600052603260045260246000fd5b6020026020010151826001613ae9919061494e565b8851613af59190614acd565b60ff1681518110613b1657634e487b7160e01b600052603260045260246000fd5b6020026020010151604001518015613bae57508960400151898860200151613b3e9190614acd565b60ff1681518110613b5f57634e487b7160e01b600052603260045260246000fd5b6020026020010151826001613b74919061494e565b8851613b80919061494e565b60ff1681518110613ba157634e487b7160e01b600052603260045260246000fd5b6020026020010151604001515b8015613c3a57508960400151888860200151613bca919061494e565b60ff1681518110613beb57634e487b7160e01b600052603260045260246000fd5b6020026020010151826001613c00919061494e565b8851613c0c9190614acd565b60ff1681518110613c2d57634e487b7160e01b600052603260045260246000fd5b6020026020010151604001515b8015613cc657508960400151888860200151613c56919061494e565b60ff1681518110613c7757634e487b7160e01b600052603260045260246000fd5b6020026020010151826001613c8c919061494e565b8851613c98919061494e565b60ff1681518110613cb957634e487b7160e01b600052603260045260246000fd5b6020026020010151604001515b15613cdd5781613cd581614b8d565b925050613ce2565b600193505b85613e33576000898860200151613cf99190614acd565b60ff16118015613d8a575060408a0151613d148a600161494e565b8860200151613d239190614acd565b60ff1681518110613d4457634e487b7160e01b600052603260045260246000fd5b6020026020010151828860000151613d5c9190614acd565b60ff1681518110613d7d57634e487b7160e01b600052603260045260246000fd5b6020026020010151604001515b8015613e17575060408a0151613da18a600161494e565b8860200151613db09190614acd565b60ff1681518110613dd157634e487b7160e01b600052603260045260246000fd5b6020026020010151828860000151613de9919061494e565b60ff1681518110613e0a57634e487b7160e01b600052603260045260246000fd5b6020026020010151604001515b15613e2e5788613e2681614b8d565b995050613e33565b600195505b84613f965760018a60200151613e499190614acd565b60ff16888860200151613e5c919061494e565b60ff16108015613eed575060408a0151613e7789600161494e565b8860200151613e86919061494e565b60ff1681518110613ea757634e487b7160e01b600052603260045260246000fd5b6020026020010151828860000151613ebf9190614acd565b60ff1681518110613ee057634e487b7160e01b600052603260045260246000fd5b6020026020010151604001515b8015613f7a575060408a0151613f0489600161494e565b8860200151613f13919061494e565b60ff1681518110613f3457634e487b7160e01b600052603260045260246000fd5b6020026020010151828860000151613f4c919061494e565b60ff1681518110613f6d57634e487b7160e01b600052603260045260246000fd5b6020026020010151604001515b15613f915787613f8981614b8d565b985050613f96565b600194505b848015613fa05750855b8015613fa95750835b15613fb2575060015b613a85565b8760ff168960ff16146140fd576000613fd0898b61494e565b613fdb90600161494e565b905060006002613feb8184614be2565b60ff161561400357613ffe83600161494e565b614005565b825b61400f91906149a8565b905060008b60018b6020015184614026919061494e565b6140309190614acd565b61403a9190614acd565b9050896020015160ff168160ff1611156140a25760008a60200151826140609190614acd565b905061406c818e61494e565b9c508060ff168c60ff161161408d576140858c82614acd565b9b508b61409b565b614097818d614acd565b9b508b5b50506140f2565b6000818b602001516140b49190614acd565b90508060ff168d60ff16116140d5576140cd8d82614acd565b9c508c6140e3565b6140df818e614acd565b9c508c5b506140ee818d61494e565b9b50505b60ff1660208a015250505b5050505050509193909250565b6040805160e08101825260008082526020820181905260609282018390529181018290526080810182905260a0810182905260c081019190915290565b604051806040016040528061415a61410a565b8152602001606081525090565b604051806040016040528061417a6141ac565b815260200161418761418c565b905290565b604080516060810182526000808252602082018190529181019190915290565b6040805160a08101825260008082526020820181905291810182905260608101829052608081019190915290565b6040518060800160405280600060ff1681526020016141f7614243565b815260200161415a61410a565b60408051606080820183526000808352835160808101855281815260208181018390529481018290529182015290918201908152600060209091015290565b6040805160e08101825260008082526020820152908101614262614167565b8152602001606081526020016060815260200161415a6141ac565b600061429061428b846148a9565b614879565b90508281528383830111156142a457600080fd5b610e7e836020830184614af0565b80356001600160a01b03811681146142c957600080fd5b919050565b600082601f8301126142de578081fd5b813560206001600160401b03808311156142fa576142fa614c30565b8260051b614309838201614879565b8481528381019087850183890186018a1015614323578788fd5b8793505b868410156143605780358581111561433d578889fd5b61434b8b88838d010161436d565b84525060019390930192918501918501614327565b5098975050505050505050565b600082601f83011261437d578081fd5b813561438b61428b826148a9565b81815284602083860101111561439f578283fd5b816020850160208301379081016020019190915292915050565b600082601f8301126143c9578081fd5b610e7e8383516020850161427d565b6000602082840312156143e9578081fd5b81518015158114610e7e578182fd5b600060208284031215614409578081fd5b81516001600160401b0381111561441e578182fd5b610c81848285016143b9565b600080600080600080600080610100898b031215614446578384fd5b88356001600160401b038082111561445c578586fd5b6144688c838d0161436d565b995060208b013591508082111561447d578586fd5b6144898c838d016142ce565b985061449760408c016142b2565b975060608b01359150808211156144ac578586fd5b6144b88c838d0161436d565b965060808b01359150808211156144cd578586fd5b6144d98c838d0161436d565b955060a08b0135945060c08b0135935060e08b01359150808211156144fc578283fd5b506145098b828c0161436d565b9150509295985092959890939650565b6000806040838503121561452b578182fd5b82516001600160401b0380821115614541578384fd5b61454d868387016143b9565b93506020850151915080821115614562578283fd5b508301601f81018513614573578182fd5b6145828582516020840161427d565b9150509250929050565b600081518084526145a4816020860160208601614af0565b601f01601f19169290920160200192915050565b683d913730b6b2911d1160b91b815284516000906145dd816009850160208a01614af0565b6c1116113a37b5b2b724b2111d1160991b600991840191820152855161460a816016840160208a01614af0565b701116113232b9b1b934b83a34b7b7111d1160791b60169290910191820152845161463c816027840160208901614af0565b6c1116101134b6b0b3b2911d101160991b60279290910191820152835161466a816034840160208801614af0565b61227d60f01b603492909101918201526036019695505050505050565b643230ba309d60d91b8152600083516146a7816005850160208801614af0565b670ed8985cd94d8d0b60c21b60059184019182015283516146cf81600d840160208801614af0565b01600d01949350505050565b6001600160e01b031991909116815260200190565b602081526000610e7e602083018461458c565b6020808252601690820152757061727365506978656c5f6f75744f66426f756e647360501b604082015260600190565b60006040808352610120830160ff8087511683860152602080880151606083821681890152858a0151915060e060808901528482518087526101409650868a019150868160051b8b010196508484019350885b81811015614815578a880361013f1901835284518051808a5290870190878a01908c5b818110156147ff57835180518f0b84528a81015180518d168c860152808c01518d168f8601528e8101518d168a8601528901518c1660808501528d0151151560a08401529289019260c0909201916001016147a9565b5090995050509385019391850191600101614786565b50505089015160ff811660a0890152945061482d9050565b608088015160ff811660c0880152935060a088015180151560e0880152935060c088015160ff81166101008801529350858303908601525061486f818661458c565b9695505050505050565b604051601f8201601f191681016001600160401b03811182821017156148a1576148a1614c30565b604052919050565b60006001600160401b038211156148c2576148c2614c30565b50601f01601f191660200190565b600081810b83820b82821282607f038213811516156148f1576148f1614c04565b82607f1903821281161561490757614907614c04565b50019392505050565b600061ffff80831681851680830382111561492d5761492d614c04565b01949350505050565b6000821982111561494957614949614c04565b500190565b600060ff821660ff84168060ff0382111561496b5761496b614c04565b019392505050565b600061ffff8084168061498857614988614c1a565b92169190910492915050565b6000826149a3576149a3614c1a565b500490565b600060ff8316806149bb576149bb614c1a565b8060ff84160491505092915050565b600081810b83820b82811383831382607f04841182821616156149ef576149ef614c04565b607f1985841282811686830586121615614a0b57614a0b614c04565b868612925084820586128484161615614a2657614a26614c04565b84607f0586128184161615614a3d57614a3d614c04565b5050509102949350505050565b600061ffff80831681851681830481118215151615614a6b57614a6b614c04565b02949350505050565b6000816000190483118215151615614a8e57614a8e614c04565b500290565b600061ffff83811690831681811015614aae57614aae614c04565b039392505050565b600082821015614ac857614ac8614c04565b500390565b600060ff821660ff841680821015614ae757614ae7614c04565b90039392505050565b60005b83811015614b0b578181015183820152602001614af3565b8381111561163b5750506000910152565b600081614b2b57614b2b614c04565b506000190190565b600060ff821680614b4657614b46614c04565b6000190192915050565b600061ffff80831681811415614b6857614b68614c04565b6001019392505050565b6000600019821415614b8657614b86614c04565b5060010190565b600060ff821660ff811415614ba457614ba4614c04565b60010192915050565b600061ffff80841680614bc257614bc2614c1a565b92169190910692915050565b600082614bdd57614bdd614c1a565b500690565b600060ff831680614bf557614bf5614c1a565b8060ff84160691505092915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fdfe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220fe4618e55d745d2d876e6271593d54d3c7aca351d9b00401b4c4c8ff01b3aa3364736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c80639f6556b214610030575b600080fd5b61004361003e36600461442a565b610059565b60405161005091906146f0565b60405180910390f35b6040516301ffc9a760e01b8152606090879081906001600160a01b038216906301ffc9a790610093906353c9baa160e01b906004016146db565b60206040518083038186803b1580156100ab57600080fd5b505afa1580156100bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100e391906143d8565b6101215760405162461bcd60e51b815260206004820152600a602482015269272aa39d2a2aa9249d1960b11b60448201526064015b60405180910390fd5b600061012c8c61052c565b90506000816040015160ff166001600160401b0381111561015d57634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561019057816020015b606081526020019060019003908161017b5790505b50905060005b8c51811015610237578c81815181106101bf57634e487b7160e01b600052603260045260246000fd5b6020026020010151826101f88f84815181106101eb57634e487b7160e01b600052603260045260246000fd5b602002602001015161083a565b60ff168151811061021957634e487b7160e01b600052603260045260246000fd5b6020026020010181905250808061022f90614b72565b915050610196565b5060005b826060015151811015610315576000610271846060015183815181106101eb57634e487b7160e01b600052603260045260246000fd5b9050828160ff168151811061029657634e487b7160e01b600052603260045260246000fd5b6020026020010151516000141561030257836060015182815181106102cb57634e487b7160e01b600052603260045260246000fd5b6020026020010151838260ff16815181106102f657634e487b7160e01b600052603260045260246000fd5b60200260200101819052505b508061030d81614b72565b91505061023b565b506000610322838361086b565b6040516301ffc9a760e01b81529091506001600160a01b038516906301ffc9a790610358906332c7d48160e01b906004016146db565b60206040518083038186803b15801561037057600080fd5b505afa158015610384573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a891906143d8565b156104315760405163199c0e9360e11b81526001600160a01b038516906333381d26906103db9084908b90600401614733565b60006040518083038186803b1580156103f357600080fd5b505afa158015610407573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261042f91908101906143f8565b505b600080866001600160a01b03166352367306848b6040518363ffffffff1660e01b8152600401610462929190614733565b60006040518083038186803b15801561047a57600080fd5b505afa15801561048e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104b69190810190614519565b915091506105178d6104c78d610b68565b6104d08d610b68565b6104da8686610c89565b6040516020016104ed94939291906145b8565b60408051601f1981840301815282820190915260048252633539b7b760e11b602083015290610c89565b97505050505050505098975050505050505050565b604080516080810182526000808252602082018190529181019190915260608082015261055a826007610cbd565b60ff168082526020820152610570826008610cbd565b60ff1660408201526000610585836009610d19565b905060006002610596600984614a93565b6105a09190614973565b61ffff166001600160401b038111156105c957634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156105f2578160200160208202803683370190505b509050818160008151811061061757634e487b7160e01b600052603260045260246000fd5b61ffff9092166020928302919091019091015260015b81518161ffff1610156106a75761065e610648826002614a4a565b610653906009614910565b869061ffff16610d19565b828261ffff168151811061068257634e487b7160e01b600052603260045260246000fd5b61ffff909216602092830291909101909101528061069f81614b50565b91505061062d565b5080516001600160401b038111156106cf57634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561070257816020015b60608152602001906001900390816106ed5790505b50606084015260005b81518161ffff161015610832578151600090610728836001614910565b61ffff1614610770578261073d836001614910565b61ffff168151811061075f57634e487b7160e01b600052603260045260246000fd5b602002602001015161ffff16610773565b85515b90506107eb838361ffff168151811061079c57634e487b7160e01b600052603260045260246000fd5b602002602001015161ffff16848461ffff16815181106107cc57634e487b7160e01b600052603260045260246000fd5b602002602001015161ffff16836107e39190614ab6565b889190610d76565b85606001518361ffff168151811061081357634e487b7160e01b600052603260045260246000fd5b602002602001018190525050808061082a90614b50565b91505061070b565b505050919050565b60008160098151811061085d57634e487b7160e01b600052603260045260246000fd5b016020015160f81c92915050565b61087361410a565b61087b614147565b61088d84600001518560200151610e85565b8152604084015160ff166001600160401b038111156108bc57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156108f557816020015b6108e2614167565b8152602001906001900390816108da5790505b50602082015261090361418c565b8451610911906002906149a8565b60ff1681528451610924906002906149a8565b60ff1660208201526001604082015261093b6141ac565b60005b866040015160ff168160ff1610156109aa5760405180604001604052808381526020018481525084602001518260ff168151811061098c57634e487b7160e01b600052603260045260246000fd5b602002602001018190525080806109a290614b8d565b91505061093e565b508551835160ff9182169052602080880151855192169101526109cb6141da565b6109dd87600001518860200151610e85565b8160400181905250866040015160ff166001600160401b03811115610a1257634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610a4b57816020015b610a38614167565b815260200190600190039081610a305790505b5081606001819052506000610a6487896040015161100e565b905060005b81518160ff161015610b58576000828260ff1681518110610a9a57634e487b7160e01b600052603260045260246000fd5b602002602001015160400151511115610b4657610b1583838360ff1681518110610ad457634e487b7160e01b600052603260045260246000fd5b6020026020010151610b1089868660ff1681518110610b0357634e487b7160e01b600052603260045260246000fd5b602002602001015161113e565b611255565b610b1f868461132a565b610b298684611641565b610b3386846116ec565b610b3c836117cb565b610b4686846117d7565b80610b5081614b8d565b915050610a69565b5050925193505050505b92915050565b606081610b8c5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610bb65780610ba081614b72565b9150610baf9050600a83614994565b9150610b90565b6000816001600160401b03811115610bde57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015610c08576020820181803683370190505b5090505b8415610c8157610c1d600183614ab6565b9150610c2a600a86614bce565b610c35906030614936565b60f81b818381518110610c5857634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350610c7a600a86614994565b9450610c0c565b949350505050565b606081610c9584611872565b604051602001610ca6929190614687565b604051602081830303815290604052905092915050565b6000610cca826001614936565b83511015610d105760405162461bcd60e51b8152602060048201526013602482015272746f55696e74385f6f75744f66426f756e647360681b6044820152606401610118565b50016001015190565b6000610d26826002614936565b83511015610d6d5760405162461bcd60e51b8152602060048201526014602482015273746f55696e7431365f6f75744f66426f756e647360601b6044820152606401610118565b50016002015190565b606081610d8481601f614936565b1015610dc35760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b6044820152606401610118565b610dcd8284614936565b84511015610e115760405162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b6044820152606401610118565b606082158015610e305760405191506000825260208201604052610e7a565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015610e69578051835260209283019201610e51565b5050858452601f01601f1916604052505b5090505b9392505050565b610e8d61410a565b610e98600284614be2565b60ff166001148015610eb75750610eb0600283614be2565b60ff166001145b610eec5760405162461bcd60e51b815260206004820152600660248201526504d4c3a433a360d41b6044820152606401610118565b8160ff166001600160401b03811115610f1557634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610f4857816020015b6060815260200190600190039081610f335790505b50604082015260005b8260ff168160ff161015611007578360ff166001600160401b03811115610f8857634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610fc157816020015b610fae614204565b815260200190600190039081610fa65790505b5082604001518260ff1681518110610fe957634e487b7160e01b600052603260045260246000fd5b60200260200101819052508080610fff90614b8d565b915050610f51565b5092915050565b606082516001600160401b0381111561103757634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561108f57816020015b61107c6040518060600160405280600060ff16815260200160608152602001606081525090565b8152602001906001900390816110555790505b50905060005b83518110156110075760008482815181106110c057634e487b7160e01b600052603260045260246000fd5b602002602001015151111561112c576111008482815181106110f257634e487b7160e01b600052603260045260246000fd5b6020026020010151846119e7565b82828151811061112057634e487b7160e01b600052603260045260246000fd5b60200260200101819052505b8061113681614b72565b915050611095565b600080826040015151116111815760405162461bcd60e51b815260206004820152600a602482015269043414c433a5056493a360b41b6044820152606401610118565b8160400151516001141561119757506000610b62565b600060018360400151516111ab9190614acd565b90505b60ff81161561124b5761122d83604001518260ff16815181106111e157634e487b7160e01b600052603260045260246000fd5b602002602001015160400151600001518560200151856000015160ff168151811061121c57634e487b7160e01b600052603260045260246000fd5b602002602001015160000151611e61565b15611239579050610b62565b611244600182614acd565b90506111ae565b5060009392505050565b81604001518160ff168151811061127c57634e487b7160e01b600052603260045260246000fd5b60209081029190910181015190840152815160ff1683526060830151516001600160401b038111156112be57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156112f757816020015b6112e4614167565b8152602001906001900390816112dc5790505b50606084015260208084015160c0810151848301518251929093015160408701516113259490939091611ec4565b505050565b60008260200151826000015160ff168151811061135757634e487b7160e01b600052603260045260246000fd5b6020026020010151905060008260200151604001519050826020015160a001516040015160ff16600014158015611395575080516040015160ff1615155b80156113b7575081600001516040015160ff1681600001516040015160ff1611155b156114555780516040908101518351909101516000916113d691614acd565b90506114006001856020015160a00151604001516113f49190614acd565b6040860151908361204d565b808260200151600001818151611416919061494e565b60ff90811690915260208087015160a001510151161590506114535780846020015160a0015160200181815161144c919061494e565b60ff169052505b505b60208084015160a00151015160ff1615801590611479575080516020015160ff1615155b801561149b575081600001516020015160ff1681600001516020015160ff1611155b156114e0576114e06001846020015160a00151602001516114bc9190614acd565b82516020908101518551909101516114d49190614acd565b6040860151919061204d565b602083015160a001516080015160ff1615801590611505575080516080015160ff1615155b8015611527575081600001516080015160ff1681600001516080015160ff1611155b156115bc57805160809081015183519091015160009161154691614acd565b602085015160a001516080015160408601519192506115669190836122c9565b80826020015160200181815161157c919061494e565b60ff908116909152602086015160a0015160600151161590506115ba5780846020015160a001516060018181516115b3919061494e565b60ff169052505b505b602083015160a001516060015160ff16158015906115e1575080516060015160ff1615155b8015611603575081600001516060015160ff1681600001516060015160ff1611155b1561163b57602083015160a00151606090810151825182015184519092015161163b9261162f91614acd565b604086015191906122c9565b50505050565b60008260200151826000015160ff168151811061166e57634e487b7160e01b600052603260045260246000fd5b602002602001015190506000826020015160400151905060008160200151600001518360200151600001516116a39190614acd565b905060008260200151602001518460200151602001516116c39190614acd565b6040860151805160209091015188519293506116e492918591859190612489565b505050505050565b81516116f7906124cd565b801561170b575061170b81604001516124cd565b1561177657600061171f83600001516124dd565b9050600061173083604001516124dd565b90508060400151801561174c575081518151600091820b910b12155b1561176f578051600090810b900b82526020808201519083015161176f9161254d565b50506116ec565b8151611781906126fa565b81516000606082018190526080820181905260c0820181905260a0909101526117c781604001516000606082018190526080820181905260c0820181905260a090910152565b5050565b6117d48161273f565b50565b60005b8160600151518160ff16101561132557600082606001518260ff168151811061181357634e487b7160e01b600052603260045260246000fd5b602002602001015190508060200151604001511561185f578084602001518360ff168151811061185357634e487b7160e01b600052603260045260246000fd5b60200260200101819052505b508061186a81614b8d565b9150506117da565b606081516000141561189257505060408051602081019091526000815290565b6000604051806060016040528060408152602001614c4760409139905060006003845160026118c19190614936565b6118cb9190614994565b6118d6906004614a74565b905060006118e5826020614936565b6001600160401b0381111561190a57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611934576020820181803683370190505b509050818152600183018586518101602084015b818310156119a25760039283018051603f601282901c811687015160f890811b8552600c83901c8216880151811b6001860152600683901c8216880151811b60028601529116860151901b93820193909352600401611948565b6003895106600181146119bc57600281146119cd576119d9565b613d3d60f01b6001198301526119d9565b603d60f81b6000198301525b509398975050505050505050565b611a0e6040518060600160405280600060ff16815260200160608152602001606081525090565b611a17836128ad565b611a208361083a565b60ff1681526000611a3284600a610d19565b905060006002611a43600c84614a93565b611a4d9190614973565b61ffff166001600160401b03811115611a7657634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611a9f578160200160208202803683370190505b50905060005b81518161ffff161015611b1f57611ad6611ac0826002614a4a565b611acb90600c614910565b879061ffff16610d19565b828261ffff1681518110611afa57634e487b7160e01b600052603260045260246000fd5b61ffff9092166020928302919091019091015280611b1781614b50565b915050611aa5565b5060058282600081518110611b4457634e487b7160e01b600052603260045260246000fd5b6020026020010151611b569190614a93565b611b609190614973565b611b6b906001614910565b61ffff166001600160401b03811115611b9457634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611bcd57816020015b611bba614204565b815260200190600190039081611bb25790505b50602084015280516001600160401b03811115611bfa57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611c3357816020015b611c20614243565b815260200190600190039081611c185790505b506040840181905251611c735760405162461bcd60e51b815260206004820152600860248201526704445433a50493a360c41b6044820152606401610118565b604080516060808201835260008083528351608081018552600180825260208281018290528287019190915292810182905282840152928201839052850151805191929091611cd257634e487b7160e01b600052603260045260246000fd5b602090810291909101015260015b8360200151518161ffff161015611d6457611d1e86611d00600184614a93565b611d0b906005614a4a565b611d159086614910565b61ffff166129c4565b84602001518261ffff1681518110611d4657634e487b7160e01b600052603260045260246000fd5b60200260200101819052508080611d5c90614b50565b915050611ce0565b5060005b81518161ffff161015611e58578151600090611d85836001614910565b61ffff1614611dcd5782611d9a836001614910565b61ffff1681518110611dbc57634e487b7160e01b600052603260045260246000fd5b602002602001015161ffff16611dd0565b86515b9050611e1187848461ffff1681518110611dfa57634e487b7160e01b600052603260045260246000fd5b602002602001015161ffff168361ffff1689612a30565b85604001518361ffff1681518110611e3957634e487b7160e01b600052603260045260246000fd5b6020026020010181905250508080611e5090614b50565b915050611d68565b50505092915050565b6000816020015160ff16836020015160ff1611158015611e8f5750816040015160ff16836040015160ff1611155b80610e7e5750816060015160ff16836060015160ff1611158015610e7e57505060809081015191015160ff9182169116111590565b60ff811660208601526000805b8551811015611f7e57600080611ee78884612d36565b915091508080611ef690614b8d565b9150611f07905060ff821685614936565b935060005b8160ff16811015611f6857611f218a88612d5b565b50611f568a898560ff1681518110611f4957634e487b7160e01b600052603260045260246000fd5b6020026020010151612df5565b80611f6081614b72565b915050611f0c565b5050508080611f7690614b72565b915050611ed1565b50611f8c60ff841682614bce565b15611fc65760405162461bcd60e51b815260206004820152600a60248201526904d5452583a5345543a360b41b6044820152606401610118565b8160ff168360ff1682611fd99190614994565b146120135760405162461bcd60e51b815260206004820152600a6024820152694d5452583a5345543a3160b01b6044820152606401610118565b60ff83168087526120249082614994565b60ff1660208701526000606087018190526080870181905260c0870181905260a08701526116e4565b826040015160008151811061207257634e487b7160e01b600052603260045260246000fd5b6020026020010151518260ff16106120b85760405162461bcd60e51b815260206004820152600960248201526804d41543a4143413a360bc1b6044820152606401610118565b60005b835160ff168110156122ab57835160ff165b8360ff168111156121b2578360ff168110156120e8576121b2565b8460400151828151811061210c57634e487b7160e01b600052603260045260246000fd5b6020026020010151818151811061213357634e487b7160e01b600052603260045260246000fd5b60200260200101518560400151838151811061215f57634e487b7160e01b600052603260045260246000fd5b60200260200101518460ff16836121769190614936565b8151811061219457634e487b7160e01b600052603260045260246000fd5b602002602001018190525080806121aa90614b1c565b9150506120cd565b5060006121c084600161494e565b60ff1690505b6121d0838561494e565b60ff16811161229857846040015182815181106121fd57634e487b7160e01b600052603260045260246000fd5b60200260200101518460ff168151811061222757634e487b7160e01b600052603260045260246000fd5b60200260200101518560400151838151811061225357634e487b7160e01b600052603260045260246000fd5b6020026020010151828151811061227a57634e487b7160e01b600052603260045260246000fd5b6020026020010181905250808061229090614b72565b9150506121c6565b50806122a381614b72565b9150506120bb565b5080836000018181516122be919061494e565b60ff16905250505050565b8260400151518260ff161061230c5760405162461bcd60e51b815260206004820152600960248201526804d41543a4152413a360bc1b6044820152606401610118565b825160ff165b8260ff168111156123de578260ff1681101561232d576123de565b60008460400151828151811061235357634e487b7160e01b600052603260045260246000fd5b60200260200101515111156123cc578360400151818151811061238657634e487b7160e01b600052603260045260246000fd5b602002602001015184604001518360ff16836123a29190614936565b815181106123c057634e487b7160e01b600052603260045260246000fd5b60200260200101819052505b806123d681614b1c565b915050612312565b5060006123ec83600161494e565b60ff1690505b6123fc828461494e565b60ff1681116124765783604001518360ff168151811061242c57634e487b7160e01b600052603260045260246000fd5b60200260200101518460400151828151811061245857634e487b7160e01b600052603260045260246000fd5b6020026020010181905250808061246e90614b72565b9150506123f2565b5080836020018181516122be919061494e565b60ff80851660608701819052908416608087015260c08601526124ac848361494e565b60ff1685526124bb838261494e565b60ff1660209095019490945250505050565b6000610b62828360000151612d5b565b6124e5614204565b8160400151826080015160ff168151811061251057634e487b7160e01b600052603260045260246000fd5b6020026020010151826060015160ff168151811061253e57634e487b7160e01b600052603260045260246000fd5b60200260200101519050919050565b806060015160ff1660ff14806125685750606082015160ff16155b1561259a57805160ff908116835260208083015182169084015260408083015182169084015260609182015116910152565b6040805160808082018352845160ff9081168352602080870151821681850152868501518216848601526060808801518316818601528551938401865286518316808552878301518416928501929092528686015183169584019590955285850151821694830185905292939192909161261391614a4a565b60608301516126239060ff614a93565b845161262f9190614a4a565b6126399190614910565b6126439190614973565b60ff90811685526060820151602083015161265e9190614a4a565b606083015161266e9060ff614a93565b846020015161267d9190614a4a565b6126879190614910565b6126919190614973565b60ff9081166020860152606082015160408301516126af9190614a4a565b60608301516126bf9060ff614a93565b84604001516126ce9190614a4a565b6126d89190614910565b6126e29190614973565b60ff9081166040860152606090940193909352505050565b806040015160008151811061271f57634e487b7160e01b600052603260045260246000fd5b6020908102919091018101515160ff908116835260408301515116910152565b606060008060005b846020015160600151518160ff1610156128a65761276361418c565b8560200151608001518260ff168151811061278e57634e487b7160e01b600052603260045260246000fd5b602002602001015160400151156127e657836127a981614b8d565b9450508560200151608001518260ff16815181106127d757634e487b7160e01b600052603260045260246000fd5b60200260200101519050612893565b8560200151606001518260ff168151811061281157634e487b7160e01b600052603260045260246000fd5b60200260200101516040015115612893578261282c81614b8d565b935050845160001415612849576128468660400151612e5e565b94505b612886868760200151606001518460ff168151811061287857634e487b7160e01b600052603260045260246000fd5b6020026020010151876130bf565b9050612893868284613274565b508061289e81614b8d565b915050612747565b5050505050565b600d8151116128e75760405162461bcd60e51b81526020600482015260066024820152650443a56493a360d41b6044820152606401610118565b60405166444f544e55474760c81b60208201526129249060270160408051601f1981840301815291905261291e8360006007610d76565b906135fa565b6129595760405162461bcd60e51b8152602060048201526006602482015265443a56493a3160d01b6044820152606401610118565b612964816007610d19565b61ffff1661298a612985600980855161297d9190614ab6565b859190610d76565b61365e565b61ffff16146117d45760405162461bcd60e51b8152602060048201526006602482015265221d2b249d1960d11b6044820152606401610118565b6129cc614204565b6129d7826005614936565b835110156129f75760405162461bcd60e51b815260040161011890614703565b612a0183836136e7565b600090810b900b8152612a1e83612a19846001614936565b61370e565b60208201526001604082015292915050565b612a38614243565b82855110158015612a4857508284105b612a645760405162461bcd60e51b815260040161011890614703565b8160ff166001600160401b03811115612a8d57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612ac657816020015b612ab361418c565b815260200190600190039081612aab5790505b50606082015260ff82166001600160401b03811115612af557634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612b2e57816020015b612b1b61418c565b815260200190600190039081612b135790505b5060808201526000612b5681612b4381614b72565b9250612b4f9087614936565b8790610cbd565b60ff168252612b6881612b4381614b72565b60ff166020830152612b7d81612b4381614b72565b60408301516020015160ff9091169052612b9a81612b4381614b72565b604083015160209081015160ff909216910152612bcc8682612bbb81614b72565b9350612bc79088614936565b61383d565b60a083018190525115612be757612be4600482614936565b90505b612bf58682612bbb81614b72565b6040830180519190915251515115612c1557612c12600482614936565b90505b6000612c3782612c2481614b72565b9350612c309088614936565b8890610cbd565b612c449060ff1687614910565b9050600082612c5281614b72565b9350612c5e9088614936565b90505b8161ffff16811015612d0b576000806000612c7c8b85613966565b9250925092508015612cc0578287606001518360ff1681518110612cb057634e487b7160e01b600052603260045260246000fd5b6020026020010181905250612cf4565b8287608001518360ff1681518110612ce857634e487b7160e01b600052603260045260246000fd5b60200260200101819052505b505050600281612d049190614936565b9050612c61565b612d2561ffff8316612d1d8189614ab6565b8a9190610d76565b60c085015250919695505050505050565b6000806000612d458585610cbd565b600f600482901c81169450169150509250929050565b60008260a0015115612de4576060830151612d7790600161494e565b60ff168260ff1611612dd4576080830151612d9390600161494e565b60ff16836020015160ff161415612dac57506000610b62565b60c083015160ff16606084015260808301805190612dc982614b8d565b60ff16905250612dec565b60608301805190612dc982614b8d565b600160a08401525b50600192915050565b808260400151836080015160ff1681518110612e2157634e487b7160e01b600052603260045260246000fd5b6020026020010151836060015160ff1681518110612e4f57634e487b7160e01b600052603260045260246000fd5b60200260200101819052505050565b60606000806000612e6e85613a38565b60408051600580825260c082019092529396509194509250816020015b612e9361418c565b815260200190600190039081612e8b5790505093508084600081518110612eca57634e487b7160e01b600052603260045260246000fd5b60200260200101819052506040518060600160405280826000015160ff168152602001848360200151612efd9190614acd565b60ff1681526020016001151581525084600181518110612f2d57634e487b7160e01b600052603260045260246000fd5b602090810291909101015282612f44600282614be2565b60ff1615612f5a5780612f5681614b8d565b9150505b6040805160608101909152825160ff16815260208101612f7b6002846149a8565b8460200151612f8a9190614acd565b60ff1681526020016001151581525085600281518110612fba57634e487b7160e01b600052603260045260246000fd5b602090810291909101015282612fd1600282614be2565b60ff1615612fe75780612fe381614b8d565b9150505b6040805160608101909152835160ff168152602081016130086002846149a8565b8560200151613017919061494e565b60ff168152602001600115158152508660038151811061304757634e487b7160e01b600052603260045260246000fd5b60200260200101819052506040518060600160405280846000015160ff16815260200185856020015161307a919061494e565b60ff16815260200160011515815250866004815181106130aa57634e487b7160e01b600052603260045260246000fd5b60200260200101819052505050505050919050565b6130c761418c565b81836000015160ff16815181106130ee57634e487b7160e01b600052603260045260246000fd5b60209081029190910101515160ff90811682528351835184929190911690811061312857634e487b7160e01b600052603260045260246000fd5b60209081029190910181015181015160ff90811683830152600160408401529084015160089116101561317657826020015181602001516131699190614acd565b60ff16602082015261319e565b6020830151613186906008614acd565b8160200151613195919061494e565b60ff1660208201525b836040015160400151816020015160ff16815181106131cd57634e487b7160e01b600052603260045260246000fd5b6020026020010151816000015160ff16815181106131fb57634e487b7160e01b600052603260045260246000fd5b602002602001015160400151610e7e57806020015160ff168260008151811061323457634e487b7160e01b600052603260045260246000fd5b60200260200101516020015160ff161115613264576020810180519061325982614b8d565b60ff1690525061319e565b6020810180519061325982614b33565b61327c6141ac565b60408401515161328e90600190614acd565b60ff16836000015160ff161080156133235750836040015160400151836020015160ff16815181106132d057634e487b7160e01b600052603260045260246000fd5b6020026020010151816020015160016132e9919061494e565b84516132f5919061494e565b60ff168151811061331657634e487b7160e01b600052603260045260246000fd5b6020026020010151604001515b15613343576020810180519061333882614b8d565b60ff1690525061327c565b825160ff16158015906133d35750836040015160400151836020015160ff168151811061338057634e487b7160e01b600052603260045260246000fd5b602002602001015181604001516001613399919061494e565b84516133a59190614acd565b60ff16815181106133c657634e487b7160e01b600052603260045260246000fd5b6020026020010151604001515b156133f357604081018051906133e882614b8d565b60ff16905250613343565b602083015160ff161580159061348757506040808501510151606082015161341c90600161494e565b846020015161342b9190614acd565b60ff168151811061344c57634e487b7160e01b600052603260045260246000fd5b6020026020010151836000015160ff168151811061347a57634e487b7160e01b600052603260045260246000fd5b6020026020010151604001515b156134a7576060810180519061349c82614b8d565b60ff169052506133f3565b60018460400151602001516134bc9190614acd565b60ff16836020015160ff161080156135525750604080850151015160808201516134e790600161494e565b84602001516134f6919061494e565b60ff168151811061351757634e487b7160e01b600052603260045260246000fd5b6020026020010151836000015160ff168151811061354557634e487b7160e01b600052603260045260246000fd5b6020026020010151604001515b15613572576080810180519061356782614b8d565b60ff169052506134a7565b83606001518260ff168151811061359957634e487b7160e01b600052603260045260246000fd5b6020026020010151602001516040015161163b5760405180604001604052808281526020018481525084606001518360ff16815181106135e957634e487b7160e01b600052603260045260246000fd5b602002602001018190525050505050565b8151815160009160019181148083146136165760009250613654565b600160208701838101602088015b60028483851001141561364f5780518351146136435760009650600093505b60209283019201613624565b505050505b5090949350505050565b60008080805b84518110156136d75760ff85828151811061368f57634e487b7160e01b600052603260045260246000fd5b01602001516136a19060f81c85614910565b6136ab9190614bad565b925060ff6136b98484614910565b6136c39190614bad565b9150806136cf81614b72565b915050613664565b5060081b62ffff00161792915050565b6000806136f48484610cbd565b9050613702811960016148d0565b610c81906000196149ca565b60408051608081018252600080825260208201819052918101829052606081019190915261373d826004614936565b8351101561375d5760405162461bcd60e51b815260040161011890614703565b82613769836000614936565b8151811061378757634e487b7160e01b600052603260045260246000fd5b016020015160f81c81528261379d836001614936565b815181106137bb57634e487b7160e01b600052603260045260246000fd5b0160209081015160f81c90820152826137d5836002614936565b815181106137f357634e487b7160e01b600052603260045260246000fd5b016020015160f81c60408201528261380c836003614936565b8151811061382a57634e487b7160e01b600052603260045260246000fd5b016020015160f81c606082015292915050565b6138456141ac565b82613851836000614936565b8151811061386f57634e487b7160e01b600052603260045260246000fd5b60209101015160f81c60011480825215610b62578261388f836001614936565b815181106138ad57634e487b7160e01b600052603260045260246000fd5b0160209081015160f81c90820152826138c7836002614936565b815181106138e557634e487b7160e01b600052603260045260246000fd5b016020015160f81c6040820152826138fe836003614936565b8151811061391c57634e487b7160e01b600052603260045260246000fd5b016020015160f81c606082015282613935836004614936565b8151811061395357634e487b7160e01b600052603260045260246000fd5b016020015160f81c608082015292915050565b61396e61418c565b60008061397c846002614936565b855110156139c45760405162461bcd60e51b81526020600482015260156024820152747061727365526c75645f6f75744f66426f756e647360581b6044820152606401610118565b6139d96139d2856000614936565b8690612d36565b60ff9081166020860152168352600160408401819052600090613a0890613a01908790614936565b87906136e7565b905060008160000b12613a1d57809250613a30565b613a29816000196149ca565b9250600191505b509250925092565b600080613a4361418c565b8351613a51906002906149a8565b60ff1681526020840151613a67906002906149a8565b60ff1660208201526001604082018190529250829150600080808480825b80613fb75782158015613a96575083155b92508215613ce2578960400151898860200151613ab39190614acd565b60ff1681518110613ad457634e487b7160e01b600052603260045260246000fd5b6020026020010151826001613ae9919061494e565b8851613af59190614acd565b60ff1681518110613b1657634e487b7160e01b600052603260045260246000fd5b6020026020010151604001518015613bae57508960400151898860200151613b3e9190614acd565b60ff1681518110613b5f57634e487b7160e01b600052603260045260246000fd5b6020026020010151826001613b74919061494e565b8851613b80919061494e565b60ff1681518110613ba157634e487b7160e01b600052603260045260246000fd5b6020026020010151604001515b8015613c3a57508960400151888860200151613bca919061494e565b60ff1681518110613beb57634e487b7160e01b600052603260045260246000fd5b6020026020010151826001613c00919061494e565b8851613c0c9190614acd565b60ff1681518110613c2d57634e487b7160e01b600052603260045260246000fd5b6020026020010151604001515b8015613cc657508960400151888860200151613c56919061494e565b60ff1681518110613c7757634e487b7160e01b600052603260045260246000fd5b6020026020010151826001613c8c919061494e565b8851613c98919061494e565b60ff1681518110613cb957634e487b7160e01b600052603260045260246000fd5b6020026020010151604001515b15613cdd5781613cd581614b8d565b925050613ce2565b600193505b85613e33576000898860200151613cf99190614acd565b60ff16118015613d8a575060408a0151613d148a600161494e565b8860200151613d239190614acd565b60ff1681518110613d4457634e487b7160e01b600052603260045260246000fd5b6020026020010151828860000151613d5c9190614acd565b60ff1681518110613d7d57634e487b7160e01b600052603260045260246000fd5b6020026020010151604001515b8015613e17575060408a0151613da18a600161494e565b8860200151613db09190614acd565b60ff1681518110613dd157634e487b7160e01b600052603260045260246000fd5b6020026020010151828860000151613de9919061494e565b60ff1681518110613e0a57634e487b7160e01b600052603260045260246000fd5b6020026020010151604001515b15613e2e5788613e2681614b8d565b995050613e33565b600195505b84613f965760018a60200151613e499190614acd565b60ff16888860200151613e5c919061494e565b60ff16108015613eed575060408a0151613e7789600161494e565b8860200151613e86919061494e565b60ff1681518110613ea757634e487b7160e01b600052603260045260246000fd5b6020026020010151828860000151613ebf9190614acd565b60ff1681518110613ee057634e487b7160e01b600052603260045260246000fd5b6020026020010151604001515b8015613f7a575060408a0151613f0489600161494e565b8860200151613f13919061494e565b60ff1681518110613f3457634e487b7160e01b600052603260045260246000fd5b6020026020010151828860000151613f4c919061494e565b60ff1681518110613f6d57634e487b7160e01b600052603260045260246000fd5b6020026020010151604001515b15613f915787613f8981614b8d565b985050613f96565b600194505b848015613fa05750855b8015613fa95750835b15613fb2575060015b613a85565b8760ff168960ff16146140fd576000613fd0898b61494e565b613fdb90600161494e565b905060006002613feb8184614be2565b60ff161561400357613ffe83600161494e565b614005565b825b61400f91906149a8565b905060008b60018b6020015184614026919061494e565b6140309190614acd565b61403a9190614acd565b9050896020015160ff168160ff1611156140a25760008a60200151826140609190614acd565b905061406c818e61494e565b9c508060ff168c60ff161161408d576140858c82614acd565b9b508b61409b565b614097818d614acd565b9b508b5b50506140f2565b6000818b602001516140b49190614acd565b90508060ff168d60ff16116140d5576140cd8d82614acd565b9c508c6140e3565b6140df818e614acd565b9c508c5b506140ee818d61494e565b9b50505b60ff1660208a015250505b5050505050509193909250565b6040805160e08101825260008082526020820181905260609282018390529181018290526080810182905260a0810182905260c081019190915290565b604051806040016040528061415a61410a565b8152602001606081525090565b604051806040016040528061417a6141ac565b815260200161418761418c565b905290565b604080516060810182526000808252602082018190529181019190915290565b6040805160a08101825260008082526020820181905291810182905260608101829052608081019190915290565b6040518060800160405280600060ff1681526020016141f7614243565b815260200161415a61410a565b60408051606080820183526000808352835160808101855281815260208181018390529481018290529182015290918201908152600060209091015290565b6040805160e08101825260008082526020820152908101614262614167565b8152602001606081526020016060815260200161415a6141ac565b600061429061428b846148a9565b614879565b90508281528383830111156142a457600080fd5b610e7e836020830184614af0565b80356001600160a01b03811681146142c957600080fd5b919050565b600082601f8301126142de578081fd5b813560206001600160401b03808311156142fa576142fa614c30565b8260051b614309838201614879565b8481528381019087850183890186018a1015614323578788fd5b8793505b868410156143605780358581111561433d578889fd5b61434b8b88838d010161436d565b84525060019390930192918501918501614327565b5098975050505050505050565b600082601f83011261437d578081fd5b813561438b61428b826148a9565b81815284602083860101111561439f578283fd5b816020850160208301379081016020019190915292915050565b600082601f8301126143c9578081fd5b610e7e8383516020850161427d565b6000602082840312156143e9578081fd5b81518015158114610e7e578182fd5b600060208284031215614409578081fd5b81516001600160401b0381111561441e578182fd5b610c81848285016143b9565b600080600080600080600080610100898b031215614446578384fd5b88356001600160401b038082111561445c578586fd5b6144688c838d0161436d565b995060208b013591508082111561447d578586fd5b6144898c838d016142ce565b985061449760408c016142b2565b975060608b01359150808211156144ac578586fd5b6144b88c838d0161436d565b965060808b01359150808211156144cd578586fd5b6144d98c838d0161436d565b955060a08b0135945060c08b0135935060e08b01359150808211156144fc578283fd5b506145098b828c0161436d565b9150509295985092959890939650565b6000806040838503121561452b578182fd5b82516001600160401b0380821115614541578384fd5b61454d868387016143b9565b93506020850151915080821115614562578283fd5b508301601f81018513614573578182fd5b6145828582516020840161427d565b9150509250929050565b600081518084526145a4816020860160208601614af0565b601f01601f19169290920160200192915050565b683d913730b6b2911d1160b91b815284516000906145dd816009850160208a01614af0565b6c1116113a37b5b2b724b2111d1160991b600991840191820152855161460a816016840160208a01614af0565b701116113232b9b1b934b83a34b7b7111d1160791b60169290910191820152845161463c816027840160208901614af0565b6c1116101134b6b0b3b2911d101160991b60279290910191820152835161466a816034840160208801614af0565b61227d60f01b603492909101918201526036019695505050505050565b643230ba309d60d91b8152600083516146a7816005850160208801614af0565b670ed8985cd94d8d0b60c21b60059184019182015283516146cf81600d840160208801614af0565b01600d01949350505050565b6001600160e01b031991909116815260200190565b602081526000610e7e602083018461458c565b6020808252601690820152757061727365506978656c5f6f75744f66426f756e647360501b604082015260600190565b60006040808352610120830160ff8087511683860152602080880151606083821681890152858a0151915060e060808901528482518087526101409650868a019150868160051b8b010196508484019350885b81811015614815578a880361013f1901835284518051808a5290870190878a01908c5b818110156147ff57835180518f0b84528a81015180518d168c860152808c01518d168f8601528e8101518d168a8601528901518c1660808501528d0151151560a08401529289019260c0909201916001016147a9565b5090995050509385019391850191600101614786565b50505089015160ff811660a0890152945061482d9050565b608088015160ff811660c0880152935060a088015180151560e0880152935060c088015160ff81166101008801529350858303908601525061486f818661458c565b9695505050505050565b604051601f8201601f191681016001600160401b03811182821017156148a1576148a1614c30565b604052919050565b60006001600160401b038211156148c2576148c2614c30565b50601f01601f191660200190565b600081810b83820b82821282607f038213811516156148f1576148f1614c04565b82607f1903821281161561490757614907614c04565b50019392505050565b600061ffff80831681851680830382111561492d5761492d614c04565b01949350505050565b6000821982111561494957614949614c04565b500190565b600060ff821660ff84168060ff0382111561496b5761496b614c04565b019392505050565b600061ffff8084168061498857614988614c1a565b92169190910492915050565b6000826149a3576149a3614c1a565b500490565b600060ff8316806149bb576149bb614c1a565b8060ff84160491505092915050565b600081810b83820b82811383831382607f04841182821616156149ef576149ef614c04565b607f1985841282811686830586121615614a0b57614a0b614c04565b868612925084820586128484161615614a2657614a26614c04565b84607f0586128184161615614a3d57614a3d614c04565b5050509102949350505050565b600061ffff80831681851681830481118215151615614a6b57614a6b614c04565b02949350505050565b6000816000190483118215151615614a8e57614a8e614c04565b500290565b600061ffff83811690831681811015614aae57614aae614c04565b039392505050565b600082821015614ac857614ac8614c04565b500390565b600060ff821660ff841680821015614ae757614ae7614c04565b90039392505050565b60005b83811015614b0b578181015183820152602001614af3565b8381111561163b5750506000910152565b600081614b2b57614b2b614c04565b506000190190565b600060ff821680614b4657614b46614c04565b6000190192915050565b600061ffff80831681811415614b6857614b68614c04565b6001019392505050565b6000600019821415614b8657614b86614c04565b5060010190565b600060ff821660ff811415614ba457614ba4614c04565b60010192915050565b600061ffff80841680614bc257614bc2614c1a565b92169190910692915050565b600082614bdd57614bdd614c1a565b500690565b600060ff831680614bf557614bf5614c1a565b8060ff84160691505092915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fdfe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220fe4618e55d745d2d876e6271593d54d3c7aca351d9b00401b4c4c8ff01b3aa3364736f6c63430008040033",
  "devdoc": {
    "author": "Nugg Labs - @danny7even & @dub6ix",
    "details": "hold my margarita",
    "kind": "dev",
    "methods": {},
    "title": "DotNugg V1 - onchain encoder/decoder for dotnugg files",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "yoU CAN'T HaVe ImAgES oN THe BlOCkcHAIn",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}