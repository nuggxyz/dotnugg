{
  "address": "0x47cE00De0bd8Ed8FAbd335FE1EA8283284FfeC68",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "file",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "postProcess",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "res",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "postProcessor",
      "outputs": [
        {
          "internalType": "contract IPostProcessResolver",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "preProcess",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "_res",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "preProcessor",
      "outputs": [
        {
          "internalType": "contract IPreProcessResolver",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[][]",
          "name": "files",
          "type": "uint256[][]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "process",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "resp",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "processor",
      "outputs": [
        {
          "internalType": "contract IProcessResolver",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xa2fe1aac9c4b7f0902a9e894e6244c5ad3798800d34badaf8646c8967dff3e88",
  "receipt": {
    "to": null,
    "from": "0xB666C13b621568FeC210724DF161604adccfA257",
    "contractAddress": "0x47cE00De0bd8Ed8FAbd335FE1EA8283284FfeC68",
    "transactionIndex": 4,
    "gasUsed": "4370269",
    "logsBloom": "0x
    "blockHash": "0xbc32bbf6c4c9adc176435afba13d985ad5308d1fe4c12b147287604e02448f2c",
    "transactionHash": "0xa2fe1aac9c4b7f0902a9e894e6244c5ad3798800d34badaf8646c8967dff3e88",
    "logs": [],
    "blockNumber": 11608674,
    "cumulativeGasUsed": "4778248",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "0af8193e5e4b5c871898e5ceb8b8a673",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"file\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"postProcess\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"res\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"postProcessor\",\"outputs\":[{\"internalType\":\"contract IPostProcessResolver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"preProcess\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"_res\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"preProcessor\",\"outputs\":[{\"internalType\":\"contract IPreProcessResolver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[][]\",\"name\":\"files\",\"type\":\"uint256[][]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"process\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"resp\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processor\",\"outputs\":[{\"internalType\":\"contract IProcessResolver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Nugg Labs - @danny7even & @dub6ix\",\"details\":\"hold my margarita\",\"kind\":\"dev\",\"methods\":{},\"title\":\"DotNugg V1 - onchain encoder/decoder for dotnugg files\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"yoU CAN'T HaVe ImAgES oN THe BlOCkcHAIn\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/src/DefaultResolver.sol\":\"DefaultResolver\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"contracts/src/DefaultResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport './interfaces/IDotNugg.sol';\\nimport './interfaces/IResolver.sol';\\n\\nimport './logic/Calculator.sol';\\nimport './logic/Matrix.sol';\\nimport './logic/Svg.sol';\\n\\nimport './v2/Merge.sol';\\n\\nimport './interfaces/IResolver.sol';\\nimport './libraries/Base64.sol';\\n\\nimport './types/Version.sol';\\n\\n/**\\n * @title DotNugg V1 - onchain encoder/decoder for dotnugg files\\n * @author Nugg Labs - @danny7even & @dub6ix\\n * @notice yoU CAN'T HaVe ImAgES oN THe BlOCkcHAIn\\n * @dev hold my margarita\\n */\\ncontract DefaultResolver is INuggFtProcessor {\\n    IPostProcessResolver public immutable override postProcessor;\\n\\n    IProcessResolver public immutable override processor;\\n\\n    IPreProcessResolver public immutable override preProcessor;\\n\\n    constructor() {\\n        postProcessor = IPostProcessResolver(address(this));\\n        preProcessor = IPreProcessResolver(address(this));\\n        processor = IProcessResolver(address(this));\\n    }\\n\\n    function preProcess(bytes memory) public pure override returns (bytes memory _res) {\\n        _res = '';\\n    }\\n\\n    function process(\\n        uint256[][] memory files,\\n        bytes memory data,\\n        bytes memory\\n    ) public view override returns (uint256[] memory resp) {\\n        (address nft, uint256 tokenId, uint256 itemData, address owner) = abi.decode(data, (address, uint256, uint256, address));\\n\\n        Version.Memory[][] memory versions = Version.parse(files);\\n\\n        IDotNugg.Matrix memory old = Calculator.combine(8, 63, itemData, versions);\\n\\n        resp = Version.bigMatrixWithData(old.version);\\n    }\\n\\n    function postProcess(\\n        uint256[] memory file,\\n        bytes memory data,\\n        bytes memory\\n    ) public view override returns (bytes memory res) {\\n        (uint256 tokenId, uint256 itemData, address owner) = abi.decode(data, (uint256, uint256, address));\\n\\n        uint256 width = (file[file.length - 1] >> 63) & ShiftLib.mask(6);\\n        uint256 height = (file[file.length - 1] >> 69) & ShiftLib.mask(6);\\n\\n\\n\\n        res = Svg.buildSvg(file, width, height);\\n\\n        res = Base64._encode(res);\\n\\n        res = abi.encodePacked(\\n            Base64.PREFIX_JSON,\\n            Base64._encode(\\n                bytes(\\n                    abi.encodePacked(\\n                        '{\\\"name\\\":\\\"',\\n                        'NuggFT',\\n                        '\\\",\\\"tokenId\\\":\\\"',\\n                        Uint256.toString(tokenId),\\n                        '\\\",\\\"description\\\":\\\"',\\n                        'The Nuggiest FT',\\n                        '\\\",\\\"itemData\\\":\\\"',\\n                        Uint256.toHexString(itemData, 32),\\n                        '\\\",\\\"owner\\\":\\\"',\\n                        Uint256.toHexString(uint160(owner), 20),\\n                        '\\\", \\\"image\\\": \\\"',\\n                        Base64.PREFIX_SVG,\\n                        res,\\n                        '\\\"}'\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public pure override(INuggFtProcessor) returns (bool) {\\n        return\\n            interfaceId == type(INuggFtProcessor).interfaceId ||\\n            interfaceId == type(IProcessResolver).interfaceId ||\\n            interfaceId == type(IPreProcessResolver).interfaceId ||\\n            interfaceId == type(IPostProcessResolver).interfaceId ||\\n            interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x47367fac746ca1254ac1928f9e8b571ef34700d452ae6a24b977140a9e9e274a\",\"license\":\"MIT\"},\"contracts/src/erc165/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x80ad8fd0a17bb32ad123b37e3a8fd331ddfa0ddf565028b62a8e67071cc1bb60\",\"license\":\"MIT\"},\"contracts/src/interfaces/IDotNugg.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport {Version as V} from '../types/Version.sol';\\n\\ninterface IDotNugg {\\n    struct Rlud {\\n        bool exists;\\n        uint8 r;\\n        uint8 l;\\n        uint8 u;\\n        uint8 d;\\n    }\\n\\n    struct Rgba {\\n        uint8 r;\\n        uint8 g;\\n        uint8 b;\\n        uint8 a;\\n    }\\n\\n    struct Anchor {\\n        Rlud radii;\\n        Coordinate coordinate;\\n    }\\n\\n    struct Coordinate {\\n        uint8 a; // anchorId\\n        uint8 b; // yoffset\\n        bool exists;\\n    }\\n\\n    // struct Collection {\\n    //     uint8 width;\\n    //     uint8 height;\\n    //     uint8 numFeatures;\\n    //     bytes[] defaults;\\n    // }\\n\\n    struct Version {\\n        uint8 width;\\n        uint8 height;\\n        Anchor anchor;\\n        // these must be in same order as canvas receivers, respectively\\n        Coordinate[] calculatedReceivers; // can be empty\\n        Coordinate[] staticReceivers; // can be empty\\n        Rlud expanders;\\n        bytes data;\\n    }\\n\\n    struct Canvas {\\n        Matrix matrix;\\n        Anchor[] receivers;\\n    }\\n\\n    struct Mix {\\n        uint8 feature;\\n        Version version;\\n        Matrix matrix;\\n        Anchor[] receivers;\\n        uint8 yoffset;\\n        uint8 xoffset;\\n    }\\n\\n    // struct Pixel {\\n    //     int8 zindex;\\n    //     Rgba rgba;\\n    //     bool exists;\\n    // }\\n\\n    // struct Pallet {\\n    //     Pixel[] pixels;\\n    // }\\n\\n    struct Matrix {\\n        uint8 width;\\n        uint8 height;\\n        // Pixel[][] data;\\n        V.Memory version;\\n        uint8 currentUnsetX;\\n        uint8 currentUnsetY;\\n        bool init;\\n        uint8 startX;\\n    }\\n}\\n\",\"keccak256\":\"0x41772dae00ae6530a3cb884adf8584a7ff511239c0cb18cc8ede642055ad0334\",\"license\":\"MIT\"},\"contracts/src/interfaces/IResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '../erc165/IERC165.sol';\\n\\ninterface IProcessResolver is IERC165 {\\n    function process(\\n        uint256[][] memory files,\\n        bytes memory data,\\n        bytes memory preProcessData\\n    ) external view returns (uint256[] memory file);\\n\\n    function supportsInterface(bytes4 interfaceId) external view override returns (bool);\\n}\\n\\ninterface IPreProcessResolver is IERC165 {\\n    function preProcess(bytes memory data) external view returns (bytes memory preProcessData);\\n\\n    function supportsInterface(bytes4 interfaceId) external view override returns (bool);\\n}\\n\\ninterface IPostProcessResolver is IERC165 {\\n    function postProcess(\\n        uint256[] memory file,\\n        bytes memory data,\\n        bytes memory preProcessData\\n    ) external view returns (bytes memory res);\\n\\n    function supportsInterface(bytes4 interfaceId) external view override returns (bool);\\n}\\n\\ninterface INuggFtProcessor is IERC165, IPostProcessResolver, IProcessResolver, IPreProcessResolver {\\n    function postProcessor() external view returns (IPostProcessResolver);\\n\\n    function preProcessor() external view returns (IPreProcessResolver);\\n\\n    function processor() external view returns (IProcessResolver);\\n\\n    function supportsInterface(bytes4 interfaceId) external view override(IERC165, IPostProcessResolver, IProcessResolver, IPreProcessResolver) returns (bool);\\n}\\n\",\"keccak256\":\"0x39d2d8a90ac76316a6e6ce6dedbfd5a2aca907f6c36436bb528700aa8ac18b82\",\"license\":\"MIT\"},\"contracts/src/libraries/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\n/**\\n * @title Base64\\n * @author Nugg Labs - @danny7even & @dub6ix\\n * @notice library for encoding bytes into base64\\n */\\nlibrary Base64 {\\n    string internal constant _TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    string internal constant PREFIX_JSON = 'data:application/json;base64,';\\n    string internal constant PREFIX_DOTNUGG = 'data:image/dotnugg;base64,';\\n    string internal constant PREFIX_SVG = 'data:image/svg+xml;base64,';\\n\\n    /**\\n     * @notice wrapper for _encode for svg data\\n     * @param data bytes to encode\\n     * @return base64 string representation of input bytes, prefixed with json base64 prefix\\n     */\\n    function encode(bytes memory data, string memory file) internal pure returns (string memory) {\\n        return string(abi.encodePacked('data:', file, ';base64,', _encode(data)));\\n    }\\n\\n    /**\\n     * @notice Encodes some bytes in base64\\n     * @param data bytes to encode\\n     * @return base64 string representation of input bytes\\n     * @dev Credit to Brecht Devos - <brecht@loopring.org> - under MIT license https://github.com/Brechtpd/base64/blob/main/base64.sol\\n     * @dev modified for solidity v8\\n     */\\n    function _encode(bytes memory data) internal pure returns (bytes memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = _TABLE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {\\n\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                dataPtr := add(dataPtr, 3)\\n\\n                // read 3 bytes\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F)))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F)))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(6, input), 0x3F)))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore(resultPtr, shl(248, mload(add(tablePtr, and(input, 0x3F)))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n            }\\n            case 2 {\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xdaa17159737cb8f7d679c0a18e138126b40a325ac6cd363b6b4eeaeea56e87a6\",\"license\":\"MIT\"},\"contracts/src/libraries/BitReader.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '../libraries/ShiftLib.sol';\\n\\nlibrary BitReader {\\n    using ShiftLib for uint256;\\n    using Event for uint256;\\n    using Uint256 for uint256;\\n\\n    struct Memory {\\n        uint256[] dat;\\n        uint256 moves;\\n        uint256 pos;\\n    }\\n\\n    function init(uint256[] memory input) internal view returns (bool err, Memory memory m) {\\n        if (input.length == 0) return (true, m);\\n\\n        m.dat = input;\\n\\n        m.moves = 2;\\n\\n        m.dat = new uint256[](input.length);\\n\\n        Event.log(input.length, 'input.length');\\n\\n        for (uint256 i = input.length; i > 0; i--) {\\n            m.dat[i - 1] = input[input.length - i];\\n        }\\n\\n        // for (uint256 i = 1; i < input[0] + 1; i++) {\\n        //     m.dat[input[0] - i] = input[i];\\n        // }\\n    }\\n\\n    function peek(Memory memory m, uint256 bits) internal pure returns (uint256 res) {\\n        res = m.dat[0] & ShiftLib.mask(bits);\\n    }\\n\\n    function select(Memory memory m, uint256 bits) internal pure returns (uint256 res) {\\n        res = m.dat[0] & ShiftLib.mask(bits);\\n\\n        m.dat[0] = m.dat[0] >> bits;\\n\\n        m.pos += bits;\\n\\n        if (m.pos >= 128) {\\n            uint256 ptr = (m.moves / 2);\\n            if (ptr < m.dat.length) {\\n                m.dat[0] <<= m.pos - 128;\\n                uint256 move = m.dat[ptr] & ShiftLib.mask(128);\\n                m.dat[ptr] >>= 128;\\n                m.dat[0] |= (move << 128);\\n                m.dat[0] >>= (m.pos - 128);\\n                m.moves++;\\n                m.pos -= 128;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x369338e4dab4d150fcc0ba3aa0ea5afc1fe8260a6b25cbc86693d5dc1efebd3e\",\"license\":\"MIT\"},\"contracts/src/libraries/Byte.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\n/**\\n * @dev Bytes1 operations.\\n */\\nlibrary Byte {\\n    bytes32 internal constant ALPHABET = '0123456789abcdef';\\n\\n    function toAscii(bytes1 value) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2);\\n        for (uint256 i = 2; i > 0; i--) {\\n            buffer[i - 1] = ALPHABET[uint8(value) & 0xf];\\n            value >>= 4;\\n        }\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x70187fc2acfa2c13f534f742ab38b7ca5036fdb069f8b4e1107ba5831944b362\",\"license\":\"MIT\"},\"contracts/src/libraries/Bytes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport './Byte.sol';\\n\\n/**\\n * @dev Bytes operations.\\n */\\nlibrary Bytes {\\n    using Byte for bytes1;\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1, 'toUint8_outOfBounds');\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint4(bytes memory _bytes, uint256 _start) internal pure returns (uint8, uint8) {\\n        uint8 tempUint = toUint8(_bytes, _start);\\n        return (tempUint >> 4, tempUint & 0xf);\\n    }\\n\\n    function toInt8(bytes memory _bytes, uint256 _start) internal pure returns (int8) {\\n        uint8 tempUint = toUint8(_bytes, _start);\\n        return (int8(~tempUint) + 1) * -1;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, 'toUint16_outOfBounds');\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, 'toUint64_outOfBounds');\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toAscii(bytes memory val) internal pure returns (string memory res) {\\n        for (uint8 i = 0; i < val.length; i++) {\\n            res = string(abi.encodePacked(res, val[i].toAscii()));\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x875014d8021ba67e7beec7e2ef5bcb5bb939b93bce28ee900c0c3c828b376ded\",\"license\":\"MIT\"},\"contracts/src/libraries/ShiftLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '../../test/Event.sol';\\n\\nlibrary ShiftLib {\\n    using Event for uint256;\\n\\n    function reverse(uint256 input) internal pure returns (uint256 v) {\\n        v = input;\\n\\n        // v =\\n        //     ((v & 0xF0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0) >> 4) |\\n        //     ((v & 0x0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F) << 4);\\n\\n        // swap bytes\\n        v =\\n            ((v & 0xFF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00) >> 8) |\\n            ((v & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) << 8);\\n\\n        // swap 2-byte long pairs\\n        v =\\n            ((v & 0xFFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000) >> 16) |\\n            ((v & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) << 16);\\n\\n        // swap 4-byte long pairs\\n        v =\\n            ((v & 0xFFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000) >> 32) |\\n            ((v & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) << 32);\\n\\n        // swap 8-byte long pairs\\n        v =\\n            ((v & 0xFFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF0000000000000000) >> 64) |\\n            ((v & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) << 64);\\n\\n        // swap 16-byte long pairs\\n        v = (v >> 128) | (v << 128);\\n    }\\n\\n    function rbit(\\n        uint256[] memory input,\\n        uint256 b,\\n        uint256 pos\\n    ) internal pure returns (uint256 res) {\\n        require(pos <= input.length * 256, 'SL:B4:0');\\n        res = rbit(input[pos / 256], b, pos % 256);\\n    }\\n\\n    function rbit(\\n        uint256 input,\\n        uint256 b,\\n        uint256 pos\\n    ) internal pure returns (uint256 res) {\\n        input = reverse(input);\\n        require(pos <= 0xff, 'SL:B4:0');\\n        uint256 _mask = mask(b);\\n        assembly {\\n            res := and(shr(pos, input), _mask)\\n        }\\n    }\\n\\n    function rbit1(uint256[] memory input, uint256 pos) internal pure returns (bool res) {\\n        require(pos <= input.length * 256, 'SL:B4:0');\\n        res = rbit1(input[pos / 256], pos % 256);\\n    }\\n\\n    function rbit1(uint256 input, uint256 pos) internal pure returns (bool res) {\\n        require(pos <= 0xff, 'SL:B4:0');\\n        input = reverse(input);\\n\\n        assembly {\\n            res := and(shr(pos, input), 0x3)\\n        }\\n    }\\n\\n    function bit(\\n        uint256[] memory input,\\n        uint256 b,\\n        uint256 pos\\n    ) internal pure returns (uint256 res) {\\n        require(pos <= input.length * 256, 'SL:B4:0');\\n        res = bit(input[pos / 256], b, pos % 256);\\n    }\\n\\n    function bit1(uint256[] memory input, uint256 pos) internal pure returns (bool res) {\\n        require(pos <= input.length * 256, 'SL:B4:0');\\n        res = bit1(input[pos / 256], pos % 256);\\n    }\\n\\n    function bit(\\n        uint256[] memory input,\\n        uint256 b,\\n        uint256 pos,\\n        uint256 update\\n    ) internal pure returns (uint256 res) {\\n        res = bit(input[pos / 256], b, pos % 256, update);\\n    }\\n\\n    function bit1(\\n        uint256[] memory input,\\n        uint256 pos,\\n        bool update\\n    ) internal pure returns (uint256 res) {\\n        res = bit1(input[pos / 256], pos % 256, update);\\n    }\\n\\n    function submask(uint256 bits, uint256 offset) internal pure returns (uint256 res) {\\n        assembly {\\n            res := shl(not(sub(exp(2, bits), 1)), offset)\\n        }\\n    }\\n\\n    function fullsubmask(uint256 bits, uint256 offset) internal pure returns (uint256 res) {\\n        res = ~(mask(bits) << offset);\\n    }\\n\\n    function mask(uint256 bits) internal pure returns (uint256 res) {\\n        assembly {\\n            res := sub(exp(2, bits), 1)\\n        }\\n    }\\n\\n    function bit(\\n        uint256 input,\\n        uint256 b,\\n        uint256 pos\\n    ) internal pure returns (uint256 res) {\\n        require(pos <= 0xff, 'SL:B4:0');\\n        uint256 _mask = mask(b);\\n\\n        assembly {\\n            res := and(shr(pos, input), _mask)\\n        }\\n    }\\n\\n    function bit(\\n        uint256 input,\\n        uint256 b,\\n        uint256 pos,\\n        uint256 update\\n    ) internal pure returns (uint256 res) {\\n        uint256 offset;\\n        uint256 _mask = mask(b);\\n\\n        assembly {\\n            offset := _mask\\n        }\\n\\n        assembly {\\n            if gt(update, offset) {\\n                revert(0, 0)\\n            }\\n            if gt(pos, 0xff) {\\n                revert(0, 0)\\n            }\\n            input := and(not(shl(pos, _mask)), input)\\n            res := or(input, shl(pos, update))\\n        }\\n    }\\n\\n    function bit1(uint256 input, uint256 pos) internal pure returns (bool res) {\\n        require(pos <= 0xff, 'SL:B4:0');\\n        assembly {\\n            res := and(shr(pos, input), 0x3)\\n        }\\n    }\\n\\n    function bit1(\\n        uint256 input,\\n        uint256 pos,\\n        bool update\\n    ) internal pure returns (uint256 res) {\\n        require(pos <= 0xff, 'SL:B4:0');\\n        uint256 tu = update ? 0x1 : 0x0;\\n        assembly {\\n            input := and(not(shl(pos, 0x3)), input)\\n            res := or(input, shl(pos, tu))\\n        }\\n    }\\n\\n    // function bit3(uint256 input, uint256 pos) internal pure  returns (uint256 res) {\\n    //     require(pos <= 0xff, 'SL:B4:0');\\n\\n    //     assembly {\\n    //         res := and(shr(pos, input), 0xb)\\n    //     }\\n    // }\\n\\n    // function bit4(uint256 input, uint256 pos) internal pure  returns (uint256 res) {\\n    //     require(pos <= 0xff, 'SL:B4:0');\\n\\n    //     assembly {\\n    //         res := and(shr(pos, input), 0xf)\\n    //     }\\n    // }\\n\\n    // function bit6(uint256 input, uint256 pos) internal pure  returns (uint256 res) {\\n    //     require(pos <= 0xff, 'SL:B4:0');\\n\\n    //     assembly {\\n    //         res := and(shr(pos, input), 0x3f)\\n    //     }\\n    // }\\n\\n    // function bit8(uint256 input, uint256 pos) internal pure  returns (uint256 res) {\\n    //     require(pos <= 0xff, 'SL:B4:0');\\n\\n    //     assembly {\\n    //         res := and(shr(pos, input), 0xff)\\n    //     }\\n    // }\\n\\n    // function bit12(uint256 input, uint256 pos) internal pure  returns (uint16 res) {\\n    //     require(pos <= 0xff, 'SL:B4:0');\\n\\n    //     assembly {\\n    //         res := and(shr(pos, input), 0xfff)\\n    //     }\\n    // }\\n\\n    // function bit16(uint256 input, uint256 pos) internal pure  returns (uint16 res) {\\n    //     require(pos <= 0xff, 'SL:B4:0');\\n\\n    //     assembly {\\n    //         res := and(shr(pos, input), 0xffff)\\n    //     }\\n    // }\\n\\n    // function bit20(uint256 input, uint256 pos) internal pure  returns (uint16 res) {\\n    //     require(pos <= 0xff, 'SL:B4:0');\\n\\n    //     assembly {\\n    //         res := and(shr(pos, input), 0xfffff)\\n    //     }\\n    // }\\n\\n    // function bit24(uint256 input, uint256 pos) internal pure  returns (uint16 res) {\\n    //     require(pos <= 0xff, 'SL:B4:0');\\n\\n    //     assembly {\\n    //         res := and(shr(pos, input), 0xffffff)\\n    //     }\\n    // }\\n\\n    // function bit28(uint256 input, uint256 pos) internal pure  returns (uint16 res) {\\n    //     require(pos <= 0xff, 'SL:B4:0');\\n\\n    //     assembly {\\n    //         res := and(shr(pos, input), 0xfffffff)\\n    //     }\\n    // }\\n\\n    // function bit32(uint256 input, uint256 pos) internal pure  returns (uint16 res) {\\n    //     require(pos <= 0xff, 'SL:B4:0');\\n\\n    //     assembly {\\n    //         res := and(shr(pos, input), 0xffffffff)\\n    //     }\\n    // }\\n\\n    // function bit1(\\n    //     uint256 input,\\n    //     uint256 pos,\\n    //     bool update\\n    // ) internal pure  returns (uint256 res) {\\n    //     require(pos <= 0xff, 'SL:B4:0');\\n    //     uint256 tu = update ? 0x1 : 0x0;\\n    //     assembly {\\n    //         input := and(not(shl(pos, 0x3)), input)\\n    //         res := or(input, shl(pos, tu))\\n    //     }\\n    // }\\n\\n    // function bit3(\\n    //     uint256 input,\\n    //     uint256 pos,\\n    //     uint256 update\\n    // ) internal pure  returns (uint256 res) {\\n    //     require(update <= 0xb && pos <= 0xff, 'SL:B3:0');\\n    //     assembly {\\n    //         input := and(not(shl(pos, 0xb)), input)\\n    //         res := or(input, shl(pos, update))\\n    //     }\\n    // }\\n\\n    // function bit4(\\n    //     uint256 input,\\n    //     uint256 pos,\\n    //     uint256 update\\n    // ) internal pure  returns (uint256 res) {\\n    //     require(update <= 0xf && pos <= 0xff, 'SL:B4:0');\\n    //     assembly {\\n    //         input := and(not(shl(pos, 0xf)), input)\\n    //         res := or(input, shl(pos, update))\\n    //     }\\n    // }\\n\\n    // function bit6(\\n    //     uint256 input,\\n    //     uint256 pos,\\n    //     uint256 update\\n    // ) internal pure  returns (uint256 res) {\\n    //     require(update <= 0xff && pos <= 0xff, 'SL:B8:0');\\n    //     assembly {\\n    //         input := and(not(shl(pos, 0x3f)), input)\\n    //         res := or(input, shl(pos, update))\\n    //     }\\n    // }\\n\\n    // function bit8(\\n    //     uint256 input,\\n    //     uint256 pos,\\n    //     uint256 update\\n    // ) internal pure  returns (uint256 res) {\\n    //     require(update <= 0xff && pos <= 0xff, 'SL:B8:0');\\n    //     assembly {\\n    //         input := and(not(shl(pos, 0xff)), input)\\n    //         res := or(input, shl(pos, update))\\n    //     }\\n    // }\\n\\n    // function bit12(\\n    //     uint256 input,\\n    //     uint256 pos,\\n    //     uint256 update\\n    // ) internal pure  returns (uint256 res) {\\n    //     require(update <= 0xfff && pos <= 0xff, 'SL:B12:0');\\n    //     assembly {\\n    //         input := and(not(shl(pos, 0xfff)), input)\\n    //         res := or(input, shl(pos, update))\\n    //     }\\n    // }\\n\\n    // function bit16(\\n    //     uint256 input,\\n    //     uint256 pos,\\n    //     uint256 update\\n    // ) internal pure  returns (uint256 res) {\\n    //     require(update <= 0xffff && pos <= 0xff, 'SL:B16:0');\\n    //     assembly {\\n    //         input := and(not(shl(pos, 0xffff)), input)\\n    //         res := or(input, shl(pos, update))\\n    //     }\\n    // }\\n\\n    // function bit20(\\n    //     uint256 input,\\n    //     uint256 pos,\\n    //     uint256 update\\n    // ) internal pure  returns (uint256 res) {\\n    //     require(update <= 0xfffff && pos <= 0xff, 'SL:B16:0');\\n    //     assembly {\\n    //         input := and(not(shl(pos, 0xfffff)), input)\\n    //         res := or(input, shl(pos, update))\\n    //     }\\n    // }\\n\\n    // function bit24(\\n    //     uint256 input,\\n    //     uint256 pos,\\n    //     uint256 update\\n    // ) internal pure  returns (uint256 res) {\\n    //     require(update <= 0xffffff && pos <= 0xff, 'SL:B16:0');\\n    //     assembly {\\n    //         input := and(not(shl(pos, 0xffffff)), input)\\n    //         res := or(input, shl(pos, update))\\n    //     }\\n    // }\\n\\n    // function bit28(\\n    //     uint256 input,\\n    //     uint256 pos,\\n    //     uint256 update\\n    // ) internal pure  returns (uint256 res) {\\n    //     require(update <= 0xfffffff && pos <= 0xff, 'SL:B16:0');\\n    //     assembly {\\n    //         input := and(not(shl(pos, 0xfffffff)), input)\\n    //         res := or(input, shl(pos, update))\\n    //     }\\n    // }\\n\\n    // function bit32(\\n    //     uint256 input,\\n    //     uint256 pos,\\n    //     uint256 update\\n    // ) internal pure  returns (uint256 res) {\\n    //     require(update <= 0xffffffff && pos <= 0xff, 'SL:B16:0');\\n    //     assembly {\\n    //         input := and(not(shl(pos, 0xffffffff)), input)\\n    //         res := or(input, shl(pos, update))\\n    //     }\\n    // }\\n}\\n\",\"keccak256\":\"0x326137884d01116f9ffe7f6f41cd89ac7a6d7827c6ea53e72bc7bb9719466d1d\",\"license\":\"MIT\"},\"contracts/src/libraries/Uint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\n/*\\n * @dev Uint operations.\\n */\\nlibrary Uint8 {\\n    function toByte(uint8 u) internal pure returns (bytes1 res) {\\n        res = bytes1(u);\\n    }\\n\\n    function toString(uint8 u) internal pure returns (string memory res) {\\n        res = Uint256.toString(uint256(u));\\n    }\\n}\\n\\n/*\\n * @dev Uint operations.\\n */\\nlibrary Uint256 {\\n    bytes16 private constant ALPHABET = '0123456789abcdef';\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toAscii(uint256 value) internal pure returns (bytes memory buffer) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return '0';\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n\\n        buffer = new bytes(digits);\\n\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return buffer;\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        return string(toAscii(value));\\n    }\\n\\n    /// @notice Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n    /// @dev Credit to Open Zeppelin under MIT license https://github.com/OpenZeppelin/openzeppelin-contracts/blob/243adff49ce1700e0ecb99fe522fb16cff1d1ddc/contracts/utils/Strings.sol#L55\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = '0';\\n        buffer[1] = 'x';\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = ALPHABET[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, 'Strings: hex length insufficient');\\n        return string(buffer);\\n    }\\n\\n    function toHexStringNoPrefix(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length);\\n        for (uint256 i = buffer.length; i > 0; i--) {\\n            buffer[i - 1] = ALPHABET[value & 0xf];\\n            value >>= 4;\\n        }\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x2806f16d3c16df4377ea15ada98d490f6b9b27304f11df413b6a49a0c344379f\",\"license\":\"MIT\"},\"contracts/src/logic/Anchor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '../interfaces/IDotNugg.sol';\\nimport './Matrix.sol';\\n\\nlibrary Anchor {\\n    using Matrix for IDotNugg.Matrix;\\n    using Version for Version.Memory;\\n\\n    /*\\n     * @notice AKA fuck\\n     * @dev this is where we implement the logic you wrote in go\\n     */\\n\\n    function convertReceiversToAnchors(IDotNugg.Mix memory mix) internal pure {\\n        IDotNugg.Coordinate[] memory anchors;\\n        uint8 stat = 0;\\n        uint8 cal = 0;\\n\\n        for (uint8 i = 0; i < mix.version.staticReceivers.length; i++) {\\n            IDotNugg.Coordinate memory coordinate;\\n            if (mix.version.staticReceivers[i].exists) {\\n                stat++;\\n                coordinate = mix.version.staticReceivers[i];\\n                mix.receivers[i].coordinate.a = coordinate.b;\\n                mix.receivers[i].coordinate.b = coordinate.a;\\n                mix.receivers[i].coordinate.exists = true;\\n            } else if (mix.version.calculatedReceivers[i].exists) {\\n                // if (mix.feature != 0) continue;\\n\\n                cal++;\\n                if (anchors.length == 0) anchors = getAnchors(mix.matrix);\\n                coordinate = calculateReceiverCoordinate(mix, mix.version.calculatedReceivers[i], anchors);\\n                fledgeOutTheRluds(mix, coordinate, i);\\n            }\\n        }\\n    }\\n\\n    // receiver := { feature: EYES, zindex: 2, yoffset: +2 }\\n    // receiver := { feature: EARS, zindex: 2, yoffset: +2 }\\n    // receiver := { feature: GLASSES, zindex: 2, yoffset: +2 }\\n    // receiver := { feature: MOUTH, zindex: 3, yoffset: +0 }\\n    // receiver := { feature: HAIR, zindex: 1, yoffset: +1 }\\n    // receiver := { feature: SAUCE, zindex: 4, yoffset: +0 }\\n    // receiver := { feature: HAT, zindex: 1, yoffset: +1 }\\n    // receiver := { feature: SPECIAL, zindex: 0, yoffset: +0 }\\n\\n    function fledgeOutTheRluds(\\n        IDotNugg.Mix memory mix,\\n        IDotNugg.Coordinate memory coordinate,\\n        uint8 index\\n    ) internal pure {\\n        IDotNugg.Rlud memory radii;\\n\\n        while (coordinate.a < mix.matrix.width - 1 && mix.matrix.version.bigMatrixHasPixelAt(coordinate.a + (radii.r + 1), coordinate.b)) {\\n            radii.r++;\\n        }\\n        while (coordinate.a != 0 && coordinate.a >= (radii.l + 1) && mix.matrix.version.bigMatrixHasPixelAt(coordinate.a - (radii.l + 1), coordinate.b)) {\\n            radii.l++;\\n        }\\n        while (coordinate.b != 0 && coordinate.b >= (radii.u + 1) && mix.matrix.version.bigMatrixHasPixelAt(coordinate.a, coordinate.b - (radii.u + 1))) {\\n            radii.u++;\\n        }\\n        while (coordinate.b < mix.matrix.height - 1 && mix.matrix.version.bigMatrixHasPixelAt(coordinate.a, coordinate.b + (radii.d + 1))) {\\n            radii.d++;\\n        }\\n\\n        if (!mix.receivers[index].coordinate.exists) {\\n            mix.receivers[index] = IDotNugg.Anchor({radii: radii, coordinate: coordinate});\\n        }\\n    }\\n\\n    function calculateReceiverCoordinate(\\n        IDotNugg.Mix memory mix,\\n        IDotNugg.Coordinate memory calculatedReceiver,\\n        IDotNugg.Coordinate[] memory anchors\\n    ) internal pure returns (IDotNugg.Coordinate memory coordinate) {\\n        coordinate.a = anchors[calculatedReceiver.a].a;\\n        coordinate.b = anchors[calculatedReceiver.a].b;\\n        coordinate.exists = true;\\n\\n        if (calculatedReceiver.b < 32) {\\n            coordinate.b = coordinate.b - calculatedReceiver.b;\\n        } else {\\n            coordinate.b = coordinate.b + (calculatedReceiver.b - 32);\\n        }\\n\\n        while (!mix.matrix.version.bigMatrixHasPixelAt(coordinate.a, coordinate.b)) {\\n            if (anchors[0].b > coordinate.b) {\\n                coordinate.b++;\\n            } else {\\n                coordinate.b--;\\n            }\\n        }\\n        return coordinate;\\n    }\\n\\n    function getAnchors(IDotNugg.Matrix memory matrix) internal pure returns (IDotNugg.Coordinate[] memory anchors) {\\n        (uint8 topOffset, uint8 bottomOffset, IDotNugg.Coordinate memory center) = getBox(matrix);\\n\\n        anchors = new IDotNugg.Coordinate[](5);\\n\\n        anchors[0] = center; // center\\n\\n        anchors[1] = IDotNugg.Coordinate({a: center.a, b: center.b - topOffset, exists: true}); // top\\n\\n        uint8 upperOffset = topOffset;\\n        if (upperOffset % 2 != 0) {\\n            upperOffset++;\\n        }\\n        anchors[2] = IDotNugg.Coordinate({a: center.a, b: center.b - (upperOffset / 2), exists: true}); // inner top\\n\\n        uint8 lowerOffset = bottomOffset;\\n        if (lowerOffset % 2 != 0) {\\n            lowerOffset++;\\n        }\\n        anchors[3] = IDotNugg.Coordinate({a: center.a, b: center.b + (lowerOffset / 2), exists: true}); // inner bottom\\n\\n        anchors[4] = IDotNugg.Coordinate({a: center.a, b: center.b + bottomOffset, exists: true}); // bottom\\n    }\\n\\n    function getBox(IDotNugg.Matrix memory matrix)\\n        internal\\n        pure\\n        returns (\\n            uint8 topOffset,\\n            uint8 bottomOffset,\\n            IDotNugg.Coordinate memory center\\n        )\\n    {\\n        center.a = (matrix.width) / 2;\\n        center.b = (matrix.height) / 2;\\n        center.exists = true;\\n\\n        bool topFound = false;\\n        bool bottomFound = false;\\n        bool sideFound = false;\\n        bool shouldExpandSide = true;\\n\\n        topOffset = 1;\\n        bottomOffset = 1;\\n        uint8 sideOffset = 1;\\n\\n        bool allFound = false;\\n\\n        while (!allFound) {\\n            if (shouldExpandSide = !shouldExpandSide && !sideFound) {\\n                if (\\n                    matrix.version.bigMatrixHasPixelAt(center.a - (sideOffset + 1), center.b - topOffset) &&\\n                    // potential top left\\n                    matrix.version.bigMatrixHasPixelAt(center.a + (sideOffset + 1), center.b - topOffset) &&\\n                    // potential top right\\n                    matrix.version.bigMatrixHasPixelAt(center.a - (sideOffset + 1), center.b + bottomOffset) &&\\n                    // potential bot left\\n                    matrix.version.bigMatrixHasPixelAt(center.a + (sideOffset + 1), center.b + bottomOffset)\\n                    // potential bot right\\n                ) {\\n                    sideOffset++;\\n                } else {\\n                    sideFound = true;\\n                }\\n            }\\n            if (!topFound) {\\n                if (\\n                    center.b - topOffset > 0 &&\\n                    matrix.version.bigMatrixHasPixelAt(center.a - sideOffset, center.b - (topOffset + 1)) &&\\n                    // potential top left\\n                    matrix.version.bigMatrixHasPixelAt(center.a + sideOffset, center.b - (topOffset + 1))\\n                    // potential top right\\n                ) {\\n                    topOffset++;\\n                } else {\\n                    topFound = true;\\n                }\\n            }\\n            if (!bottomFound) {\\n                if (\\n                    center.b + bottomOffset < matrix.height - 1 &&\\n                    matrix.version.bigMatrixHasPixelAt(center.a - sideOffset, center.b + (bottomOffset + 1)) &&\\n                    // potential bot left\\n                    matrix.version.bigMatrixHasPixelAt(center.a + sideOffset, center.b + (bottomOffset + 1))\\n                    // potenetial bot right\\n                ) {\\n                    bottomOffset++;\\n                } else {\\n                    bottomFound = true;\\n                }\\n            }\\n            if (bottomFound && topFound && sideFound) allFound = true;\\n        }\\n\\n        if (topOffset != bottomOffset) {\\n            uint8 newHeight = topOffset + bottomOffset + 1;\\n            uint8 relativeCenter = (newHeight % 2 == 0 ? newHeight : newHeight + 1) / 2;\\n            uint8 newCenter = relativeCenter + center.b - 1 - topOffset;\\n            if (newCenter > center.b) {\\n                uint8 diff = newCenter - center.b;\\n                topOffset += diff;\\n                bottomOffset > diff ? bottomOffset = bottomOffset - diff : bottomOffset = diff - bottomOffset;\\n            } else {\\n                uint8 diff = center.b - newCenter;\\n                topOffset > diff ? topOffset = topOffset - diff : topOffset = diff - topOffset;\\n                bottomOffset += diff;\\n            }\\n            center.b = newCenter;\\n        }\\n    }\\n}\\n// Whatcha gonna do with all that junk\\n// All that junk inside your trunk\\n// I'ma get get get get you drunk\\n// Get you love drunk off my hump\\n// My hump my hump my hump my hump my hump\\n// My hump my hump my hump my lovely little lumps\\n// Check it out\\n// I drive these brothers crazy\\n// I do it on the daily\\n// They treat me really nicely\\n// They buy me all these ice\\n// Dolce and Gabbana\\n// Fendi and Madonna\\n// Caring they be sharin'\\n// All their money got me wearing fly\\n// Whether I ain't askin'\\n// They say they love mah ass in\\n// Seven jeans\\n// True religion\\n// I say no\\n// But they keep givin'\\n// So I keep on takin'\\n// And no I ain't takin'\\n// We can keep on datin'\\n// Now keep on demonstratin'\\n// My love my love my love my love\\n// You love my lady lumps\\n// My hump my hump my hump\\n// My humps they got you\\n// She's got me spending\\n// Oh, spending all your money on me\\n// And spending time on me\\n// She's got me spending\\n// Oh, spending all your money on me\\n// Uh on me on me\\n// Whatcha gonna do with all that junk\\n// All that junk inside that trunk\\n// I'm a get get get get you drunk\\n// Get you love drunk off my hump\\n// Whatcha gonna do with all that ass\\n// All that ass inside your jeans\\n// I'm a make make make make you scream\\n// Make you scream make you scream\\n// 'Cause of my humps my hump my hump my hump\\n// My hump my hump my hump my lovely lady lumps\\n// Check it out\\n// I met a girl down at the disco\\n// She said hey hey hey ya lets go\\n// I can be ya baby, you could be my honey\\n// Let's spend time not money\\n// And mix your milk with my coco puff\\n// Milky milky coco\\n// Mix your milk with my coco puff\\n// Milky milky\\n// Right\\n// They say I'm really sexy\\n// The boys they wanna sex me\\n// They always standin' next to me\\n// Always dancin' next to me\\n// Tryin' a feel my hump hump\\n// Lookin' at my lump lump\\n// You can look but you can't touch it\\n// If you touch it\\n// I'm a start some drama\\n// You don't want no drama\\n// No no drama no no no no drama\\n// So don't pull on my hand boy\\n// You ain't my man boy\\n// I'm just tryin' a dance boy\\n// And move my hump\\n// My hump my hump my hump my hump\\n// My hump my hump my hump my hump my hump my hump\\n// My lovely lady lumps\\n// My lovely lady lumps my lovely lady lumps\\n// In the back and in the front\\n// My loving got you\\n// She's got me spending\\n// Oh, spending all your money on me\\n// And spending time on me\\n// She's got me spending\\n// Oh, spending all your money on me\\n// Uh on me on me\\n// Whatcha gonna do with all that junk\\n// All that junk inside that trunk\\n// I'm a get get get get you drunk\\n// Get you love drunk off my hump\\n// Whatcha gonna do with all that ass\\n// All that ass inside your jeans\\n// I'm a make make make make you scream\\n// Make you scream make you scream\\n// Whatcha gonna do with all that junk\\n// All that junk inside that trunk\\n// I'm a get get get get you drunk\\n// Get you love drunk off this hump\\n// Whatcha gonna do with all that breast\\n// All that breast inside that shirt\\n// I'm a make make make make you work\\n// Make you work work make you work\\n// She's got me spending\\n// Oh, spending all your money on me\\n// And spending time on me\\n// She's got me spending\\n// Oh, spending all your money on me\\n// Uh on me on me\\n\",\"keccak256\":\"0xf033551b702fff345e08473c670223bc5b9b4b0eae319dffa9b22e08ae247d75\",\"license\":\"MIT\"},\"contracts/src/logic/Calculator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport './Matrix.sol';\\nimport './Rgba.sol';\\nimport './Anchor.sol';\\n\\nimport '../types/Descriptor.sol';\\nimport '../types/Version.sol';\\nimport '../types/Pixel.sol';\\n\\nimport '../interfaces/IDotNugg.sol';\\n\\nlibrary Calculator {\\n    using Rgba for IDotNugg.Rgba;\\n    using Matrix for IDotNugg.Matrix;\\n    using Pixel for uint256;\\n    using Event for uint256;\\n\\n    /**\\n     * @notice\\n     * @dev\\n     */\\n    function combine(\\n        uint256 featureLen,\\n        uint8 width,\\n        uint256 descriptor,\\n        Version.Memory[][] memory versions\\n    ) internal view returns (IDotNugg.Matrix memory resa) {\\n        IDotNugg.Canvas memory canvas;\\n        canvas.matrix = Matrix.create(width, width);\\n        canvas.receivers = new IDotNugg.Anchor[](featureLen);\\n        IDotNugg.Coordinate memory coord;\\n        coord.a = width / 2 + 1;\\n        coord.b = width / 2 + 1;\\n        coord.exists = true;\\n        IDotNugg.Rlud memory r;\\n        for (uint8 i = 0; i < featureLen; i++) {\\n            canvas.receivers[i] = IDotNugg.Anchor({coordinate: coord, radii: r});\\n        }\\n        canvas.matrix.width = width;\\n        canvas.matrix.height = width;\\n\\n        IDotNugg.Mix memory mix;\\n        mix.matrix = Matrix.create(width, width);\\n        mix.receivers = new IDotNugg.Anchor[](featureLen);\\n\\n        // IDotNugg.Item[] memory items = Decoder.parseItems(inputs, featureLen);\\n\\n        for (uint8 i = 0; i < versions.length; i++) {\\n            if (versions[i].length > 0) {\\n                setMix(mix, versions[i], pickVersionIndex(canvas, versions[i]));\\n\\n                formatForCanvas(canvas, mix);\\n\\n                postionForCanvas(canvas, mix, descriptor);\\n\\n                mergeToCanvas(canvas, mix);\\n\\n                calculateReceivers(mix);\\n\\n                updateReceivers(canvas, mix);\\n            }\\n        }\\n\\n        return canvas.matrix;\\n    }\\n\\n    /**\\n     * @notice\\n     * @devg\\n     */\\n    function postionForCanvas(\\n        IDotNugg.Canvas memory canvas,\\n        IDotNugg.Mix memory mix,\\n        uint256 descriptor\\n    ) internal view {\\n        IDotNugg.Anchor memory receiver = canvas.receivers[mix.feature];\\n        IDotNugg.Anchor memory anchor = mix.version.anchor;\\n\\n        // (bool overExists, uint256 overX, uint256 overY) = Descriptor.receiverOverride(descriptor, mix.feature);\\n\\n        // if (overExists) {\\n        //     receiver.coordinate.a = uint8(overX);\\n        //     receiver.coordinate.b = uint8(overY);\\n        // }\\n\\n        uint256(mix.feature).log('mix.feature');\\n\\n        uint256(anchor.coordinate.a).log(\\n            'anchor.coordinate.a',\\n            anchor.coordinate.b,\\n            'anchor.coordinate.b',\\n            receiver.coordinate.a,\\n            'receiver.coordinate.a',\\n            receiver.coordinate.b,\\n            'receiver.coordinate.b'\\n        );\\n        mix.xoffset = receiver.coordinate.a > anchor.coordinate.a ? receiver.coordinate.a - anchor.coordinate.a : 0;\\n        mix.yoffset = receiver.coordinate.b > anchor.coordinate.b ? receiver.coordinate.b - anchor.coordinate.b : 0;\\n\\n        canvas.matrix.moveTo(mix.xoffset, mix.yoffset, mix.matrix.width, mix.matrix.height);\\n    }\\n\\n    /**\\n     * @notice\\n     * @dev\\n     */\\n    function formatForCanvas(IDotNugg.Canvas memory canvas, IDotNugg.Mix memory mix) internal pure {\\n        IDotNugg.Anchor memory receiver = canvas.receivers[mix.feature];\\n        IDotNugg.Anchor memory anchor = mix.version.anchor;\\n\\n        if (mix.version.expanders.l != 0 && anchor.radii.l != 0 && anchor.radii.l <= receiver.radii.l) {\\n            uint8 amount = receiver.radii.l - anchor.radii.l;\\n            mix.matrix.addColumnsAt(mix.version.expanders.l - 1, amount);\\n            anchor.coordinate.a += amount;\\n            if (mix.version.expanders.r > 0) mix.version.expanders.r += amount;\\n        }\\n        if (mix.version.expanders.r != 0 && anchor.radii.r != 0 && anchor.radii.r <= receiver.radii.r) {\\n            mix.matrix.addColumnsAt(mix.version.expanders.r - 1, receiver.radii.r - anchor.radii.r);\\n        }\\n        if (mix.version.expanders.d != 0 && anchor.radii.d != 0 && anchor.radii.d <= receiver.radii.d) {\\n            uint8 amount = receiver.radii.d - anchor.radii.d;\\n            mix.matrix.addRowsAt(mix.version.expanders.d, amount);\\n            anchor.coordinate.b += amount;\\n            if (mix.version.expanders.u > 0) mix.version.expanders.u += amount;\\n        }\\n        if (mix.version.expanders.u != 0 && anchor.radii.u != 0 && anchor.radii.u <= receiver.radii.u) {\\n            mix.matrix.addRowsAt(mix.version.expanders.u, receiver.radii.u - anchor.radii.u);\\n        }\\n    }\\n\\n    /**\\n     * @notice\\n     * @dev\\n     * makes the sorts versions\\n     */\\n    function pickVersionIndex(IDotNugg.Canvas memory canvas, Version.Memory[] memory versions) internal pure returns (uint8) {\\n        require(versions.length > 0, 'CALC:PVI:0');\\n        if (versions.length == 1) {\\n            return 0;\\n        }\\n        uint8 index = uint8(versions.length) - 1;\\n\\n        uint256 feature = (versions[0].data >> 75) & ShiftLib.mask(3);\\n\\n        while (index > 0) {\\n            uint256 bits = (versions[index].data >> 27) & ShiftLib.mask(24);\\n            IDotNugg.Rlud memory anchorRadii = IDotNugg.Rlud({\\n                r: uint8((bits >> 18) & ShiftLib.mask(6)),\\n                l: uint8((bits >> 12) & ShiftLib.mask(6)),\\n                u: uint8((bits >> 6) & ShiftLib.mask(6)),\\n                d: uint8((bits) & ShiftLib.mask(6)),\\n                exists: true\\n            });\\n\\n            if (checkRluds(anchorRadii, canvas.receivers[feature].radii)) {\\n                return index;\\n            }\\n            index = index - 1;\\n        }\\n\\n        return 0;\\n    }\\n\\n    function checkRluds(IDotNugg.Rlud memory r1, IDotNugg.Rlud memory r2) internal pure returns (bool) {\\n        return (r1.r <= r2.r && r1.l <= r2.l) || (r1.u <= r2.u && r1.d <= r2.d);\\n    }\\n\\n    /**\\n     * @notice\\n     * @dev done\\n     * makes the sorts versions\\n     */\\n    function setMix(\\n        IDotNugg.Mix memory res,\\n        Version.Memory[] memory versions,\\n        uint8 versionIndex\\n    ) internal view {\\n        uint256 radiiBits = (versions[versionIndex].data >> 27) & ShiftLib.mask(24);\\n        uint256 expanderBits = (versions[versionIndex].data >> 3) & ShiftLib.mask(24);\\n\\n        (uint256 x, uint256 y) = Version.getAnchor(versions[versionIndex]);\\n\\n        (uint256 width, uint256 height) = Version.getWidth(versions[versionIndex]);\\n\\n        res.version.width = uint8(width);\\n        res.version.height = uint8(height);\\n        res.version.anchor = IDotNugg.Anchor({\\n            radii: IDotNugg.Rlud({\\n                r: uint8((radiiBits >> 18) & ShiftLib.mask(6)),\\n                l: uint8((radiiBits >> 12) & ShiftLib.mask(6)),\\n                u: uint8((radiiBits >> 6) & ShiftLib.mask(6)),\\n                d: uint8((radiiBits >> 0) & ShiftLib.mask(6)),\\n                exists: true\\n            }),\\n            coordinate: IDotNugg.Coordinate({a: uint8(x), b: uint8(y), exists: true})\\n        });\\n        res.version.expanders = IDotNugg.Rlud({\\n            r: uint8((expanderBits >> 18) & ShiftLib.mask(6)),\\n            l: uint8((expanderBits >> 12) & ShiftLib.mask(6)),\\n            u: uint8((expanderBits >> 6) & ShiftLib.mask(6)),\\n            d: uint8((expanderBits >> 0) & ShiftLib.mask(6)),\\n            exists: true\\n        });\\n        res.version.calculatedReceivers = new IDotNugg.Coordinate[](8);\\n\\n        res.version.staticReceivers = new IDotNugg.Coordinate[](8);\\n\\n        for (uint256 i = 0; i < 8; i++) {\\n            (uint256 _x, uint256 _y, bool exists) = Version.getReceiverAt(versions[versionIndex], i, false);\\n            if (exists) {\\n                res.version.staticReceivers[i].a = uint8(_x);\\n                res.version.staticReceivers[i].b = uint8(_y);\\n                res.version.staticReceivers[i].exists = true;\\n            }\\n        }\\n\\n        for (uint256 i = 0; i < 8; i++) {\\n            (uint256 _x, uint256 _y, bool exists) = Version.getReceiverAt(versions[versionIndex], i, true);\\n            if (exists) {\\n                res.version.calculatedReceivers[i].a = uint8(_x);\\n                res.version.calculatedReceivers[i].b = uint8(_y);\\n                res.version.calculatedReceivers[i].exists = true;\\n            }\\n        }\\n\\n        // TODO - receivers?\\n        res.xoffset = 0;\\n        res.yoffset = 0;\\n        res.receivers = new IDotNugg.Anchor[](res.receivers.length);\\n        res.feature = uint8((versions[versionIndex].data >> 75) & ShiftLib.mask(3));\\n        res.matrix.set(versions[versionIndex], width, height);\\n    }\\n\\n    /**\\n     * @notice done\\n     * @dev\\n     */\\n    function updateReceivers(IDotNugg.Canvas memory canvas, IDotNugg.Mix memory mix) internal pure {\\n        for (uint8 i = 0; i < mix.receivers.length; i++) {\\n            IDotNugg.Anchor memory m = mix.receivers[i];\\n            if (m.coordinate.exists) {\\n                m.coordinate.a += mix.xoffset;\\n                m.coordinate.b += mix.yoffset;\\n                canvas.receivers[i] = m;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice done\\n     * @dev\\n     */\\n    function mergeToCanvas(IDotNugg.Canvas memory canvas, IDotNugg.Mix memory mix) internal view {\\n        // uint256 count;\\n        uint256 count;\\n        while (canvas.matrix.next() && mix.matrix.next()) {\\n            uint256 canvasPixel = canvas.matrix.current();\\n            uint256 mixPixel = mix.matrix.current();\\n\\n            // if (mixPixel != 0 || canvasPixel != 0) {\\n            //     // assert(count++ < 100);\\n            //     // mixPixel.log('mixPixel', mixPixel.z(), 'mixPixel.z()', canvasPixel.z(), 'canvasPixel.z()');\\n            //     // canvasPixel.log('canvasPixel');\\n            // }\\n            // assert(mixPixel.e() && mixPixel.z() >= canvasPixel.z());\\n\\n            if (mixPixel.e() && mixPixel.z() >= canvasPixel.z()) {\\n                // canvasPixel.z() = mixPixel.z();\\n\\n                canvas.matrix.setCurrent(Rgba.combine(canvasPixel, mixPixel));\\n            }\\n        }\\n        canvas.matrix.moveBack();\\n        canvas.matrix.resetIterator();\\n        mix.matrix.resetIterator();\\n    }\\n\\n    /**\\n     * @notice poop\\n     * @dev\\n     */\\n    function calculateReceivers(IDotNugg.Mix memory mix) internal pure {\\n        Anchor.convertReceiversToAnchors(mix);\\n    }\\n\\n    // you combine one by one, and as you combine, child refs get overridden\\n\\n    // function add(Combinable comb, )\\n}\\n// add parent refs, if any - will use remys algo only for the canvas\\n// the canvas will always be defined as the first, so if it isnt (will not happen for dotnugg), we define the center as all the child refs\\n//  pick best version\\n// figure out offset\\n\\n// function merge(Canvas memory canvas, Matrix memory versionMatrix) internal pure {\\n//     for (int8 y = (canvas.matrix.data.length / 2) * -1; y <= canvas.matrix.data.length / 2; y++) {\\n//         for (int8 x = (canvas.matrix.width / 2) * -1; x <= canvas.matrix[j].width / 2; x++) {\\n//             Pixel memory canvas = canvas.matrix.at(x, y);\\n//             Pixel memory addr = combinable.matrix.at(x, y);\\n\\n//             if (addr != 0 && addr.layer > canvas.layer) {\\n//                 canvas.layer = addr.layer;\\n//                 canvas.rgba = Colors.combine(canvas.rgba, add.rgba);\\n//             }\\n//         }\\n//     }\\n// }\\n// Oh my god\\n// Becky, look at her butt\\n// Its so big\\n// She looks like one of those rap guys girlfriends\\n// Who understands those rap guys\\n// They only talk to her because she looks like a total prostitute\\n// I mean her butt\\n// It's just so big\\n// I can't believe it's so round\\n// It's just out there\\n// I mean, it's gross\\n// Look, she's just so black\\n\\n// *rap*\\n// I like big butts and I can not lie\\n// You other brothers can't deny\\n// That when a girl walks in with an itty bitty waist\\n// And a round thing in your face\\n// You get sprung\\n// Wanna pull up tough\\n// Cuz you notice that butt was stuffed\\n// Deep in the jeans she's wearing\\n// I'm hooked and I can't stop staring\\n// Oh, baby I wanna get with ya\\n// And take your picture\\n// My homeboys tried to warn me\\n// But that butt you got\\n// Make Me so horney\\n// Ooh, rump of smooth skin\\n// You say you wanna get in my benz\\n// Well use me use me cuz you aint that average groupy\\n\\n// I've seen them dancin'\\n// The hell with romancin'\\n// She's Sweat,Wet, got it goin like a turbo vette\\n\\n// I'm tired of magazines\\n// Saying flat butts are the thing\\n// Take the average black man and ask him that\\n// She gotta pack much back\\n\\n// So Fellas (yeah) Fellas(yeah)\\n// Has your girlfriend got the butt (hell yeah)\\n// Well shake it, shake it, shake it, shake it, shake that healthy butt\\n// Baby got back\\n\\n// (LA face with Oakland booty)\\n\\n// I like'em round and big\\n// And when I'm throwin a gig\\n// I just can't help myself\\n// I'm actin like an animal\\n// Now here's my scandal\\n\\n// I wanna get you home\\n// And UH, double up UH UH\\n// I aint talkin bout playboy\\n// Cuz silicone parts were made for toys\\n// I wannem real thick and juicy\\n// So find that juicy double\\n// Mixalot's in trouble\\n// Beggin for a piece of that bubble\\n// So I'm lookin' at rock videos\\n// Knockin these bimbos walkin like hoes\\n// You can have them bimbos\\n// I'll keep my women like Flo Jo\\n// A word to the thick soul sistas\\n// I wanna get with ya\\n// I won't cus or hit ya\\n// But I gotta be straight when I say I wanna --\\n// Til the break of dawn\\n// Baby Got it goin on\\n// Alot of pimps won't like this song\\n// Cuz them punks lie to hit it and quit it\\n// But I'd rather stay and play\\n// Cuz I'm long and I'm strong\\n// And I'm down to get the friction on\\n\\n// So ladies (yeah), Ladies (yeah)\\n// Do you wanna roll in my Mercedes (yeah)\\n// Then turn around\\n// Stick it out\\n// Even white boys got to shout\\n// Baby got back\\n\\n// (LA face with the Oakland booty)\\n\\n// Yeah baby\\n// When it comes to females\\n// Cosmo ain't got nothin to do with my selection\\n// 36-24-36\\n// Only if she's 5'3\\\"\\n\\n// So your girlfriend throws a Honda\\n// Playin workout tapes by Fonda\\n// But Fonda ain't got a motor in the back of her Honda\\n// My anaconda don't want none unless you've got buns hun\\n// You can do side bends or sit-ups, but please don't lose that butt\\n// Some brothers wanna play that hard role\\n// And tell you that the butt ain't gold\\n// So they toss it and leave it\\n// And I pull up quick to retrieve it\\n// So cosmo says you're fat\\n// Well I ain't down with that\\n// Cuz your waste is small and your curves are kickin\\n// And I'm thinkin bout stickin\\n// To the beanpole dames in the magazines\\n// You aint it miss thing\\n// Give me a sista I can't resist her\\n// Red beans and rice did miss her\\n// Some knucklehead tried to dis\\n// Cuz his girls were on my list\\n// He had game but he chose to hit 'em\\n// And pulled up quick to get with 'em\\n// So ladies if the butt is round\\n// And you wanna triple X throw down\\n// Dial 1-900-MIXALOT and kick them nasty thoughts\\n// Baby got back\\n// Baby got back\\n// Little in tha middle but she got much back x4\\n\",\"keccak256\":\"0x48fb369b0ef2253f82536111205e499f1ade50b1cf3838f22838f432da11526b\",\"license\":\"MIT\"},\"contracts/src/logic/Matrix.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '../interfaces/IDotNugg.sol';\\nimport '../libraries/Bytes.sol';\\nimport '../logic/Rgba.sol';\\n\\nimport '../types/Version.sol';\\n\\nlibrary Matrix {\\n    using Bytes for bytes;\\n    using Rgba for IDotNugg.Rgba;\\n    using Event for uint256;\\n    using Version for Version.Memory;\\n\\n    // function update(IDotNugg.Matrix memory matrix) internal pure returns (Version.Memory memory m) {\\n    //     Version.initBigMatrix(m, matrix.width);\\n\\n    //     resetIterator(matrix);\\n\\n    //     for (uint256 index = 0; index < uint256(matrix.width) * uint256(matrix.height); index++) {\\n    //         Matrix.next(matrix);\\n    //         IDotNugg.Pixel memory pix = Matrix.current(matrix);\\n\\n    //         // if (pix.exists) {\\n    //         uint256 color = (uint256(pix.rgba.r) << 24);\\n    //         color |= (uint256(pix.rgba.g) << 16);\\n    //         color |= (uint256(pix.rgba.b) << 8);\\n    //         color |= (uint256(pix.rgba.a));\\n    //         Version.setBigMatrixPixelAt(m, index, color);\\n    //         // }\\n    //     }\\n\\n    //     m.data |= (uint256(matrix.width) << 63);\\n    //     m.data |= (uint256(matrix.height) << 69);\\n    // }\\n\\n    function create(uint8 width, uint8 height) internal pure returns (IDotNugg.Matrix memory res) {\\n        require(width % 2 == 1 && height % 2 == 1, 'ML:C:0');\\n\\n        Version.initBigMatrix(res.version, width);\\n        res.version.setWidth(width, height);\\n\\n        // res.data = new IDotNugg.Pixel[][](height);\\n        // for (uint8 i = 0; i < height; i++) {\\n        //     res.data[i] = new IDotNugg.Pixel[](width);\\n        // }\\n    }\\n\\n    function moveTo(\\n        IDotNugg.Matrix memory matrix,\\n        uint8 xoffset,\\n        uint8 yoffset,\\n        uint8 width,\\n        uint8 height\\n    ) internal pure {\\n        matrix.currentUnsetX = xoffset;\\n        matrix.currentUnsetY = yoffset;\\n        matrix.startX = xoffset;\\n        matrix.width = width + xoffset;\\n        matrix.height = height + yoffset;\\n    }\\n\\n    function next(IDotNugg.Matrix memory matrix) internal pure returns (bool res) {\\n        res = next(matrix, matrix.width);\\n    }\\n\\n    function next(IDotNugg.Matrix memory matrix, uint8 width) internal pure returns (bool res) {\\n        if (matrix.init) {\\n            if (width <= matrix.currentUnsetX + 1) {\\n                if (matrix.height == matrix.currentUnsetY + 1) {\\n                    return false;\\n                }\\n                matrix.currentUnsetX = matrix.startX; // 0 by default\\n                matrix.currentUnsetY++;\\n            } else {\\n                matrix.currentUnsetX++;\\n            }\\n        } else {\\n            matrix.init = true;\\n        }\\n        res = true;\\n    }\\n\\n    function current(IDotNugg.Matrix memory matrix) internal pure returns (uint256 res) {\\n        res = matrix.version.getBigMatrixPixelAt(matrix.currentUnsetX, matrix.currentUnsetY);\\n    }\\n\\n    function setCurrent(IDotNugg.Matrix memory matrix, uint256 pixel) internal pure {\\n        matrix.version.setBigMatrixPixelAt(matrix.currentUnsetX, matrix.currentUnsetY, pixel);\\n    }\\n\\n    function resetIterator(IDotNugg.Matrix memory matrix) internal pure {\\n        matrix.currentUnsetX = 0;\\n        matrix.currentUnsetY = 0;\\n        matrix.startX = 0;\\n        matrix.init = false;\\n    }\\n\\n    function moveBack(IDotNugg.Matrix memory matrix) internal pure {\\n        (uint256 width, uint256 height) = matrix.version.getWidth();\\n        matrix.width = uint8(width);\\n        matrix.height = uint8(height);\\n    }\\n\\n    function set(\\n        IDotNugg.Matrix memory matrix,\\n        Version.Memory memory data,\\n        uint256 groupWidth,\\n        uint256 groupHeight\\n    ) internal view {\\n        matrix.height = uint8(groupHeight);\\n        uint256 feature = data.getFeature();\\n\\n        for (uint256 y = 0; y < groupHeight; y++) {\\n            for (uint256 x = 0; x < groupWidth; x++) {\\n                next(matrix, uint8(groupWidth));\\n                uint256 col = Version.getPixelAt(data, x, y);\\n                if (col != 0) {\\n                    (, uint256 color, uint256 zindex) = Version.getPalletColorAt(data, col);\\n                    // (zindex).log('zindex', (zindex << 32), '<< 32', (feature << 36) | (zindex << 32) | color, 'whole');\\n                    setCurrent(matrix, (feature << 36) | (zindex << 32) | color);\\n                } else {\\n                    setCurrent(matrix, 0x0000000000);\\n                }\\n            }\\n        }\\n\\n        // require(totalLength % groupWidth == 0, 'MTRX:SET:0');\\n        // require(totalLength / groupWidth == groupHeight, 'MTRX:SET:1');\\n\\n        matrix.width = uint8(groupWidth);\\n        // // matrix.height = uint8(totalLength / groupWidth);\\n\\n        resetIterator(matrix);\\n    }\\n\\n    function addRowsAt(\\n        IDotNugg.Matrix memory matrix, /// cowboy hat\\n        uint8 index,\\n        uint8 amount\\n    ) internal pure {\\n        // require(index < matrix.data[0].length, 'MAT:ACA:0');\\n        for (uint256 i = 0; i < matrix.height; i++) {\\n            for (uint256 j = matrix.height; j > index; j--) {\\n                if (j < index) break;\\n                matrix.version.setBigMatrixPixelAt(i, j + amount, matrix.version.getBigMatrixPixelAt(i, j));\\n            }\\n            // \\\"<=\\\" is because this loop needs to run [amount] times\\n            for (uint256 j = index + 1; j <= index + amount; j++) {\\n                matrix.version.setBigMatrixPixelAt(i, j, matrix.version.getBigMatrixPixelAt(i, index));\\n            }\\n        }\\n        matrix.height += amount;\\n    }\\n\\n    function addColumnsAt(\\n        IDotNugg.Matrix memory matrix, /// cowboy hat\\n        uint8 index,\\n        uint8 amount\\n    ) internal pure {\\n        // require(index < matrix.data[0].length, 'MAT:ACA:0');\\n        for (uint256 i = 0; i < matrix.width; i++) {\\n            for (uint256 j = matrix.width; j > index; j--) {\\n                if (j < index) break;\\n                matrix.version.setBigMatrixPixelAt(j + amount, i, matrix.version.getBigMatrixPixelAt(j, i));\\n            }\\n            // \\\"<=\\\" is because this loop needs to run [amount] times\\n            for (uint256 j = index + 1; j <= index + amount; j++) {\\n                matrix.version.setBigMatrixPixelAt(j, i, matrix.version.getBigMatrixPixelAt(index, i));\\n            }\\n        }\\n        matrix.width += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x0c0f71b4fa783511cd2769c378806b25bc0bc342aaf867df32206cafa645b24e\",\"license\":\"MIT\"},\"contracts/src/logic/Rgba.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '../libraries/Bytes.sol';\\nimport '../interfaces/IDotNugg.sol';\\nimport '../types/Pixel.sol';\\n\\nlibrary Rgba {\\n    using Bytes for bytes;\\n    using Pixel for uint256;\\n    struct RGBA16 {\\n        uint16 r;\\n        uint16 g;\\n        uint16 b;\\n        uint16 a;\\n    }\\n\\n    function combine(IDotNugg.Rgba memory base, IDotNugg.Rgba memory mix) internal pure {\\n        // if (mix.a == 255 || base.a == 0) {\\n        if (true) {\\n            base.r = mix.r;\\n            base.g = mix.g;\\n            base.b = mix.b;\\n            base.a = mix.a;\\n            return;\\n        }\\n\\n        RGBA16 memory baseRGB = RGBA16({r: uint16(base.r), g: uint16(base.g), b: uint16(base.b), a: uint16(base.a)});\\n        RGBA16 memory mixRGB = RGBA16({r: uint16(mix.r), g: uint16(mix.g), b: uint16(mix.b), a: uint16(mix.a)});\\n\\n        // uint8 alpha = uint8(255 - (((255 - baseRGB.a) * (255 - mixRGB.a)) / 255));\\n        base.r = uint8((baseRGB.r * (255 - mixRGB.a) + mixRGB.r * mixRGB.a) / 255);\\n        base.g = uint8((baseRGB.g * (255 - mixRGB.a) + mixRGB.g * mixRGB.a) / 255);\\n        base.b = uint8((baseRGB.b * (255 - mixRGB.a) + mixRGB.b * mixRGB.a) / 255);\\n        base.a = 255;\\n        //   return IDotNugg.Rgba({r: r, g: g, b: b, a: 255});\\n    }\\n\\n    function combine(uint256 base, uint256 mix) internal pure returns (uint256 res) {\\n        // if (mix.a == 255 || base.a == 0) {\\n        if (true) {\\n            res = mix;\\n            return res;\\n        }\\n\\n        // RGBA16 memory baseRGB = RGBA16({r: uint16(base.r()), g: uint16(base.g), b: uint16(base.b), a: uint16(base.a)});\\n        // RGBA16 memory mixRGB = RGBA16({r: uint16(mix.r()), g: uint16(mix.g), b: uint16(mix.b), a: uint16(mix.a)});\\n\\n        // uint8 alpha = uint8(255 - (((255 - baseRGB.a) * (255 - mixRGB.a)) / 255));\\n\\n        // base.r() = uint8((base.r() * (255 - mix.a()) + mix.r() * mix.a()) / 255);\\n        // base.g = uint8((base.g() * (255 - mix.a()) + mix.g() * mix.a()) / 255);\\n        // base.b = uint8((base.b() * (255 - mix.a()) + mix.b() * mix.a()) / 255);\\n        // base.a = 255;\\n\\n        //   return IDotNugg.Rgba({r: r, g: g, b: b, a: 255});\\n    }\\n\\n    function toUint64(IDotNugg.Rgba memory base) internal pure returns (uint64 res) {\\n        bytes memory input = abi.encodePacked(base.r, base.g, base.b, base.a);\\n        return input.toUint64(0);\\n    }\\n\\n    function toAscii(IDotNugg.Rgba memory base) internal pure returns (string memory res) {\\n        bytes memory input = abi.encodePacked(base.r, base.g, base.b, base.a);\\n        return input.toAscii();\\n    }\\n\\n    function equalssss(IDotNugg.Rgba memory base, IDotNugg.Rgba memory next) internal pure returns (bool res) {\\n        res = base.a == next.a && base.r == next.r && base.g == next.g && base.b == next.b;\\n    }\\n}\\n\",\"keccak256\":\"0x161db56360a00d5d776484201cc08457acaf137f0c045073e82849e52c4c1c95\",\"license\":\"MIT\"},\"contracts/src/logic/Svg.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '../libraries/Uint.sol';\\nimport '../../test/Event.sol';\\n\\nlibrary Svg {\\n    using Uint256 for uint256;\\n    using Event for uint256;\\n\\n    function getPixelAt(\\n        uint256[] memory file,\\n        uint256 x,\\n        uint256 y,\\n        uint256 width\\n    ) internal pure returns (uint256 res) {\\n        uint256 index = x + (y * width);\\n\\n        res = (file[index / 6] >> (40 * (index % 6))) & 0xffffffff;\\n    }\\n\\n    function buildSvg(\\n        uint256[] memory file,\\n        uint256 width,\\n        uint256 height\\n    ) internal view returns (bytes memory res) {\\n        bytes memory header = abi.encodePacked(\\n            hex'3c7376672076696577426f783d2730203020', //\\\"<svg Box='0 0 \\\",\\n            (10 * width).toString(),\\n            hex'20', // ' ',\\n            (10 * width).toString(),\\n            hex'20272077696474683d27', //\\\"' width='\\\",\\n            (10 * width).toString(),\\n            hex'27206865696768743d27', //  \\\"' height='\\\",\\n            (10 * width).toString(),\\n            hex'2720786d6c6e733d27687474703a2f2f7777772e77332e6f72672f323030302f7376672720786d6c6e733a786c696e6b3d27687474703a2f2f7777772e77332e6f72672f313939392f786c696e6b273e5c6e' // \\\"' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'>\\\\n\\\"\\n        );\\n\\n        bytes memory footer = hex'3c2f7376673e';\\n\\n        uint256 last = getPixelAt(file, 0, 0, width);\\n        uint256 count = 1;\\n\\n        // bytes[] memory rects = new bytes[](35);\\n        bytes memory body;\\n\\n        for (uint256 y = 0; y < height; y++) {\\n            for (uint256 x = 0; x < height; x++) {\\n                if (y == 0 && x == 0) x++;\\n                uint256 curr = getPixelAt(file, x, y, width);\\n                if (curr == last) {\\n                    count++;\\n                    continue;\\n                } else {\\n                    // curr.log('yup');\\n                    // rects[index++] = getRekt(last, x - count, y, count, 1);\\n                    body = abi.encodePacked(body, getRekt(last, (x - count) * 10, y * 10, 1 * 10, count * 10));\\n                    last = curr;\\n                    count = 1;\\n                }\\n            }\\n            // rects[index++] = getRekt(last, 33 - count, y, count, 1);\\n            body = abi.encodePacked(body, getRekt(last, (width - count) * 10, y * 10, 1 * 10, count * 10));\\n            last = 0;\\n            count = 0;\\n        }\\n\\n        res = abi.encodePacked(header, body, footer);\\n    }\\n\\n    function getRekt(\\n        uint256 pixel,\\n        uint256 x,\\n        uint256 y,\\n        uint256 xlen,\\n        uint256 ylen\\n    ) internal pure returns (bytes memory res) {\\n        if (pixel & 0xff == 0) return '';\\n\\n        res = abi.encodePacked(\\n            \\\"\\\\t<rect fill='#\\\",\\n            pixel.toHexStringNoPrefix(4),\\n            hex'2720783d27',\\n            x.toAscii(),\\n            hex'2720793d27',\\n            y.toAscii(),\\n            hex'27206865696768743d27',\\n            xlen.toAscii(),\\n            hex'272077696474683d27',\\n            ylen.toAscii(),\\n            \\\"'/>\\\\n\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xe52633f264895c9734a0f10128d5f8ba4d17935d2bc7fff9fb94c6f68157568b\",\"license\":\"MIT\"},\"contracts/src/types/Descriptor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// 1.5 x each feature for a coordinate (0.75 x 2)\\n// 2 byte each feature for expanders coordinate (16, 16, 16, 16)\\n// 1 byte each feature for expanders amount (4, 4, 4, 4)\\n\\n// 3 | 1/2 bytes - base ---- 8 | .5 --- 8 | .5   ---- 1 vars\\n\\n// 8 | 1 bytes - head\\n// 8 | 1 bytes - eyes\\n// 8 | 1 bytes - mouth\\n// 8 | 1 bytes - back\\n// 8 | 1 bytes - hair\\n// 8 | 1 bytes - neck ---- 48 | 6 --- 51 | 6.5    ----- 6 vars\\n\\n// 8 | 1 bytes - head\\n// 8 | 1 bytes - eyes\\n// 8 | 1 bytes - mouth\\n// 8 | 1 bytes - back\\n// 8 | 1 bytes - hair\\n// 8 | 1 bytes - neck ---- 48 | 6  -- 99 | 12.5 ---- 6 vars\\n\\n// 12 | 1.5 bytes - head coordinate\\n// 12 | 1.5 bytes - eyes coordinate\\n// 12 | 1.5 bytes - mouth coordinate\\n// 12 | 1.5 bytes - back coordinate\\n// 12 | 1.5 bytes - hair coordinate\\n// 12 | 1.5 bytes - neck coordinate ---- 159-    ----- 12 vars\\n\\n// 3            - expander 3 feat      ------- 3 vars\\n\\n// 3            - expander 1 feat\\n// 24 | 3 bytes - expander 1\\n// 3            - expander 2 feat\\n// 24 | 3 bytes - expander 2\\n// 24 | 3 bytes - expander 3       - 24 vars\\n\\nlibrary Descriptor {\\n    // struct Memory {\\n    //     IDotNugg.Rlud[] expanderOffset; // 0 - 8\\n    //     IDotNugg.Rlud[] expanderOffsetDirection; // 0 - 1\\n    //     IDotNugg.Rlud[] expanderAmount; // 0 - 3\\n    //     IDotNugg.Coordinate[] anchors; // 0 - 63\\n    // }\\n\\n    // function parse(uint256 input) internal pure returns (Memory memory m) {\\n    //     m.expanderOffset = new IDotNugg.Rlud[](8);\\n    //     m.expanderOffsetDirection = new IDotNugg.Rlud[](8);\\n    //     m.expanderAmount = new IDotNugg.Rlud[](8);\\n    //     m.anchors = new IDotNugg.Coordinate[](8);\\n\\n    //     uint256[] memory tmp = new uint256[](2);\\n    //     tmp[0] = 1;\\n    //     tmp[1] = input;\\n\\n    //     (, BitReader.Memory memory reader) = BitReader.init(tmp);\\n\\n    //     reader.select(99);\\n\\n    //     for (uint256 i = 1; i < 7; i++) {\\n    //         m.anchors[i].a = uint8(reader.select(6));\\n    //         m.anchors[i].b = uint8(reader.select(6));\\n    //         m.anchors[i].exists = m.anchors[i].a != 0 || m.anchors[i].b != 0;\\n    //     }\\n    // }\\n\\n    function receiverOverride(uint256 input, uint256 feature)\\n        internal\\n        pure\\n        returns (\\n            bool exists,\\n            uint256 x,\\n            uint256 y\\n        )\\n    {\\n        return (false, 15, 15);\\n    }\\n}\\n\",\"keccak256\":\"0x4c3e5241e1b0b6653e6c3c1283056b821cae5270c9375ec60d4663397d0b040d\",\"license\":\"MIT\"},\"contracts/src/types/Pixel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nlibrary Pixel {\\n    function r(uint256 input) internal pure returns (uint256 res) {\\n        res = (input >> 24) & 0xff;\\n    }\\n\\n    function g(uint256 input) internal pure returns (uint256 res) {\\n        res = (input >> 16) & 0xff;\\n    }\\n\\n    function b(uint256 input) internal pure returns (uint256 res) {\\n        res = (input >> 8) & 0xff;\\n    }\\n\\n    function a(uint256 input) internal pure returns (uint256 res) {\\n        res = input & 0xff;\\n    }\\n\\n    function z(uint256 input) internal pure returns (uint256 res) {\\n        res = (input >> 32) & 0xf;\\n    }\\n\\n    function f(uint256 input) internal pure returns (uint256 res) {\\n        res = (input >> 36) & 0xf;\\n    }\\n\\n    function e(uint256 input) internal pure returns (bool res) {\\n        res = input != 0x00;\\n    }\\n}\\n\",\"keccak256\":\"0xf7768a69fcbbd5bad79b5fc1631109c957d16ea52b869f9b9260422af92adb36\",\"license\":\"MIT\"},\"contracts/src/types/Version.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '../libraries/BitReader.sol';\\n\\nlibrary Version {\\n    using BitReader for BitReader.Memory;\\n    using Event for uint256;\\n    using Event for uint256[];\\n\\n    struct Memory {\\n        uint256[] pallet;\\n        uint256[] minimatrix;\\n        uint256[] bigmatrix;\\n        uint256 receivers;\\n        uint256 data;\\n    }\\n\\n    function parse(uint256[][] memory data) internal view returns (Memory[][] memory m) {\\n        m = new Memory[][](data.length);\\n\\n        for (uint256 j = 0; j < data.length; j++) {\\n            (bool empty, BitReader.Memory memory reader) = BitReader.init(data[j]);\\n\\n            if (empty) continue;\\n\\n            // 32 bits: NUGG\\n            require(reader.select(32) == 0x4e554747, 'DEC:PI:0');\\n\\n            uint256 feature = reader.select(3);\\n\\n            uint256[] memory pallet = parsePallet(reader);\\n\\n            uint256 versionLength = reader.select(2) + 1;\\n\\n            m[j] = new Memory[](versionLength);\\n\\n            for (uint256 i = 0; i < versionLength; i++) {\\n                m[j][i].data = parseData(reader, feature);\\n\\n                m[j][i].receivers = parseReceivers(reader);\\n\\n                (uint256 width, uint256 height) = getWidth(m[j][i]);\\n\\n                m[j][i].minimatrix = parseMiniMatrix(reader, width, height);\\n\\n                m[j][i].pallet = pallet;\\n\\n                (uint256 ancX, uint256 ancY) = getAnchor(m[j][i]);\\n                (, , uint256 ancZ) = getPalletColorAt(m[j][i], getPixelAt(m[j][i], ancX, ancY));\\n\\n                setZ(m[j][i], ancZ);\\n            }\\n        }\\n    }\\n\\n    function parsePallet(BitReader.Memory memory reader) internal pure returns (uint256[] memory res) {\\n        uint256 palletLength = reader.select(4) + 1;\\n\\n        res = new uint256[](palletLength + 1);\\n\\n        for (uint256 i = 0; i < palletLength; i++) {\\n            uint256 working = 0;\\n            // 4 bits: zindex\\n            working |= (reader.select(4) << 32);\\n\\n            uint256 color;\\n            uint256 selecta = reader.select(1);\\n            if (selecta == 1) {\\n                color = 0x000000;\\n            } else {\\n                uint256 r = reader.select(8);\\n                uint256 g = reader.select(8);\\n                uint256 b = reader.select(8);\\n\\n                color = (r << 16) | (g << 8) | b;\\n            }\\n\\n            // // 1 or 25 bits: rgb\\n            working |= color << 8;\\n\\n            // // 1 or 8 bits: a\\n            working |= (reader.select(1) == 0x1 ? 0xff : reader.select(8));\\n\\n            res[i + 1] = working;\\n        }\\n    }\\n\\n    function parseData(BitReader.Memory memory reader, uint256 feature) internal pure returns (uint256 res) {\\n        // 12 bits: coordinate - anchor x and y\\n\\n        res |= feature << 75;\\n\\n        uint256 width = reader.select(6);\\n        uint256 height = reader.select(6);\\n\\n        res |= height << 69; // heighth and width\\n        res |= width << 63;\\n\\n        // 12 bits: coordinate - anchor x and y\\n        res |= reader.select(6) << 51;\\n        res |= reader.select(6) << 57;\\n\\n        // 1 or 25 bits: rlud - radii\\n        res |= (reader.select(1) == 0x1 ? 0x000000 : reader.select(24)) << 27;\\n\\n        // 1 or 25 bits: rlud - expanders\\n        res |= (reader.select(1) == 0x1 ? 0x000000 : reader.select(24)) << 3;\\n    }\\n\\n    function parseReceivers(BitReader.Memory memory reader) internal pure returns (uint256 res) {\\n        uint256 receiversLength = reader.select(1) == 0x1 ? 0x1 : reader.select(4);\\n\\n        for (uint256 j = 0; j < receiversLength; j++) {\\n            uint256 receiver = 0;\\n\\n            uint256 yOrYOffset = reader.select(6);\\n\\n            uint256 xOrPreset = reader.select(6);\\n\\n            // rFeature\\n            uint256 rFeature = reader.select(3);\\n\\n            uint256 calculated = reader.select(1);\\n\\n            if (calculated == 0x1) {\\n                receiver |= yOrYOffset << 6;\\n                receiver |= xOrPreset;\\n            } else {\\n                receiver |= xOrPreset << 6;\\n                receiver |= yOrYOffset;\\n            }\\n\\n            receiver <<= ((rFeature * 12) + (calculated == 0x1 ? 128 : 0));\\n\\n            res |= receiver;\\n        }\\n    }\\n\\n    function parseMiniMatrix(\\n        BitReader.Memory memory reader,\\n        uint256 height,\\n        uint256 width\\n    ) internal pure returns (uint256[] memory res) {\\n        uint256 groupsLength = reader.select(1) == 0x1 ? reader.select(8) + 1 : reader.select(16) + 1;\\n\\n        res = new uint256[]((height * width) / 64 + 1);\\n\\n        uint256 index = 0;\\n\\n        for (uint256 a = 0; a < groupsLength; a++) {\\n            uint256 len = reader.select(2) + 1;\\n\\n            if (len == 4) len = reader.select(4) + 4;\\n\\n            uint256 key = reader.select(4);\\n\\n            for (uint256 i = 0; i < len; i++) {\\n                res[index / 64] |= (key << (4 * (index % 64)));\\n                index++;\\n            }\\n        }\\n    }\\n\\n    function getReceiverAt(\\n        Memory memory m,\\n        uint256 index,\\n        bool calculated\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint256 x,\\n            uint256 y,\\n            bool exists\\n        )\\n    {\\n        uint256 data = m.receivers >> (index * 12 + (calculated ? 128 : 0));\\n\\n        data &= ShiftLib.mask(12);\\n\\n        x = data & ShiftLib.mask(6);\\n        y = data >> 6;\\n\\n        exists = x != 0 || y != 0;\\n    }\\n\\n    function setReceiverAt(\\n        Memory memory m,\\n        uint256 index,\\n        bool calculated,\\n        uint256 x,\\n        uint256 y\\n    ) internal pure returns (uint256 res) {\\n        // yOrYOffset\\n        res |= y << 6;\\n\\n        //xOrPreset\\n        res |= x;\\n\\n        m.receivers |= res << ((index * 12) + (calculated ? 128 : 0));\\n    }\\n\\n    function setOffset(\\n        Memory memory m,\\n        bool negX,\\n        uint256 diffX,\\n        bool negY,\\n        uint256 diffY\\n    ) internal pure {\\n        m.data |= ((((diffX & 0xff) << 1) | (((negX ? 0x1 : 0x0)))) << 85);\\n        m.data |= ((((diffY & 0xff) << 1) | ((((negY ? 0x1 : 0x0))))) << 94);\\n    }\\n\\n    function getOffset(Memory memory m)\\n        internal\\n        pure\\n        returns (\\n            bool negX,\\n            uint256 diffX,\\n            bool negY,\\n            uint256 diffY\\n        )\\n    {\\n        uint256 data = m.data;\\n        negX = (data >> 85) & 0x1 == 1;\\n        diffX = (data >> 86) & 0xff;\\n        negY = (data >> 94) & 0x1 == 1;\\n        diffY = (data >> 95) & 0xff;\\n    }\\n\\n    function setZ(Memory memory m, uint256 z) internal pure {\\n        require(z <= 0xf, 'VERS:SETZ:0');\\n        m.data |= z << 78;\\n    }\\n\\n    function getZ(Memory memory m) internal pure returns (uint256 res) {\\n        res = (m.data >> 78) & 0xf;\\n    }\\n\\n    function setFeature(Memory memory m, uint256 z) internal pure {\\n        require(z <= ShiftLib.mask(3), 'VERS:SETF:0');\\n        m.data &= ShiftLib.fullsubmask(3, 75);\\n        m.data |= (z << 75);\\n    }\\n\\n    function getFeature(Memory memory m) internal pure returns (uint256 res) {\\n        res = (m.data >> 75) & ShiftLib.mask(3);\\n    }\\n\\n    function getWidth(Memory memory m) internal pure returns (uint256 width, uint256 height) {\\n        // yOrYOffset\\n        width = (m.data >> 63) & ShiftLib.mask(6);\\n        height = (m.data >> 69) & ShiftLib.mask(6);\\n    }\\n\\n    function setWidth(\\n        Memory memory m,\\n        uint256 w,\\n        uint256 h\\n    ) internal pure {\\n        require(w <= ShiftLib.mask(6), 'VERS:SETW:0');\\n        require(h <= ShiftLib.mask(6), 'VERS:SETW:1');\\n\\n        m.data &= ShiftLib.fullsubmask(12, 63);\\n\\n        m.data |= (w << 63);\\n        m.data |= (h << 69);\\n    }\\n\\n    function getAnchor(Memory memory m) internal pure returns (uint256 x, uint256 y) {\\n        // yOrYOffset\\n        x = (m.data >> 51) & ShiftLib.mask(6);\\n        y = (m.data >> 57) & ShiftLib.mask(6);\\n    }\\n\\n    function getPixelAt(\\n        Memory memory m,\\n        uint256 x,\\n        uint256 y\\n    ) internal pure returns (uint256 palletKey) {\\n        (uint256 width, ) = getWidth(m);\\n        uint256 index = x + (y * width);\\n\\n        if (index / 64 >= m.minimatrix.length) return 0x0;\\n\\n        palletKey = (m.minimatrix[index / 64] >> (4 * (index % 64))) & 0xf;\\n    }\\n\\n    function getPalletColorAt(Memory memory m, uint256 index)\\n        internal\\n        pure\\n        returns (\\n            uint256 res,\\n            uint256 color,\\n            uint256 zindex\\n        )\\n    {\\n        // res = (m.pallet[index / 7] >> (36 * (index % 7))) & ShiftLib.mask(36);\\n        res = m.pallet[index];\\n\\n        color = res & 0xffffffff;\\n\\n        zindex = (res >> 32) & 0xf;\\n    }\\n\\n    function getDiffOfReceiverAt(Memory memory base, Memory memory mix)\\n        internal\\n        pure\\n        returns (\\n            bool negX,\\n            uint256 diffX,\\n            bool negY,\\n            uint256 diffY\\n        )\\n    {\\n        (uint256 recX, uint256 recY, ) = getReceiverAt(base, (mix.data >> 75) & ShiftLib.mask(3), false);\\n        (uint256 ancX, uint256 ancY) = getAnchor(mix);\\n\\n        negX = recX < ancX;\\n        diffX = negX ? ancX - recX : recX - ancX;\\n        negY = recY < ancY;\\n        diffY = negY ? ancY - recY : recY - ancY;\\n    }\\n\\n    // function getPixelAtPositionWithOffset(Memory memory m, uint256 index) internal pure returns (bool exists, uint256 palletKey) {\\n    //     (uint256 width, ) = getWidth(m);\\n\\n    //     uint256 indexY = index / 33;\\n    //     uint256 indexX = index % 33;\\n\\n    //     (, uint256 diffX, , uint256 diffY) = getOffset(m);\\n\\n    //     if (width != 33) {}\\n\\n    //     if (indexX < diffX) return (false, 0);\\n    //     uint256 realX = indexX - diffX;\\n\\n    //     if (indexY < diffY) return (false, 0);\\n    //     uint256 realY = indexY - diffY;\\n\\n    //     if (width != 33) {}\\n\\n    //     // require(indexX >= diffX, 'VERS:GPAP:0');\\n    //     // uint256 realX = indexX - diffX;\\n\\n    //     // require(indexY >= diffY, 'VERS:GPAP:1');\\n    //     // uint256 realY = indexY - diffY;\\n\\n    //     // if (realX >= width || realY >= height) return (false, 0);\\n\\n    //     uint256 realIndex = realY * width + realX;\\n\\n    //     if (realIndex / 64 >= m.minimatrix.length) return (false, 0);\\n    //     exists = true;\\n\\n    //     palletKey = (m.minimatrix[realIndex / 64] >> (4 * (realIndex % 64))) & 0xf;\\n    // }\\n\\n    function initBigMatrix(Memory memory m, uint256 width) internal pure {\\n        m.bigmatrix = new uint256[](((width * width) / 6) + 2);\\n    }\\n\\n    function setBigMatrixPixelAt(\\n        Memory memory m,\\n        uint256 x,\\n        uint256 y,\\n        uint256 color\\n    ) internal pure {\\n        (uint256 width, ) = getWidth(m);\\n\\n        uint256 index = x + (y * width);\\n\\n        // m.bigmatrix[index / 6] |= (color << (40 * (index % 6)));\\n\\n        setBigMatrixPixelAt(m, index, color);\\n    }\\n\\n    function setBigMatrixPixelAt(\\n        Memory memory m,\\n        uint256 index,\\n        uint256 color\\n    ) internal pure {\\n        // require(m.bigmatrix.length > index / 6, 'VERS:SBM:0');\\n\\n        if (m.bigmatrix.length > index / 6) {\\n            uint256 offset = (40 * (index % 6));\\n            m.bigmatrix[index / 6] &= ShiftLib.fullsubmask(40, offset);\\n            m.bigmatrix[index / 6] |= (color << offset);\\n        }\\n    }\\n\\n    function getBigMatrixPixelAt(\\n        Memory memory m,\\n        uint256 x,\\n        uint256 y\\n    ) internal pure returns (uint256 res) {\\n        (uint256 width, ) = getWidth(m);\\n\\n        uint256 index = x + (y * width);\\n\\n        if (index / 6 >= m.bigmatrix.length) return 0x0000000000;\\n\\n        res = (m.bigmatrix[index / 6] >> (40 * (index % 6))) & 0xffffffffff;\\n    }\\n\\n    function bigMatrixHasPixelAt(\\n        Memory memory m,\\n        uint256 x,\\n        uint256 y\\n    ) internal pure returns (bool res) {\\n        uint256 pix = getBigMatrixPixelAt(m, x, y);\\n\\n        res = pix & 0xff != 0x00;\\n    }\\n\\n    function bigMatrixWithData(Memory memory m) internal pure returns (uint256[] memory res) {\\n        res = m.bigmatrix;\\n        res[res.length - 1] = m.data;\\n    }\\n}\\n\",\"keccak256\":\"0x0a07fdd7817f1fe0377dd22dcf14b1f7362751b2ba453492ab8ad6b52c011d96\",\"license\":\"MIT\"},\"contracts/src/v2/Merge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '../types/Version.sol';\\nimport '../../test/Event.sol';\\n\\nlibrary Merge {\\n    // using Version for Version.Memory;\\n    // using Event for uint256[];\\n    // using Event for uint256;\\n    // function begin(Version.Memory[][] memory versions, uint256 width) internal view returns (Version.Memory memory res) {\\n    //     // figure out the order  - loop theorugh them \\\"backwards\\\" pixel by pixel, we can reduce the amount of times we have to loop through everything\\n    //     for (uint256 i = 0; i < 8; i++) {\\n    //         uint256 num = width / 2 + 1;\\n    //         res.setReceiverAt(i, false, num, num);\\n    //     }\\n    //     uint256 sorter;\\n    //     uint256 zcheck;\\n    //     // TODO flip these loops - will be able to set receivers here\\n    //     // finalize receivers\\n    //     for (uint256 i = 0; i < versions.length; i++) {\\n    //         uint256 z = versions[i][0].getZ();\\n    //         z.log('z');\\n    //         sorter = addToSort(sorter, i, z);\\n    //         versions[i][0].receivers.log('versions[i][0].receivers');\\n    //         for (uint256 j = 0; j < 8; j++) {\\n    //             (uint256 x, uint256 y, bool exists) = versions[i][0].getReceiverAt(j, false);\\n    //             if (!exists) continue;\\n    //             zcheck.log('zcheck');\\n    //             if (z > (zcheck >> (j * 3)) & ShiftLib.mask(3)) {\\n    //                 zcheck = (zcheck & (ShiftLib.mask(3) << (j * 3))) | (z << (j * 3));\\n    //                 res.setReceiverAt(j, false, x, y);\\n    //             }\\n    //         }\\n    //     }\\n    //     res.receivers.log('res.receivers');\\n    //     for (uint256 i = 0; i < versions.length; i++) {\\n    //         (bool negX, uint256 diffX, bool negY, uint256 diffY) = res.getDiffOfReceiverAt(versions[i][0]);\\n    //         // negX.log('negX', diffX, 'diffX', i, 'i');\\n    //         // negY.log('negY', diffY, 'diffY', i, 'i');\\n    //         diffX.log('diffX');\\n    //         diffX.log('diffY');\\n    //         versions[i][0].setOffset(negX, diffX, negY, diffY);\\n    //     }\\n    //     res.initBigMatrix(width);\\n    //     for (uint256 i = 0; i < width * width; i++) {\\n    //         uint256 workingColor;\\n    //         for (uint256 j = 0; j < versions.length; j++) {\\n    //             // sorter.log('sorter', i, 'i', j, 'j');\\n    //             (bool exists1, uint256 feature, ) = getFromSorter(sorter, j);\\n    //             if (!exists1) break;\\n    //             // if (i > 200) assert(false);\\n    //             (bool exists2, uint256 key) = versions[feature][0].getPixelAtPositionWithOffset(i);\\n    //             if (!exists2) continue;\\n    //             (, uint256 color, ) = versions[feature][0].getPalletColorAt(key);\\n    //             if (workingColor > 0) {\\n    //                 // mix set with color\\n    //                 break;\\n    //             }\\n    //             workingColor = color;\\n    //             // workingColor.log('workingColor', feature, 'feature', key, 'key');\\n    //             if (workingColor & 0xff == 0xff) break;\\n    //             continue;\\n    //         }\\n    //         res.setBigMatrixPixelAt(i, workingColor);\\n    //         // assert(false);\\n    //     }\\n    //     res.bigmatrix.log('bigmatrix');\\n    //     // add pallet to end of res's pallet\\n    //     // loop through each pixel in res\\n    //     // loop through all versions (sorted) and add first color to the matrix\\n    //     //\\n    //     // (uint256 width, uint256 height) = res.getWidth();\\n    //     // calculate offset, sort values values by z, and determine if we need to\\n    //     // going deeper as far as a color is conserned is only doable when we are looping thorough\\n    //     // for (uint256 i = 0; i < versions.length; i++) {\\n    //     //     (uint256 x, uint256 y, uint256 z, ) = versions[i][0].getAnchor();\\n    //     //     //\\n    //     // }\\n    //     // TODO decide if we want to use multiple versions, and then what to do about it\\n    //     // loop through them and put all of them on the first one\\n    //     // find the receivers to give all of them an offset\\n    //     // just take highest level from each of them\\n    //     // give all of them an offset\\n    //     // for (uint256 )\\n    // }\\n    // function getFromSorter(uint256 input, uint256 index)\\n    //     internal\\n    //     pure\\n    //     returns (\\n    //         bool exists,\\n    //         uint256 feature,\\n    //         uint256 z\\n    //     )\\n    // {\\n    //     uint256 curr = (input >> (index * 9)) & ShiftLib.mask(9);\\n    //     exists = (curr >> 8) & 0x1 == 0x1;\\n    //     if (exists) {\\n    //         feature = (curr >> 4) & 0xf;\\n    //         z = curr & 0xf;\\n    //     }\\n    // }\\n    // function addToSort(\\n    //     uint256 input,\\n    //     uint256 inFeature,\\n    //     uint256 inZ\\n    // ) internal pure returns (uint256 res) {\\n    //     res = input;\\n    //     // 1 bit exists\\n    //     // 4 bit feature\\n    //     // 4 bit z\\n\\n    //     uint256 i;\\n    //     for (i = 0; i < 8; i++) {\\n    //         uint256 curr = (res >> (i * 9)) & ShiftLib.mask(9);\\n    //         if (curr >> 8 == 0x1) {\\n    //             // uint256 feautre = (curr >> 4) & 0xf;\\n    //             uint256 z = curr & 0xf;\\n    //             if (z <= inZ) {\\n    //                 res = ((res << 9) & ~ShiftLib.mask(9 * i)) | (input & ShiftLib.mask(9 * (i)));\\n    //                 res |= ((0x1 << 8) | (inFeature << 4) | inZ) << (9 * i);\\n    //                 break;\\n    //             }\\n    //         } else {\\n    //             res |= ((0x1 << 8) | (inFeature << 4) | inZ) << (9 * i);\\n    //             break;\\n    //         }\\n    //     }\\n\\n    // }\\n}\\n\",\"keccak256\":\"0x85e5000d6fcba9a8fd9e55ac3467c3fb1da3e77738222e1a432b6c3ec7a5534a\",\"license\":\"MIT\"},\"contracts/test/Event.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '../src/libraries/Uint.sol';\\nimport '../../contracts/src/libraries/Uint.sol';\\n\\n\\n\\nlibrary Event {\\n    function log(uint256 val, string memory name) internal view {\\n\\n\\n\\n    }\\n\\n    function log(\\n        uint256 val0,\\n        string memory name0,\\n        uint256 val1,\\n        string memory name1,\\n        uint256 val2,\\n        string memory name2\\n    ) internal view {\\n\\n\\n\\n\\n    }\\n\\n    function log(\\n        uint256 val0,\\n        string memory name0,\\n        uint256 val1,\\n        string memory name1\\n    ) internal view {\\n\\n\\n\\n    }\\n\\n    function log(\\n        uint256 val0,\\n        string memory name0,\\n        uint256 val1,\\n        string memory name1,\\n        uint256 val2,\\n        string memory name2,\\n        uint256 val3,\\n        string memory name3\\n    ) internal view {\\n\\n\\n\\n\\n\\n    }\\n\\n    function log(uint256[] memory arr, string memory name) internal view {\\n\\n\\n        for (uint256 i = 0; i < arr.length; i++) {\\n\\n        }\\n    }\\n}\\n\\n// library Event {\\n//     function log(uint256 val, string memory name) internal view {}\\n\\n//     function log(\\n//         uint256 val0,\\n//         string memory name0,\\n//         uint256 val1,\\n//         string memory name1,\\n//         uint256 val2,\\n//         string memory name2\\n//     ) internal view {}\\n\\n//     function log(uint256[] memory arr, string memory name) internal view {}\\n// }\\n\",\"keccak256\":\"0xb8c082c2a431656b736cf108b42d46559dfaa8195bf140eb3be95d31978793c5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e060405234801561001057600080fd5b5030606081901b608081905260c081905260a0528080614e1a61004b600039600060cd015260006101660152600061011f0152614e1a6000f3fe608060405234801561001057600080fd5b506004361061006d5760003560e01c806301ffc9a7146100725780634a0ef7031461009a5780637a99b292146100c85780638a61d30414610107578063b17400661461011a578063c142c49614610141578063ce1b1d4314610161575b600080fd5b6100856100803660046146af565b610188565b60405190151581526020015b60405180910390f35b6100bb6100a83660046146d7565b5060408051602081019091526000815290565b6040516100919190614b3f565b6100ef7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610091565b6100bb610115366004614664565b61020f565b6100ef7f000000000000000000000000000000000000000000000000000000000000000081565b61015461014f36600461456f565b6103c6565b6040516100919190614afb565b6100ef7f000000000000000000000000000000000000000000000000000000000000000081565b60006001600160e01b031982166240966160e41b14806101b857506001600160e01b0319821663c0bd0d3160e01b145b806101d357506001600160e01b031982166312fc4fa960e21b145b806101ee57506001600160e01b03198216638b9e1aa360e01b145b8061020957506001600160e01b031982166301ffc9a760e01b145b92915050565b606060008060008580602001905181019061022a9190614711565b925092509250600061023c6006610424565b603f8960018b5161024d9190614c57565b8151811061026b57634e487b7160e01b600052603260045260246000fd5b6020026020010151901c16905060006102846006610424565b60458a60018c516102959190614c57565b815181106102b357634e487b7160e01b600052603260045260246000fd5b6020026020010151901c1690506102cb89838361042e565b95506102d686610616565b95506040518060400160405280601d81526020017f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c00000081525061039861031a8761078b565b610325876020610796565b610339876001600160a01b03166014610796565b6040518060400160405280601a81526020017f646174613a696d6167652f7376672b786d6c3b6261736536342c0000000000008152508b6040516020016103849594939291906147d3565b604051602081830303815290604052610616565b6040516020016103a9929190614761565b604051602081830303815290604052955050505050509392505050565b6060600080600080868060200190518101906103e2919061452a565b935093509350935060006103f589610983565b905060006104076008603f8685610ec0565b90506104168160400151611184565b9a9950505050505050505050565b60020a6000190190565b6060600061044561044085600a614c38565b61078b565b61045361044086600a614c38565b61046161044087600a614c38565b61046f61044088600a614c38565b60405160200161048294939291906149de565b60408051601f1981840301815282820190915260068252651e17b9bb339f60d11b6020830152915060006104b8878280896111cd565b90506001606060005b878110156106005760005b8881101561059157811580156104e0575080155b156104f357806104ef81614cf1565b9150505b60006105018c83858e6111cd565b90508581141561051e578461051581614cf1565b9550505061057f565b836105548761052d8886614c57565b61053890600a614c38565b61054387600a614c38565b600a61054f8b82614c38565b611241565b604051602001610565929190614761565b604051602081830303815290604052935080955060019450505b8061058981614cf1565b9150506104cc565b50816105c3856105a1868d614c57565b6105ac90600a614c38565b6105b785600a614c38565b600a61054f8982614c38565b6040516020016105d4929190614761565b6040516020818303038152906040529150600093506000925080806105f890614cf1565b9150506104c1565b508481856040516020016103a993929190614790565b606081516000141561063657505060408051602081019091526000815290565b6000604051806060016040528060408152602001614da560409139905060006003845160026106659190614bc5565b61066f9190614c02565b61067a906004614c38565b90506000610689826020614bc5565b6001600160401b038111156106ae57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156106d8576020820181803683370190505b509050818152600183018586518101602084015b818310156107465760039283018051603f601282901c811687015160f890811b8552600c83901c8216880151811b6001860152600683901c8216880151811b60028601529116860151901b938201939093526004016106ec565b60038951066001811461076057600281146107715761077d565b613d3d60f01b60011983015261077d565b603d60f81b6000198301525b509398975050505050505050565b6060610209826112be565b606060006107a5836002614c38565b6107b0906002614bc5565b6001600160401b038111156107d557634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156107ff576020820181803683370190505b509050600360fc1b8160008151811061082857634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061086557634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506000610889846002614c38565b610894906001614bc5565b90505b6001811115610928576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106108d657634e487b7160e01b600052603260045260246000fd5b1a60f81b8282815181106108fa57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c9361092181614cbd565b9050610897565b50831561097c5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064015b60405180910390fd5b9392505050565b606081516001600160401b038111156109ac57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156109df57816020015b60608152602001906001900390816109ca5790505b50905060005b8251811015610eba57600080610a21858481518110610a1457634e487b7160e01b600052603260045260246000fd5b60200260200101516113dc565b915091508115610a32575050610ea8565b610a3d816020611522565b634e55474714610a7a5760405162461bcd60e51b815260206004820152600860248201526704445433a50493a360c41b6044820152606401610973565b6000610a87826003611522565b90506000610a9483611762565b90506000610aa3846002611522565b610aae906001614bc5565b9050806001600160401b03811115610ad657634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610b0f57816020015b610afc6142b4565b815260200190600190039081610af45790505b50878781518110610b3057634e487b7160e01b600052603260045260246000fd5b602002602001018190525060005b81811015610ea157610b5085856118d9565b888881518110610b7057634e487b7160e01b600052603260045260246000fd5b60200260200101518281518110610b9757634e487b7160e01b600052603260045260246000fd5b60200260200101516080018181525050610bb085611997565b888881518110610bd057634e487b7160e01b600052603260045260246000fd5b60200260200101518281518110610bf757634e487b7160e01b600052603260045260246000fd5b60200260200101516060018181525050600080610c618a8a81518110610c2d57634e487b7160e01b600052603260045260246000fd5b60200260200101518481518110610c5457634e487b7160e01b600052603260045260246000fd5b6020026020010151611a7c565b91509150610c70878383611aaf565b8a8a81518110610c9057634e487b7160e01b600052603260045260246000fd5b60200260200101518481518110610cb757634e487b7160e01b600052603260045260246000fd5b602002602001015160200181905250848a8a81518110610ce757634e487b7160e01b600052603260045260246000fd5b60200260200101518481518110610d0e57634e487b7160e01b600052603260045260246000fd5b602002602001015160000181905250600080610d778c8c81518110610d4357634e487b7160e01b600052603260045260246000fd5b60200260200101518681518110610d6a57634e487b7160e01b600052603260045260246000fd5b6020026020010151611c60565b915091506000610e2d8d8d81518110610da057634e487b7160e01b600052603260045260246000fd5b60200260200101518781518110610dc757634e487b7160e01b600052603260045260246000fd5b6020026020010151610e288f8f81518110610df257634e487b7160e01b600052603260045260246000fd5b60200260200101518981518110610e1957634e487b7160e01b600052603260045260246000fd5b60200260200101518686611c93565b611d38565b92505050610e898d8d81518110610e5457634e487b7160e01b600052603260045260246000fd5b60200260200101518781518110610e7b57634e487b7160e01b600052603260045260246000fd5b602002602001015182611d85565b50505050508080610e9990614cf1565b915050610b3e565b5050505050505b80610eb281614cf1565b9150506109e5565b50919050565b610ec86142e3565b610ed0614324565b610eda8586611dd9565b8152856001600160401b03811115610f0257634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610f3b57816020015b610f28614344565b815260200190600190039081610f205790505b506020820152610f49614369565b610f54600287614c16565b610f5f906001614bdd565b60ff168152610f6f600287614c16565b610f7a906001614bdd565b60ff16602082015260016040820152610f91614389565b60005b888160ff161015610ff95760405180604001604052808381526020018481525084602001518260ff1681518110610fdb57634e487b7160e01b600052603260045260246000fd5b60200260200101819052508080610ff190614d0c565b915050610f94565b50825160ff8816908190528351602001526110126143b7565b61101c8889611dd9565b6040820152886001600160401b0381111561104757634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561108057816020015b61106d614344565b8152602001906001900390816110655790505b50606082015260005b86518160ff161015611175576000878260ff16815181106110ba57634e487b7160e01b600052603260045260246000fd5b60200260200101515111156111635761113182888360ff16815181106110f057634e487b7160e01b600052603260045260246000fd5b602002602001015161112c888b8660ff168151811061111f57634e487b7160e01b600052603260045260246000fd5b6020026020010151611e67565b612031565b61113b858361262f565b61114685838a612946565b6111508583612b72565b61115982612c4f565b6111638583612c5b565b8061116d81614d0c565b915050611089565b50509151979650505050505050565b604081015160808201518151829061119e90600190614c57565b815181106111bc57634e487b7160e01b600052603260045260246000fd5b602002602001018181525050919050565b6000806111da8385614c38565b6111e49086614bc5565b90506111f1600682614d2c565b6111fc906028614c38565b86611208600684614c02565b8151811061122657634e487b7160e01b600052603260045260246000fd5b6020026020010151901c63ffffffff16915050949350505050565b606060ff861661126057506040805160208101909152600081526112b5565b61126b866004612d37565b611274866112be565b61127d866112be565b611286866112be565b61128f866112be565b6040516020016112a39594939291906148fb565b60405160208183030381529060405290505b95945050505050565b6060816112e25750506040805180820190915260018152600360fc1b602082015290565b8160005b811561130c57806112f681614cf1565b91506113059050600a83614c02565b91506112e6565b806001600160401b0381111561133257634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561135c576020820181803683370190505b5092505b83156113d557611371600182614c57565b905061137e600a85614d2c565b611389906030614bc5565b60f81b8382815181106113ac57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506113ce600a85614c02565b9350611360565b5050919050565b600061140260405180606001604052806060815260200160008152602001600081525090565b82516114115760019150915091565b8281526002602082015282516001600160401b0381111561144257634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561146b578160200160208202803683370190505b50815260408051808201909152600c81526b0d2dce0eae85cd8cadccee8d60a31b60209091015282515b801561151c57838185516114a99190614c57565b815181106114c757634e487b7160e01b600052603260045260246000fd5b602002602001015182600001516001836114e19190614c57565b815181106114ff57634e487b7160e01b600052603260045260246000fd5b60209081029190910101528061151481614cbd565b915050611495565b50915091565b600061152d82610424565b8351805160009061154e57634e487b7160e01b600052603260045260246000fd5b602002602001015116905081836000015160008151811061157f57634e487b7160e01b600052603260045260246000fd5b6020026020010151901c83600001516000815181106115ae57634e487b7160e01b600052603260045260246000fd5b60200260200101818152505081836040018181516115cc9190614bc5565b9052506040830151608011610209576000600284602001516115ee9190614c02565b84515190915081101561175b576080846040015161160c9190614c57565b8451805160009061162d57634e487b7160e01b600052603260045260246000fd5b60209081029190910101805190911b9052600061164a6080610424565b855180518490811061166c57634e487b7160e01b600052603260045260246000fd5b602002602001015116905060808560000151838151811061169d57634e487b7160e01b600052603260045260246000fd5b60200260200101818151901c91508181525050608081901b85600001516000815181106116da57634e487b7160e01b600052603260045260246000fd5b602002602001018181511791508181525050608085604001516116fd9190614c57565b8551805160009061171e57634e487b7160e01b600052603260045260246000fd5b6020908102919091018101805190921c909152850180519061173f82614cf1565b815250506080856040018181516117569190614c57565b905250505b5092915050565b60606000611771836004611522565b61177c906001614bc5565b9050611789816001614bc5565b6001600160401b038111156117ae57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156117d7578160200160208202803683370190505b50915060005b818110156113d557600060206117f4866004611522565b901b17600080611805876001611522565b905080600114156118195760009150611859565b6000611826886008611522565b90506000611835896008611522565b905060006118448a6008611522565b905080600883901b601085901b171794505050505b600882901b929092179161186e876001611522565b60011461188557611880876008611522565b611888565b60ff5b909217918286611899866001614bc5565b815181106118b757634e487b7160e01b600052603260045260246000fd5b60200260200101818152505050505080806118d190614cf1565b9150506117dd565b604b81901b60006118eb846006611522565b905060006118fa856006611522565b604581901b93909317603f83901b179290506033611919866006611522565b901b9290921791603961192d866006611522565b901b9290921791601b611941866001611522565b60011461195857611953866018611522565b61195b565b60005b901b9290921791600361196f866001611522565b60011461198657611981866018611522565b611989565b60005b901b83179250505092915050565b6000806119a5836001611522565b6001146119bc576119b7836004611522565b6119bf565b60015b905060005b818110156113d5576000806119da866006611522565b905060006119e9876006611522565b905060006119f8886003611522565b90506000611a07896001611522565b90508060011415611a2357600684901b94909417821793611a30565b600683901b949094178317935b80600114611a3f576000611a42565b60805b60ff16611a5083600c614c38565b611a5a9190614bc5565b85901b9450848817975050505050508080611a7490614cf1565b9150506119c4565b600080611a896006610424565b6080840151603f1c169150611a9e6006610424565b60458460800151901c169050915091565b60606000611abe856001611522565b600114611ae057611ad0856010611522565b611adb906001614bc5565b611af6565b611aeb856008611522565b611af6906001614bc5565b90506040611b048486614c38565b611b0e9190614c02565b611b19906001614bc5565b6001600160401b03811115611b3e57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611b67578160200160208202803683370190505b5091506000805b82811015611c56576000611b83886002611522565b611b8e906001614bc5565b90508060041415611bb257611ba4886004611522565b611baf906004614bc5565b90505b6000611bbf896004611522565b905060005b82811015611c4057611bd7604086614d2c565b611be2906004614c38565b82901b87611bf1604088614c02565b81518110611c0f57634e487b7160e01b600052603260045260246000fd5b602090810291909101018051909117905284611c2a81614cf1565b9550508080611c3890614cf1565b915050611bc4565b5050508080611c4e90614cf1565b915050611b6e565b5050509392505050565b600080611c6d6006610424565b608084015160331c169150611c826006610424565b60398460800151901c169050915091565b600080611c9f85611a7c565b5090506000611cae8285614c38565b611cb89086614bc5565b602087015151909150611ccc604083614c02565b10611cdc5760009250505061097c565b611ce7604082614d2c565b611cf2906004614c38565b6020870151611d02604084614c02565b81518110611d2057634e487b7160e01b600052603260045260246000fd5b6020026020010151901c600f16925050509392505050565b600080600084600001518481518110611d6157634e487b7160e01b600052603260045260246000fd5b602002602001015192508263ffffffff169150602083901c600f1690509250925092565b600f811115611dc45760405162461bcd60e51b815260206004820152600b60248201526a0564552533a5345545a3a360ac1b6044820152606401610973565b60809091018051604e9290921b919091179052565b611de16142e3565b611dec600284614d40565b60ff166001148015611e0b5750611e04600283614d40565b60ff166001145b611e405760405162461bcd60e51b815260206004820152600660248201526504d4c3a433a360d41b6044820152606401610973565b611e5181604001518460ff16612e42565b60408101516102099060ff808616908516612ebe565b600080825111611ea65760405162461bcd60e51b815260206004820152600a602482015269043414c433a5056493a360b41b6044820152606401610973565b815160011415611eb857506000610209565b600060018351611ec89190614c6e565b90506000611ed66003610424565b604b85600081518110611ef957634e487b7160e01b600052603260045260246000fd5b602002602001015160800151901c1690505b60ff821615612026576000611f206018610424565b601b868560ff1681518110611f4557634e487b7160e01b600052603260045260246000fd5b602002602001015160800151901c16905060006040518060a00160405280600115158152602001611f766006610424565b601285901c1660ff168152602001611f8e6006610424565b600c85901c1660ff168152602001611fa66006610424565b600685901c1660ff168152602001611fbe6006610424565b841660ff1681525090506120018188602001518581518110611ff057634e487b7160e01b600052603260045260246000fd5b602002602001015160000151612f75565b156120125783945050505050610209565b61201d600185614c6e565b93505050611f0b565b506000949350505050565b600061203d6018610424565b601b848460ff168151811061206257634e487b7160e01b600052603260045260246000fd5b602002602001015160800151901c169050600061207f6018610424565b6003858560ff16815181106120a457634e487b7160e01b600052603260045260246000fd5b602002602001015160800151901c1690506000806120de868660ff1681518110610d6a57634e487b7160e01b600052603260045260246000fd5b9150915060008061210b888860ff1681518110610c5457634e487b7160e01b600052603260045260246000fd5b6020808c01805160ff80861690915290519083169101526040805160e081018252600191810191825292945090925081906060820161214a6006610424565b60128b901c1660ff1681526020016121626006610424565b600c8b901c1660ff16815260200161217a6006610424565b60068b901c1660ff1681526020016121926006610424565b60008b901c1660ff16815250815260200160405180606001604052808760ff1681526020018660ff168152602001600115158152508152508960200151604001819052506040518060a001604052806001151581526020016121f46006610424565b601288901c1660ff16815260200161220c6006610424565b600c88901c1660ff1681526020016122246006610424565b600688901c1660ff16815260200161223c6006610424565b60ff90881616905260208a015160a00152604080516008808252610120820190925290816020015b61226c614369565b8152602001906001900390816122645790505060208a015160600152604080516008808252610120820190925290816020015b6122a7614369565b81526020019060019003908161229f57505060208a01516080015260005b60088110156123ec5760008060006123098c8c60ff16815181106122f957634e487b7160e01b600052603260045260246000fd5b6020026020010151856000612fd8565b92509250925080156123d657828d6020015160800151858151811061233e57634e487b7160e01b600052603260045260246000fd5b60200260200101516000019060ff16908160ff1681525050818d6020015160800151858151811061237f57634e487b7160e01b600052603260045260246000fd5b60200260200101516020019060ff16908160ff168152505060018d602001516080015185815181106123c157634e487b7160e01b600052603260045260246000fd5b60209081029190910101519015156040909101525b50505080806123e490614cf1565b9150506122c5565b5060005b60088110156125175760008060006124348c8c60ff168151811061242457634e487b7160e01b600052603260045260246000fd5b6020026020010151856001612fd8565b925092509250801561250157828d6020015160600151858151811061246957634e487b7160e01b600052603260045260246000fd5b60200260200101516000019060ff16908160ff1681525050818d602001516060015185815181106124aa57634e487b7160e01b600052603260045260246000fd5b60200260200101516020019060ff16908160ff168152505060018d602001516060015185815181106124ec57634e487b7160e01b600052603260045260246000fd5b60209081029190910101519015156040909101525b505050808061250f90614cf1565b9150506123f0565b50600060a08a0181905260808a01526060890151516001600160401b0381111561255157634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561258a57816020015b612577614344565b81526020019060019003908161256f5790505b5060608a015261259a6003610424565b604b898960ff16815181106125bf57634e487b7160e01b600052603260045260246000fd5b602002602001015160800151901c16896000019060ff16908160ff1681525050612624888860ff168151811061260557634e487b7160e01b600052603260045260246000fd5b602002602001015183838c60400151613047909392919063ffffffff16565b505050505050505050565b60008260200151826000015160ff168151811061265c57634e487b7160e01b600052603260045260246000fd5b6020026020010151905060008260200151604001519050826020015160a001516040015160ff1660001415801561269a575080516040015160ff1615155b80156126bc575081600001516040015160ff1681600001516040015160ff1611155b1561275a5780516040908101518351909101516000916126db91614c6e565b90506127056001856020015160a00151604001516126f99190614c6e565b6040860151908361311b565b80826020015160000181815161271b9190614bdd565b60ff90811690915260208087015160a001510151161590506127585780846020015160a001516020018181516127519190614bdd565b60ff169052505b505b60208084015160a00151015160ff161580159061277e575080516020015160ff1615155b80156127a0575081600001516020015160ff1681600001516020015160ff1611155b156127e5576127e56001846020015160a00151602001516127c19190614c6e565b82516020908101518551909101516127d99190614c6e565b6040860151919061311b565b602083015160a001516080015160ff161580159061280a575080516080015160ff1615155b801561282c575081600001516080015160ff1681600001516080015160ff1611155b156128c157805160809081015183519091015160009161284b91614c6e565b602085015160a0015160800151604086015191925061286b919083613217565b8082602001516020018181516128819190614bdd565b60ff908116909152602086015160a0015160600151161590506128bf5780846020015160a001516060018181516128b89190614bdd565b60ff169052505b505b602083015160a001516060015160ff16158015906128e6575080516060015160ff1615155b8015612908575081600001516060015160ff1681600001516060015160ff1611155b1561294057602083015160a0015160609081015182518201518451909201516129409261293491614c6e565b60408601519190613217565b50505050565b60008360200151836000015160ff168151811061297357634e487b7160e01b600052603260045260246000fd5b60200260200101519050600083602001516040015190506129c76040518060400160405280600b81526020016a6d69782e6665617475726560a81b815250856000015160ff16612e3e90919063ffffffff16565b612ac260405180604001604052806013815260200172616e63686f722e636f6f7264696e6174652e6160681b81525082602001516020015160ff166040518060400160405280601381526020017230b731b437b91731b7b7b93234b730ba32973160691b81525085602001516000015160ff166040518060400160405280601581526020017472656365697665722e636f6f7264696e6174652e6160581b81525087602001516020015160ff16604051806040016040528060158152602001743932b1b2b4bb32b91731b7b7b93234b730ba32973160591b81525088602001516000015160ff1661330090979695949392919063ffffffff16565b60208082015151908301515160ff918216911611612ae1576000612af7565b602080820151519083015151612af79190614c6e565b60ff90811660a08601526020808301518101518482015190910151908216911611612b23576000612b3f565b806020015160200151826020015160200151612b3f9190614c6e565b60ff166080850181905260a0850151604086015180516020909101518851612b6b94909392909161330a565b5050505050565b60005b8251612b809061334e565b8015612b945750612b94826040015161334e565b15612bf9576000612ba8846000015161335e565b90506000612bb9846040015161335e565b90508015158015612bd85750602082901c600f16602082901c600f1610155b15612bf257612bf2612bea8383613387565b86519061338d565b5050612b75565b8251612c04906133b6565b82516000606082018190526080820181905260c0820181905260a090910152612c4a82604001516000606082018190526080820181905260c0820181905260a090910152565b505050565b612c58816133db565b50565b60005b8160600151518160ff161015612c4a57600082606001518260ff1681518110612c9757634e487b7160e01b600052603260045260246000fd5b6020026020010151905080602001516040015115612d245760a083015160208201518051612cc6908390614bdd565b60ff169052506080830151602080830151018051612ce5908390614bdd565b60ff9081169091526020860151805184935090918516908110612d1857634e487b7160e01b600052603260045260246000fd5b60200260200101819052505b5080612d2f81614d0c565b915050612c5e565b60606000612d46836002614c38565b6001600160401b03811115612d6b57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612d95576020820181803683370190505b5080519091505b8015612e36576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110612dd857634e487b7160e01b600052603260045260246000fd5b1a60f81b82612de8600184614c57565b81518110612e0657634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c9380612e2e81614cbd565b915050612d9c565b509392505050565b5050565b6006612e4e8280614c38565b612e589190614c02565b612e63906002614bc5565b6001600160401b03811115612e8857634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612eb1578160200160208202803683370190505b5082604001819052505050565b612ec86006610424565b821115612f055760405162461bcd60e51b815260206004820152600b60248201526a0564552533a534554573a360ac1b6044820152606401610973565b612f0f6006610424565b811115612f4c5760405162461bcd60e51b815260206004820152600b60248201526a564552533a534554573a3160a81b6044820152606401610973565b612f58600c603f613612565b6080909301805160459290921b603f9390931b9190931617179052565b6000816020015160ff16836020015160ff1611158015612fa35750816040015160ff16836040015160ff1611155b8061097c5750816060015160ff16836060015160ff161115801561097c57505060809081015191015160ff9182169116111590565b60008060008084612fea576000612fed565b60805b60ff16612ffb87600c614c38565b6130059190614bc5565b8760600151901c9050613018600c610424565b166130236006610424565b81169350600681901c92508315158061303b57508215155b91505093509350939050565b60ff81166020850152600061305b84613628565b905060005b828110156130f35760005b848110156130e05761307d8786613645565b50600061308b878385611c93565b905080156130c2576000806130a08984611d38565b92509250506130bb8a83602084901b60248a901b171761338d565b50506130cd565b6130cd88600061338d565b50806130d881614cf1565b91505061306b565b50806130eb81614cf1565b915050613060565b5060ff831685526000606086018190526080860181905260c0860181905260a0860152612b6b565b60005b835160ff168110156131f957835160ff165b8360ff1681111561318c578360ff1681101561314b5761318c565b61317a61315b60ff851683614bc5565b6040870151849061316d9085836136df565b6040890151929190613788565b8061318481614cbd565b915050613130565b50600061319a846001614bdd565b60ff1690505b6131aa8385614bdd565b60ff1681116131e6576131d4818361316d8760ff16868a604001516136df9092919063ffffffff16565b806131de81614cf1565b9150506131a0565b50806131f181614cf1565b91505061311e565b50808360000181815161320c9190614bdd565b60ff16905250505050565b60005b836020015160ff168110156132ed57602084015160ff165b8360ff16811115613280578360ff1681101561324d57613280565b61326e8261325e60ff861684614bc5565b604088015161316d9086866136df565b8061327881614cbd565b915050613232565b50600061328e846001614bdd565b60ff1690505b61329e8385614bdd565b60ff1681116132da576132c8828261316d858860ff168a604001516136df9092919063ffffffff16565b806132d281614cf1565b915050613294565b50806132e581614cf1565b91505061321a565b50808360200181815161320c9190614bdd565b5050505050505050565b60ff80851660608701819052908416608087015260c086015261332d8483614bdd565b60ff16855261333c8382614bdd565b60ff1660209095019490945250505050565b6000610209828360000151613645565b6000610209826060015160ff16836080015160ff1684604001516136df9092919063ffffffff16565b80610209565b612e3e826060015160ff16836080015160ff16838560400151613788909392919063ffffffff16565b6000806133c68360400151611a7c565b60ff9182168552166020909301929092525050565b606060008060005b846020015160800151518160ff161015612b6b576133ff614369565b8560200151608001518260ff168151811061342a57634e487b7160e01b600052603260045260246000fd5b60200260200101516040015115613552578361344581614d0c565b9450508560200151608001518260ff168151811061347357634e487b7160e01b600052603260045260246000fd5b60200260200101519050806020015186606001518360ff16815181106134a957634e487b7160e01b600052603260045260246000fd5b6020026020010151602001516000019060ff16908160ff1681525050806000015186606001518360ff16815181106134f157634e487b7160e01b600052603260045260246000fd5b6020026020010151602001516020019060ff16908160ff1681525050600186606001518360ff168151811061353657634e487b7160e01b600052603260045260246000fd5b60209081029190910181015101519015156040909101526135ff565b8560200151606001518260ff168151811061357d57634e487b7160e01b600052603260045260246000fd5b602002602001015160400151156135ff578261359881614d0c565b9350508451600014156135b5576135b286604001516137c1565b94505b6135f2868760200151606001518460ff16815181106135e457634e487b7160e01b600052603260045260246000fd5b602002602001015187613a22565b90506135ff868284613b8d565b508061360a81614d0c565b9150506133e3565b60008161361e84610424565b901b199392505050565b60006136346003610424565b604b8360800151901c169050919050565b60008260a00151156136ce576060830151613661906001614bdd565b60ff168260ff16116136be57608083015161367d906001614bdd565b60ff16836020015160ff16141561369657506000610209565b60c083015160ff166060840152608083018051906136b382614d0c565b60ff169052506136d6565b606083018051906136b382614d0c565b600160a08401525b50600192915050565b6000806136eb85611a7c565b50905060006136fa8285614c38565b6137049086614bc5565b604087015151909150613718600683614c02565b106137285760009250505061097c565b613733600682614d2c565b61373e906028614c38565b604087015161374e600684614c02565b8151811061376c57634e487b7160e01b600052603260045260246000fd5b6020026020010151901c64ffffffffff16925050509392505050565b600061379385611a7c565b50905060006137a28285614c38565b6137ac9086614bc5565b90506137b9868285613e11565b505050505050565b606060008060006137d185613ed6565b60408051600580825260c082019092529396509194509250816020015b6137f6614369565b8152602001906001900390816137ee579050509350808460008151811061382d57634e487b7160e01b600052603260045260246000fd5b60200260200101819052506040518060600160405280826000015160ff1681526020018483602001516138609190614c6e565b60ff168152602001600115158152508460018151811061389057634e487b7160e01b600052603260045260246000fd5b6020908102919091010152826138a7600282614d40565b60ff16156138bd57806138b981614d0c565b9150505b6040805160608101909152825160ff168152602081016138de600284614c16565b84602001516138ed9190614c6e565b60ff168152602001600115158152508560028151811061391d57634e487b7160e01b600052603260045260246000fd5b602090810291909101015282613934600282614d40565b60ff161561394a578061394681614d0c565b9150505b6040805160608101909152835160ff1681526020810161396b600284614c16565b856020015161397a9190614bdd565b60ff16815260200160011515815250866003815181106139aa57634e487b7160e01b600052603260045260246000fd5b60200260200101819052506040518060600160405280846000015160ff1681526020018585602001516139dd9190614bdd565b60ff1681526020016001151581525086600481518110613a0d57634e487b7160e01b600052603260045260246000fd5b60200260200101819052505050505050919050565b613a2a614369565b81836000015160ff1681518110613a5157634e487b7160e01b600052603260045260246000fd5b60209081029190910101515160ff908116825283518351849291909116908110613a8b57634e487b7160e01b600052603260045260246000fd5b60209081029190910181015181015160ff908116838301526001604084015284820151161015613ad65782602001518160200151613ac99190614c6e565b60ff166020820152613aff565b60208360200151613ae79190614c6e565b8160200151613af69190614bdd565b60ff1660208201525b805160208201516040808701510151613b2092909160ff9182169116614298565b61097c57806020015160ff1682600081518110613b4d57634e487b7160e01b600052603260045260246000fd5b60200260200101516020015160ff161115613b7d5760208101805190613b7282614d0c565b60ff16905250613aff565b60208101805190613b7282614cd4565b613b95614389565b604084015151613ba790600190614c6e565b60ff16836000015160ff16108015613bf45750613bf481602001516001613bce9190614bdd565b8451613bda9190614bdd565b602085015160408088015101519160ff9081169116614298565b15613c145760208101805190613c0982614d0c565b60ff16905250613b95565b825160ff1615801590613c4057506040810151613c32906001614bdd565b60ff16836000015160ff1610155b8015613c675750613c6781604001516001613c5b9190614bdd565b8451613bda9190614c6e565b15613c875760408101805190613c7c82614d0c565b60ff16905250613c14565b602083015160ff1615801590613cb657506060810151613ca8906001614bdd565b60ff16836020015160ff1610155b8015613cf8575082516060820151613cf89160ff1690613cd7906001614bdd565b8560200151613ce69190614c6e565b6040808801510151919060ff16614298565b15613d185760608101805190613d0d82614d0c565b60ff16905250613c87565b6001846040015160200151613d2d9190614c6e565b60ff16836020015160ff16108015613d69575082516080820151613d699160ff1690613d5a906001614bdd565b8560200151613ce69190614bdd565b15613d895760808101805190613d7e82614d0c565b60ff16905250613d18565b83606001518260ff1681518110613db057634e487b7160e01b600052603260045260246000fd5b602002602001015160200151604001516129405760405180604001604052808281526020018481525084606001518360ff1681518110613e0057634e487b7160e01b600052603260045260246000fd5b602002602001018190525050505050565b613e1c600683614c02565b8360400151511115612c4a576000613e35600684614d2c565b613e40906028614c38565b9050613e4d602882613612565b6040850151613e5d600686614c02565b81518110613e7b57634e487b7160e01b600052603260045260246000fd5b6020908102919091010180519091169052604084015182821b90613ea0600686614c02565b81518110613ebe57634e487b7160e01b600052603260045260246000fd5b60200260200101818151179150818152505050505050565b600080613ee1614369565b8351613eef90600290614c16565b60ff1681526020840151613f0590600290614c16565b60ff1660208201526001604082018190529250829150600080808480825b806141455782158015613f34575083155b9250821561400a57613f78613f4a836001614bdd565b8851613f569190614c6e565b60ff168a8960200151613f699190614c6e565b60408d0151919060ff16614298565b8015613f995750613f99613f8d836001614bdd565b8851613f569190614bdd565b8015613fcd5750613fcd613fae836001614bdd565b8851613fba9190614c6e565b60ff16898960200151613f699190614bdd565b8015613fee5750613fee613fe2836001614bdd565b8851613fba9190614bdd565b156140055781613ffd81614d0c565b92505061400a565b600193505b8561408e5760008988602001516140219190614c6e565b60ff1611801561405a5750865161405a9061403d908490614c6e565b60ff1661404b8b6001614bdd565b8960200151613f699190614c6e565b8015614072575086516140729061403d908490614bdd565b15614089578861408181614d0c565b99505061408e565b600195505b846141245760018a602001516140a49190614c6e565b60ff168888602001516140b79190614bdd565b60ff161080156140f0575086516140f0906140d3908490614c6e565b60ff166140e18a6001614bdd565b8960200151613f699190614bdd565b801561410857508651614108906140d3908490614bdd565b1561411f578761411781614d0c565b985050614124565b600194505b84801561412e5750855b80156141375750835b15614140575060015b613f23565b8760ff168960ff161461428b57600061415e898b614bdd565b614169906001614bdd565b9050600060026141798184614d40565b60ff16156141915761418c836001614bdd565b614193565b825b61419d9190614c16565b905060008b60018b60200151846141b49190614bdd565b6141be9190614c6e565b6141c89190614c6e565b9050896020015160ff168160ff1611156142305760008a60200151826141ee9190614c6e565b90506141fa818e614bdd565b9c508060ff168c60ff161161421b576142138c82614c6e565b9b508b614229565b614225818d614c6e565b9b508b5b5050614280565b6000818b602001516142429190614c6e565b90508060ff168d60ff16116142635761425b8d82614c6e565b9c508c614271565b61426d818e614c6e565b9c508c5b5061427c818d614bdd565b9b50505b60ff1660208a015250505b5050505050509193909250565b6000806142a68585856136df565b60ff16151595945050505050565b6040518060a0016040528060608152602001606081526020016060815260200160008152602001600081525090565b6040805160e081018252600080825260208201529081016143026142b4565b8152600060208201819052604082018190526060820181905260809091015290565b60405180604001604052806143376142e3565b8152602001606081525090565b6040518060400160405280614357614389565b8152602001614364614369565b905290565b604080516060810182526000808252602082018190529181019190915290565b6040805160a08101825260008082526020820181905291810182905260608101829052608081019190915290565b6040518060c00160405280600060ff1681526020016143d46143fb565b81526020016143e16142e3565b815260606020820181905260006040830181905291015290565b6040805160e0810182526000808252602082015290810161441a614344565b81526020016060815260200160608152602001614337614389565b80516001600160a01b038116811461444c57600080fd5b919050565b600082601f830112614461578081fd5b8135602061447661447183614ba2565b614b72565b80838252828201915082860187848660051b8901011115614495578586fd5b855b858110156144b357813584529284019290840190600101614497565b5090979650505050505050565b600082601f8301126144d0578081fd5b81356001600160401b038111156144e9576144e9614d8e565b6144fc601f8201601f1916602001614b72565b818152846020838601011115614510578283fd5b816020850160208301379081016020019190915292915050565b6000806000806080858703121561453f578384fd5b61454885614435565b9350602085015192506040850151915061456460608601614435565b905092959194509250565b600080600060608486031215614583578283fd5b83356001600160401b0380821115614599578485fd5b818601915086601f8301126145ac578485fd5b813560206145bc61447183614ba2565b8083825282820191508286018b848660051b89010111156145db57898afd5b895b85811015614614578135878111156145f3578b8cfd5b6146018e87838c0101614451565b85525092840192908401906001016145dd565b5090985050508701359250508082111561462c578384fd5b614638878388016144c0565b9350604086013591508082111561464d578283fd5b5061465a868287016144c0565b9150509250925092565b600080600060608486031215614678578283fd5b83356001600160401b038082111561468e578485fd5b61469a87838801614451565b9450602086013591508082111561462c578384fd5b6000602082840312156146c0578081fd5b81356001600160e01b03198116811461097c578182fd5b6000602082840312156146e8578081fd5b81356001600160401b038111156146fd578182fd5b614709848285016144c0565b949350505050565b600080600060608486031215614725578283fd5b835192506020840151915061473c60408501614435565b90509250925092565b60008151614757818560208601614c91565b9290920192915050565b60008351614773818460208801614c91565b835190830190614787818360208801614c91565b01949350505050565b600084516147a2818460208901614c91565b8451908301906147b6818360208901614c91565b84519101906147c9818360208801614c91565b0195945050505050565b683d913730b6b2911d1160b91b815265139d59d9d19560d21b60098201526c1116113a37b5b2b724b2111d1160991b600f820152855160009061481d81601c850160208b01614c91565b701116113232b9b1b934b83a34b7b7111d1160791b601c918401918201526e151a1948139d59d9da595cdd081195608a1b602d8201526d11161134ba32b6a230ba30911d1160911b603c820152865161487d81604a840160208b01614c91565b6a11161137bbb732b9111d1160a91b604a929091019182015285516148a9816055840160208a01614c91565b6148ee6148e06148da6148d46055858701016c1116101134b6b0b3b2911d101160991b8152600d0190565b89614745565b87614745565b61227d60f01b815260020190565b9998505050505050505050565b6d093c726563742066696c6c3d272360901b8152855160009061492581600e850160208b01614c91565b642720783d2760d81b600e91840191820152865161494a816013840160208b01614c91565b642720793d2760d81b601392909101918201528551614970816018840160208a01614c91565b6927206865696768743d2760b01b60189290910191820152845161499b816022840160208901614c91565b68272077696474683d2760b81b6022929091019182015283516149c581602b840160208801614c91565b6148ee602b828401016313979f0560e11b815260040190565b7101e39bb33903b34b2bba137bc1e93981018160751b815260008551614a0b816012850160208a01614c91565b600160fd1b6012918401918201528551614a2c816013840160208a01614c91565b6920272077696474683d2760b01b601392909101918201528451614a5781601d840160208901614c91565b6927206865696768743d2760b01b601d92909101918201528351614a82816027840160208801614c91565b7f2720786d6c6e733d27687474703a2f2f7777772e77332e6f72672f323030302f602792909101918201527f7376672720786d6c6e733a786c696e6b3d27687474703a2f2f7777772e77332e60478201527137b93397989c9c9c97bc3634b735939f2e3760711b60678201526079019695505050505050565b6020808252825182820181905260009190848201906040850190845b81811015614b3357835183529284019291840191600101614b17565b50909695505050505050565b6020815260008251806020840152614b5e816040850160208701614c91565b601f01601f19169190910160400192915050565b604051601f8201601f191681016001600160401b0381118282101715614b9a57614b9a614d8e565b604052919050565b60006001600160401b03821115614bbb57614bbb614d8e565b5060051b60200190565b60008219821115614bd857614bd8614d62565b500190565b600060ff821660ff84168060ff03821115614bfa57614bfa614d62565b019392505050565b600082614c1157614c11614d78565b500490565b600060ff831680614c2957614c29614d78565b8060ff84160491505092915050565b6000816000190483118215151615614c5257614c52614d62565b500290565b600082821015614c6957614c69614d62565b500390565b600060ff821660ff841680821015614c8857614c88614d62565b90039392505050565b60005b83811015614cac578181015183820152602001614c94565b838111156129405750506000910152565b600081614ccc57614ccc614d62565b506000190190565b600060ff821680614ce757614ce7614d62565b6000190192915050565b6000600019821415614d0557614d05614d62565b5060010190565b600060ff821660ff811415614d2357614d23614d62565b60010192915050565b600082614d3b57614d3b614d78565b500690565b600060ff831680614d5357614d53614d78565b8060ff84160691505092915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fdfe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220011f01aebe2bbd379c8a93e78235ee777449061d828051fbb9bea25c50838c2864736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061006d5760003560e01c806301ffc9a7146100725780634a0ef7031461009a5780637a99b292146100c85780638a61d30414610107578063b17400661461011a578063c142c49614610141578063ce1b1d4314610161575b600080fd5b6100856100803660046146af565b610188565b60405190151581526020015b60405180910390f35b6100bb6100a83660046146d7565b5060408051602081019091526000815290565b6040516100919190614b3f565b6100ef7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610091565b6100bb610115366004614664565b61020f565b6100ef7f000000000000000000000000000000000000000000000000000000000000000081565b61015461014f36600461456f565b6103c6565b6040516100919190614afb565b6100ef7f000000000000000000000000000000000000000000000000000000000000000081565b60006001600160e01b031982166240966160e41b14806101b857506001600160e01b0319821663c0bd0d3160e01b145b806101d357506001600160e01b031982166312fc4fa960e21b145b806101ee57506001600160e01b03198216638b9e1aa360e01b145b8061020957506001600160e01b031982166301ffc9a760e01b145b92915050565b606060008060008580602001905181019061022a9190614711565b925092509250600061023c6006610424565b603f8960018b5161024d9190614c57565b8151811061026b57634e487b7160e01b600052603260045260246000fd5b6020026020010151901c16905060006102846006610424565b60458a60018c516102959190614c57565b815181106102b357634e487b7160e01b600052603260045260246000fd5b6020026020010151901c1690506102cb89838361042e565b95506102d686610616565b95506040518060400160405280601d81526020017f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c00000081525061039861031a8761078b565b610325876020610796565b610339876001600160a01b03166014610796565b6040518060400160405280601a81526020017f646174613a696d6167652f7376672b786d6c3b6261736536342c0000000000008152508b6040516020016103849594939291906147d3565b604051602081830303815290604052610616565b6040516020016103a9929190614761565b604051602081830303815290604052955050505050509392505050565b6060600080600080868060200190518101906103e2919061452a565b935093509350935060006103f589610983565b905060006104076008603f8685610ec0565b90506104168160400151611184565b9a9950505050505050505050565b60020a6000190190565b6060600061044561044085600a614c38565b61078b565b61045361044086600a614c38565b61046161044087600a614c38565b61046f61044088600a614c38565b60405160200161048294939291906149de565b60408051601f1981840301815282820190915260068252651e17b9bb339f60d11b6020830152915060006104b8878280896111cd565b90506001606060005b878110156106005760005b8881101561059157811580156104e0575080155b156104f357806104ef81614cf1565b9150505b60006105018c83858e6111cd565b90508581141561051e578461051581614cf1565b9550505061057f565b836105548761052d8886614c57565b61053890600a614c38565b61054387600a614c38565b600a61054f8b82614c38565b611241565b604051602001610565929190614761565b604051602081830303815290604052935080955060019450505b8061058981614cf1565b9150506104cc565b50816105c3856105a1868d614c57565b6105ac90600a614c38565b6105b785600a614c38565b600a61054f8982614c38565b6040516020016105d4929190614761565b6040516020818303038152906040529150600093506000925080806105f890614cf1565b9150506104c1565b508481856040516020016103a993929190614790565b606081516000141561063657505060408051602081019091526000815290565b6000604051806060016040528060408152602001614da560409139905060006003845160026106659190614bc5565b61066f9190614c02565b61067a906004614c38565b90506000610689826020614bc5565b6001600160401b038111156106ae57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156106d8576020820181803683370190505b509050818152600183018586518101602084015b818310156107465760039283018051603f601282901c811687015160f890811b8552600c83901c8216880151811b6001860152600683901c8216880151811b60028601529116860151901b938201939093526004016106ec565b60038951066001811461076057600281146107715761077d565b613d3d60f01b60011983015261077d565b603d60f81b6000198301525b509398975050505050505050565b6060610209826112be565b606060006107a5836002614c38565b6107b0906002614bc5565b6001600160401b038111156107d557634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156107ff576020820181803683370190505b509050600360fc1b8160008151811061082857634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061086557634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506000610889846002614c38565b610894906001614bc5565b90505b6001811115610928576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106108d657634e487b7160e01b600052603260045260246000fd5b1a60f81b8282815181106108fa57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c9361092181614cbd565b9050610897565b50831561097c5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064015b60405180910390fd5b9392505050565b606081516001600160401b038111156109ac57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156109df57816020015b60608152602001906001900390816109ca5790505b50905060005b8251811015610eba57600080610a21858481518110610a1457634e487b7160e01b600052603260045260246000fd5b60200260200101516113dc565b915091508115610a32575050610ea8565b610a3d816020611522565b634e55474714610a7a5760405162461bcd60e51b815260206004820152600860248201526704445433a50493a360c41b6044820152606401610973565b6000610a87826003611522565b90506000610a9483611762565b90506000610aa3846002611522565b610aae906001614bc5565b9050806001600160401b03811115610ad657634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610b0f57816020015b610afc6142b4565b815260200190600190039081610af45790505b50878781518110610b3057634e487b7160e01b600052603260045260246000fd5b602002602001018190525060005b81811015610ea157610b5085856118d9565b888881518110610b7057634e487b7160e01b600052603260045260246000fd5b60200260200101518281518110610b9757634e487b7160e01b600052603260045260246000fd5b60200260200101516080018181525050610bb085611997565b888881518110610bd057634e487b7160e01b600052603260045260246000fd5b60200260200101518281518110610bf757634e487b7160e01b600052603260045260246000fd5b60200260200101516060018181525050600080610c618a8a81518110610c2d57634e487b7160e01b600052603260045260246000fd5b60200260200101518481518110610c5457634e487b7160e01b600052603260045260246000fd5b6020026020010151611a7c565b91509150610c70878383611aaf565b8a8a81518110610c9057634e487b7160e01b600052603260045260246000fd5b60200260200101518481518110610cb757634e487b7160e01b600052603260045260246000fd5b602002602001015160200181905250848a8a81518110610ce757634e487b7160e01b600052603260045260246000fd5b60200260200101518481518110610d0e57634e487b7160e01b600052603260045260246000fd5b602002602001015160000181905250600080610d778c8c81518110610d4357634e487b7160e01b600052603260045260246000fd5b60200260200101518681518110610d6a57634e487b7160e01b600052603260045260246000fd5b6020026020010151611c60565b915091506000610e2d8d8d81518110610da057634e487b7160e01b600052603260045260246000fd5b60200260200101518781518110610dc757634e487b7160e01b600052603260045260246000fd5b6020026020010151610e288f8f81518110610df257634e487b7160e01b600052603260045260246000fd5b60200260200101518981518110610e1957634e487b7160e01b600052603260045260246000fd5b60200260200101518686611c93565b611d38565b92505050610e898d8d81518110610e5457634e487b7160e01b600052603260045260246000fd5b60200260200101518781518110610e7b57634e487b7160e01b600052603260045260246000fd5b602002602001015182611d85565b50505050508080610e9990614cf1565b915050610b3e565b5050505050505b80610eb281614cf1565b9150506109e5565b50919050565b610ec86142e3565b610ed0614324565b610eda8586611dd9565b8152856001600160401b03811115610f0257634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610f3b57816020015b610f28614344565b815260200190600190039081610f205790505b506020820152610f49614369565b610f54600287614c16565b610f5f906001614bdd565b60ff168152610f6f600287614c16565b610f7a906001614bdd565b60ff16602082015260016040820152610f91614389565b60005b888160ff161015610ff95760405180604001604052808381526020018481525084602001518260ff1681518110610fdb57634e487b7160e01b600052603260045260246000fd5b60200260200101819052508080610ff190614d0c565b915050610f94565b50825160ff8816908190528351602001526110126143b7565b61101c8889611dd9565b6040820152886001600160401b0381111561104757634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561108057816020015b61106d614344565b8152602001906001900390816110655790505b50606082015260005b86518160ff161015611175576000878260ff16815181106110ba57634e487b7160e01b600052603260045260246000fd5b60200260200101515111156111635761113182888360ff16815181106110f057634e487b7160e01b600052603260045260246000fd5b602002602001015161112c888b8660ff168151811061111f57634e487b7160e01b600052603260045260246000fd5b6020026020010151611e67565b612031565b61113b858361262f565b61114685838a612946565b6111508583612b72565b61115982612c4f565b6111638583612c5b565b8061116d81614d0c565b915050611089565b50509151979650505050505050565b604081015160808201518151829061119e90600190614c57565b815181106111bc57634e487b7160e01b600052603260045260246000fd5b602002602001018181525050919050565b6000806111da8385614c38565b6111e49086614bc5565b90506111f1600682614d2c565b6111fc906028614c38565b86611208600684614c02565b8151811061122657634e487b7160e01b600052603260045260246000fd5b6020026020010151901c63ffffffff16915050949350505050565b606060ff861661126057506040805160208101909152600081526112b5565b61126b866004612d37565b611274866112be565b61127d866112be565b611286866112be565b61128f866112be565b6040516020016112a39594939291906148fb565b60405160208183030381529060405290505b95945050505050565b6060816112e25750506040805180820190915260018152600360fc1b602082015290565b8160005b811561130c57806112f681614cf1565b91506113059050600a83614c02565b91506112e6565b806001600160401b0381111561133257634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561135c576020820181803683370190505b5092505b83156113d557611371600182614c57565b905061137e600a85614d2c565b611389906030614bc5565b60f81b8382815181106113ac57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506113ce600a85614c02565b9350611360565b5050919050565b600061140260405180606001604052806060815260200160008152602001600081525090565b82516114115760019150915091565b8281526002602082015282516001600160401b0381111561144257634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561146b578160200160208202803683370190505b50815260408051808201909152600c81526b0d2dce0eae85cd8cadccee8d60a31b60209091015282515b801561151c57838185516114a99190614c57565b815181106114c757634e487b7160e01b600052603260045260246000fd5b602002602001015182600001516001836114e19190614c57565b815181106114ff57634e487b7160e01b600052603260045260246000fd5b60209081029190910101528061151481614cbd565b915050611495565b50915091565b600061152d82610424565b8351805160009061154e57634e487b7160e01b600052603260045260246000fd5b602002602001015116905081836000015160008151811061157f57634e487b7160e01b600052603260045260246000fd5b6020026020010151901c83600001516000815181106115ae57634e487b7160e01b600052603260045260246000fd5b60200260200101818152505081836040018181516115cc9190614bc5565b9052506040830151608011610209576000600284602001516115ee9190614c02565b84515190915081101561175b576080846040015161160c9190614c57565b8451805160009061162d57634e487b7160e01b600052603260045260246000fd5b60209081029190910101805190911b9052600061164a6080610424565b855180518490811061166c57634e487b7160e01b600052603260045260246000fd5b602002602001015116905060808560000151838151811061169d57634e487b7160e01b600052603260045260246000fd5b60200260200101818151901c91508181525050608081901b85600001516000815181106116da57634e487b7160e01b600052603260045260246000fd5b602002602001018181511791508181525050608085604001516116fd9190614c57565b8551805160009061171e57634e487b7160e01b600052603260045260246000fd5b6020908102919091018101805190921c909152850180519061173f82614cf1565b815250506080856040018181516117569190614c57565b905250505b5092915050565b60606000611771836004611522565b61177c906001614bc5565b9050611789816001614bc5565b6001600160401b038111156117ae57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156117d7578160200160208202803683370190505b50915060005b818110156113d557600060206117f4866004611522565b901b17600080611805876001611522565b905080600114156118195760009150611859565b6000611826886008611522565b90506000611835896008611522565b905060006118448a6008611522565b905080600883901b601085901b171794505050505b600882901b929092179161186e876001611522565b60011461188557611880876008611522565b611888565b60ff5b909217918286611899866001614bc5565b815181106118b757634e487b7160e01b600052603260045260246000fd5b60200260200101818152505050505080806118d190614cf1565b9150506117dd565b604b81901b60006118eb846006611522565b905060006118fa856006611522565b604581901b93909317603f83901b179290506033611919866006611522565b901b9290921791603961192d866006611522565b901b9290921791601b611941866001611522565b60011461195857611953866018611522565b61195b565b60005b901b9290921791600361196f866001611522565b60011461198657611981866018611522565b611989565b60005b901b83179250505092915050565b6000806119a5836001611522565b6001146119bc576119b7836004611522565b6119bf565b60015b905060005b818110156113d5576000806119da866006611522565b905060006119e9876006611522565b905060006119f8886003611522565b90506000611a07896001611522565b90508060011415611a2357600684901b94909417821793611a30565b600683901b949094178317935b80600114611a3f576000611a42565b60805b60ff16611a5083600c614c38565b611a5a9190614bc5565b85901b9450848817975050505050508080611a7490614cf1565b9150506119c4565b600080611a896006610424565b6080840151603f1c169150611a9e6006610424565b60458460800151901c169050915091565b60606000611abe856001611522565b600114611ae057611ad0856010611522565b611adb906001614bc5565b611af6565b611aeb856008611522565b611af6906001614bc5565b90506040611b048486614c38565b611b0e9190614c02565b611b19906001614bc5565b6001600160401b03811115611b3e57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611b67578160200160208202803683370190505b5091506000805b82811015611c56576000611b83886002611522565b611b8e906001614bc5565b90508060041415611bb257611ba4886004611522565b611baf906004614bc5565b90505b6000611bbf896004611522565b905060005b82811015611c4057611bd7604086614d2c565b611be2906004614c38565b82901b87611bf1604088614c02565b81518110611c0f57634e487b7160e01b600052603260045260246000fd5b602090810291909101018051909117905284611c2a81614cf1565b9550508080611c3890614cf1565b915050611bc4565b5050508080611c4e90614cf1565b915050611b6e565b5050509392505050565b600080611c6d6006610424565b608084015160331c169150611c826006610424565b60398460800151901c169050915091565b600080611c9f85611a7c565b5090506000611cae8285614c38565b611cb89086614bc5565b602087015151909150611ccc604083614c02565b10611cdc5760009250505061097c565b611ce7604082614d2c565b611cf2906004614c38565b6020870151611d02604084614c02565b81518110611d2057634e487b7160e01b600052603260045260246000fd5b6020026020010151901c600f16925050509392505050565b600080600084600001518481518110611d6157634e487b7160e01b600052603260045260246000fd5b602002602001015192508263ffffffff169150602083901c600f1690509250925092565b600f811115611dc45760405162461bcd60e51b815260206004820152600b60248201526a0564552533a5345545a3a360ac1b6044820152606401610973565b60809091018051604e9290921b919091179052565b611de16142e3565b611dec600284614d40565b60ff166001148015611e0b5750611e04600283614d40565b60ff166001145b611e405760405162461bcd60e51b815260206004820152600660248201526504d4c3a433a360d41b6044820152606401610973565b611e5181604001518460ff16612e42565b60408101516102099060ff808616908516612ebe565b600080825111611ea65760405162461bcd60e51b815260206004820152600a602482015269043414c433a5056493a360b41b6044820152606401610973565b815160011415611eb857506000610209565b600060018351611ec89190614c6e565b90506000611ed66003610424565b604b85600081518110611ef957634e487b7160e01b600052603260045260246000fd5b602002602001015160800151901c1690505b60ff821615612026576000611f206018610424565b601b868560ff1681518110611f4557634e487b7160e01b600052603260045260246000fd5b602002602001015160800151901c16905060006040518060a00160405280600115158152602001611f766006610424565b601285901c1660ff168152602001611f8e6006610424565b600c85901c1660ff168152602001611fa66006610424565b600685901c1660ff168152602001611fbe6006610424565b841660ff1681525090506120018188602001518581518110611ff057634e487b7160e01b600052603260045260246000fd5b602002602001015160000151612f75565b156120125783945050505050610209565b61201d600185614c6e565b93505050611f0b565b506000949350505050565b600061203d6018610424565b601b848460ff168151811061206257634e487b7160e01b600052603260045260246000fd5b602002602001015160800151901c169050600061207f6018610424565b6003858560ff16815181106120a457634e487b7160e01b600052603260045260246000fd5b602002602001015160800151901c1690506000806120de868660ff1681518110610d6a57634e487b7160e01b600052603260045260246000fd5b9150915060008061210b888860ff1681518110610c5457634e487b7160e01b600052603260045260246000fd5b6020808c01805160ff80861690915290519083169101526040805160e081018252600191810191825292945090925081906060820161214a6006610424565b60128b901c1660ff1681526020016121626006610424565b600c8b901c1660ff16815260200161217a6006610424565b60068b901c1660ff1681526020016121926006610424565b60008b901c1660ff16815250815260200160405180606001604052808760ff1681526020018660ff168152602001600115158152508152508960200151604001819052506040518060a001604052806001151581526020016121f46006610424565b601288901c1660ff16815260200161220c6006610424565b600c88901c1660ff1681526020016122246006610424565b600688901c1660ff16815260200161223c6006610424565b60ff90881616905260208a015160a00152604080516008808252610120820190925290816020015b61226c614369565b8152602001906001900390816122645790505060208a015160600152604080516008808252610120820190925290816020015b6122a7614369565b81526020019060019003908161229f57505060208a01516080015260005b60088110156123ec5760008060006123098c8c60ff16815181106122f957634e487b7160e01b600052603260045260246000fd5b6020026020010151856000612fd8565b92509250925080156123d657828d6020015160800151858151811061233e57634e487b7160e01b600052603260045260246000fd5b60200260200101516000019060ff16908160ff1681525050818d6020015160800151858151811061237f57634e487b7160e01b600052603260045260246000fd5b60200260200101516020019060ff16908160ff168152505060018d602001516080015185815181106123c157634e487b7160e01b600052603260045260246000fd5b60209081029190910101519015156040909101525b50505080806123e490614cf1565b9150506122c5565b5060005b60088110156125175760008060006124348c8c60ff168151811061242457634e487b7160e01b600052603260045260246000fd5b6020026020010151856001612fd8565b925092509250801561250157828d6020015160600151858151811061246957634e487b7160e01b600052603260045260246000fd5b60200260200101516000019060ff16908160ff1681525050818d602001516060015185815181106124aa57634e487b7160e01b600052603260045260246000fd5b60200260200101516020019060ff16908160ff168152505060018d602001516060015185815181106124ec57634e487b7160e01b600052603260045260246000fd5b60209081029190910101519015156040909101525b505050808061250f90614cf1565b9150506123f0565b50600060a08a0181905260808a01526060890151516001600160401b0381111561255157634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561258a57816020015b612577614344565b81526020019060019003908161256f5790505b5060608a015261259a6003610424565b604b898960ff16815181106125bf57634e487b7160e01b600052603260045260246000fd5b602002602001015160800151901c16896000019060ff16908160ff1681525050612624888860ff168151811061260557634e487b7160e01b600052603260045260246000fd5b602002602001015183838c60400151613047909392919063ffffffff16565b505050505050505050565b60008260200151826000015160ff168151811061265c57634e487b7160e01b600052603260045260246000fd5b6020026020010151905060008260200151604001519050826020015160a001516040015160ff1660001415801561269a575080516040015160ff1615155b80156126bc575081600001516040015160ff1681600001516040015160ff1611155b1561275a5780516040908101518351909101516000916126db91614c6e565b90506127056001856020015160a00151604001516126f99190614c6e565b6040860151908361311b565b80826020015160000181815161271b9190614bdd565b60ff90811690915260208087015160a001510151161590506127585780846020015160a001516020018181516127519190614bdd565b60ff169052505b505b60208084015160a00151015160ff161580159061277e575080516020015160ff1615155b80156127a0575081600001516020015160ff1681600001516020015160ff1611155b156127e5576127e56001846020015160a00151602001516127c19190614c6e565b82516020908101518551909101516127d99190614c6e565b6040860151919061311b565b602083015160a001516080015160ff161580159061280a575080516080015160ff1615155b801561282c575081600001516080015160ff1681600001516080015160ff1611155b156128c157805160809081015183519091015160009161284b91614c6e565b602085015160a0015160800151604086015191925061286b919083613217565b8082602001516020018181516128819190614bdd565b60ff908116909152602086015160a0015160600151161590506128bf5780846020015160a001516060018181516128b89190614bdd565b60ff169052505b505b602083015160a001516060015160ff16158015906128e6575080516060015160ff1615155b8015612908575081600001516060015160ff1681600001516060015160ff1611155b1561294057602083015160a0015160609081015182518201518451909201516129409261293491614c6e565b60408601519190613217565b50505050565b60008360200151836000015160ff168151811061297357634e487b7160e01b600052603260045260246000fd5b60200260200101519050600083602001516040015190506129c76040518060400160405280600b81526020016a6d69782e6665617475726560a81b815250856000015160ff16612e3e90919063ffffffff16565b612ac260405180604001604052806013815260200172616e63686f722e636f6f7264696e6174652e6160681b81525082602001516020015160ff166040518060400160405280601381526020017230b731b437b91731b7b7b93234b730ba32973160691b81525085602001516000015160ff166040518060400160405280601581526020017472656365697665722e636f6f7264696e6174652e6160581b81525087602001516020015160ff16604051806040016040528060158152602001743932b1b2b4bb32b91731b7b7b93234b730ba32973160591b81525088602001516000015160ff1661330090979695949392919063ffffffff16565b60208082015151908301515160ff918216911611612ae1576000612af7565b602080820151519083015151612af79190614c6e565b60ff90811660a08601526020808301518101518482015190910151908216911611612b23576000612b3f565b806020015160200151826020015160200151612b3f9190614c6e565b60ff166080850181905260a0850151604086015180516020909101518851612b6b94909392909161330a565b5050505050565b60005b8251612b809061334e565b8015612b945750612b94826040015161334e565b15612bf9576000612ba8846000015161335e565b90506000612bb9846040015161335e565b90508015158015612bd85750602082901c600f16602082901c600f1610155b15612bf257612bf2612bea8383613387565b86519061338d565b5050612b75565b8251612c04906133b6565b82516000606082018190526080820181905260c0820181905260a090910152612c4a82604001516000606082018190526080820181905260c0820181905260a090910152565b505050565b612c58816133db565b50565b60005b8160600151518160ff161015612c4a57600082606001518260ff1681518110612c9757634e487b7160e01b600052603260045260246000fd5b6020026020010151905080602001516040015115612d245760a083015160208201518051612cc6908390614bdd565b60ff169052506080830151602080830151018051612ce5908390614bdd565b60ff9081169091526020860151805184935090918516908110612d1857634e487b7160e01b600052603260045260246000fd5b60200260200101819052505b5080612d2f81614d0c565b915050612c5e565b60606000612d46836002614c38565b6001600160401b03811115612d6b57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612d95576020820181803683370190505b5080519091505b8015612e36576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110612dd857634e487b7160e01b600052603260045260246000fd5b1a60f81b82612de8600184614c57565b81518110612e0657634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c9380612e2e81614cbd565b915050612d9c565b509392505050565b5050565b6006612e4e8280614c38565b612e589190614c02565b612e63906002614bc5565b6001600160401b03811115612e8857634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612eb1578160200160208202803683370190505b5082604001819052505050565b612ec86006610424565b821115612f055760405162461bcd60e51b815260206004820152600b60248201526a0564552533a534554573a360ac1b6044820152606401610973565b612f0f6006610424565b811115612f4c5760405162461bcd60e51b815260206004820152600b60248201526a564552533a534554573a3160a81b6044820152606401610973565b612f58600c603f613612565b6080909301805160459290921b603f9390931b9190931617179052565b6000816020015160ff16836020015160ff1611158015612fa35750816040015160ff16836040015160ff1611155b8061097c5750816060015160ff16836060015160ff161115801561097c57505060809081015191015160ff9182169116111590565b60008060008084612fea576000612fed565b60805b60ff16612ffb87600c614c38565b6130059190614bc5565b8760600151901c9050613018600c610424565b166130236006610424565b81169350600681901c92508315158061303b57508215155b91505093509350939050565b60ff81166020850152600061305b84613628565b905060005b828110156130f35760005b848110156130e05761307d8786613645565b50600061308b878385611c93565b905080156130c2576000806130a08984611d38565b92509250506130bb8a83602084901b60248a901b171761338d565b50506130cd565b6130cd88600061338d565b50806130d881614cf1565b91505061306b565b50806130eb81614cf1565b915050613060565b5060ff831685526000606086018190526080860181905260c0860181905260a0860152612b6b565b60005b835160ff168110156131f957835160ff165b8360ff1681111561318c578360ff1681101561314b5761318c565b61317a61315b60ff851683614bc5565b6040870151849061316d9085836136df565b6040890151929190613788565b8061318481614cbd565b915050613130565b50600061319a846001614bdd565b60ff1690505b6131aa8385614bdd565b60ff1681116131e6576131d4818361316d8760ff16868a604001516136df9092919063ffffffff16565b806131de81614cf1565b9150506131a0565b50806131f181614cf1565b91505061311e565b50808360000181815161320c9190614bdd565b60ff16905250505050565b60005b836020015160ff168110156132ed57602084015160ff165b8360ff16811115613280578360ff1681101561324d57613280565b61326e8261325e60ff861684614bc5565b604088015161316d9086866136df565b8061327881614cbd565b915050613232565b50600061328e846001614bdd565b60ff1690505b61329e8385614bdd565b60ff1681116132da576132c8828261316d858860ff168a604001516136df9092919063ffffffff16565b806132d281614cf1565b915050613294565b50806132e581614cf1565b91505061321a565b50808360200181815161320c9190614bdd565b5050505050505050565b60ff80851660608701819052908416608087015260c086015261332d8483614bdd565b60ff16855261333c8382614bdd565b60ff1660209095019490945250505050565b6000610209828360000151613645565b6000610209826060015160ff16836080015160ff1684604001516136df9092919063ffffffff16565b80610209565b612e3e826060015160ff16836080015160ff16838560400151613788909392919063ffffffff16565b6000806133c68360400151611a7c565b60ff9182168552166020909301929092525050565b606060008060005b846020015160800151518160ff161015612b6b576133ff614369565b8560200151608001518260ff168151811061342a57634e487b7160e01b600052603260045260246000fd5b60200260200101516040015115613552578361344581614d0c565b9450508560200151608001518260ff168151811061347357634e487b7160e01b600052603260045260246000fd5b60200260200101519050806020015186606001518360ff16815181106134a957634e487b7160e01b600052603260045260246000fd5b6020026020010151602001516000019060ff16908160ff1681525050806000015186606001518360ff16815181106134f157634e487b7160e01b600052603260045260246000fd5b6020026020010151602001516020019060ff16908160ff1681525050600186606001518360ff168151811061353657634e487b7160e01b600052603260045260246000fd5b60209081029190910181015101519015156040909101526135ff565b8560200151606001518260ff168151811061357d57634e487b7160e01b600052603260045260246000fd5b602002602001015160400151156135ff578261359881614d0c565b9350508451600014156135b5576135b286604001516137c1565b94505b6135f2868760200151606001518460ff16815181106135e457634e487b7160e01b600052603260045260246000fd5b602002602001015187613a22565b90506135ff868284613b8d565b508061360a81614d0c565b9150506133e3565b60008161361e84610424565b901b199392505050565b60006136346003610424565b604b8360800151901c169050919050565b60008260a00151156136ce576060830151613661906001614bdd565b60ff168260ff16116136be57608083015161367d906001614bdd565b60ff16836020015160ff16141561369657506000610209565b60c083015160ff166060840152608083018051906136b382614d0c565b60ff169052506136d6565b606083018051906136b382614d0c565b600160a08401525b50600192915050565b6000806136eb85611a7c565b50905060006136fa8285614c38565b6137049086614bc5565b604087015151909150613718600683614c02565b106137285760009250505061097c565b613733600682614d2c565b61373e906028614c38565b604087015161374e600684614c02565b8151811061376c57634e487b7160e01b600052603260045260246000fd5b6020026020010151901c64ffffffffff16925050509392505050565b600061379385611a7c565b50905060006137a28285614c38565b6137ac9086614bc5565b90506137b9868285613e11565b505050505050565b606060008060006137d185613ed6565b60408051600580825260c082019092529396509194509250816020015b6137f6614369565b8152602001906001900390816137ee579050509350808460008151811061382d57634e487b7160e01b600052603260045260246000fd5b60200260200101819052506040518060600160405280826000015160ff1681526020018483602001516138609190614c6e565b60ff168152602001600115158152508460018151811061389057634e487b7160e01b600052603260045260246000fd5b6020908102919091010152826138a7600282614d40565b60ff16156138bd57806138b981614d0c565b9150505b6040805160608101909152825160ff168152602081016138de600284614c16565b84602001516138ed9190614c6e565b60ff168152602001600115158152508560028151811061391d57634e487b7160e01b600052603260045260246000fd5b602090810291909101015282613934600282614d40565b60ff161561394a578061394681614d0c565b9150505b6040805160608101909152835160ff1681526020810161396b600284614c16565b856020015161397a9190614bdd565b60ff16815260200160011515815250866003815181106139aa57634e487b7160e01b600052603260045260246000fd5b60200260200101819052506040518060600160405280846000015160ff1681526020018585602001516139dd9190614bdd565b60ff1681526020016001151581525086600481518110613a0d57634e487b7160e01b600052603260045260246000fd5b60200260200101819052505050505050919050565b613a2a614369565b81836000015160ff1681518110613a5157634e487b7160e01b600052603260045260246000fd5b60209081029190910101515160ff908116825283518351849291909116908110613a8b57634e487b7160e01b600052603260045260246000fd5b60209081029190910181015181015160ff908116838301526001604084015284820151161015613ad65782602001518160200151613ac99190614c6e565b60ff166020820152613aff565b60208360200151613ae79190614c6e565b8160200151613af69190614bdd565b60ff1660208201525b805160208201516040808701510151613b2092909160ff9182169116614298565b61097c57806020015160ff1682600081518110613b4d57634e487b7160e01b600052603260045260246000fd5b60200260200101516020015160ff161115613b7d5760208101805190613b7282614d0c565b60ff16905250613aff565b60208101805190613b7282614cd4565b613b95614389565b604084015151613ba790600190614c6e565b60ff16836000015160ff16108015613bf45750613bf481602001516001613bce9190614bdd565b8451613bda9190614bdd565b602085015160408088015101519160ff9081169116614298565b15613c145760208101805190613c0982614d0c565b60ff16905250613b95565b825160ff1615801590613c4057506040810151613c32906001614bdd565b60ff16836000015160ff1610155b8015613c675750613c6781604001516001613c5b9190614bdd565b8451613bda9190614c6e565b15613c875760408101805190613c7c82614d0c565b60ff16905250613c14565b602083015160ff1615801590613cb657506060810151613ca8906001614bdd565b60ff16836020015160ff1610155b8015613cf8575082516060820151613cf89160ff1690613cd7906001614bdd565b8560200151613ce69190614c6e565b6040808801510151919060ff16614298565b15613d185760608101805190613d0d82614d0c565b60ff16905250613c87565b6001846040015160200151613d2d9190614c6e565b60ff16836020015160ff16108015613d69575082516080820151613d699160ff1690613d5a906001614bdd565b8560200151613ce69190614bdd565b15613d895760808101805190613d7e82614d0c565b60ff16905250613d18565b83606001518260ff1681518110613db057634e487b7160e01b600052603260045260246000fd5b602002602001015160200151604001516129405760405180604001604052808281526020018481525084606001518360ff1681518110613e0057634e487b7160e01b600052603260045260246000fd5b602002602001018190525050505050565b613e1c600683614c02565b8360400151511115612c4a576000613e35600684614d2c565b613e40906028614c38565b9050613e4d602882613612565b6040850151613e5d600686614c02565b81518110613e7b57634e487b7160e01b600052603260045260246000fd5b6020908102919091010180519091169052604084015182821b90613ea0600686614c02565b81518110613ebe57634e487b7160e01b600052603260045260246000fd5b60200260200101818151179150818152505050505050565b600080613ee1614369565b8351613eef90600290614c16565b60ff1681526020840151613f0590600290614c16565b60ff1660208201526001604082018190529250829150600080808480825b806141455782158015613f34575083155b9250821561400a57613f78613f4a836001614bdd565b8851613f569190614c6e565b60ff168a8960200151613f699190614c6e565b60408d0151919060ff16614298565b8015613f995750613f99613f8d836001614bdd565b8851613f569190614bdd565b8015613fcd5750613fcd613fae836001614bdd565b8851613fba9190614c6e565b60ff16898960200151613f699190614bdd565b8015613fee5750613fee613fe2836001614bdd565b8851613fba9190614bdd565b156140055781613ffd81614d0c565b92505061400a565b600193505b8561408e5760008988602001516140219190614c6e565b60ff1611801561405a5750865161405a9061403d908490614c6e565b60ff1661404b8b6001614bdd565b8960200151613f699190614c6e565b8015614072575086516140729061403d908490614bdd565b15614089578861408181614d0c565b99505061408e565b600195505b846141245760018a602001516140a49190614c6e565b60ff168888602001516140b79190614bdd565b60ff161080156140f0575086516140f0906140d3908490614c6e565b60ff166140e18a6001614bdd565b8960200151613f699190614bdd565b801561410857508651614108906140d3908490614bdd565b1561411f578761411781614d0c565b985050614124565b600194505b84801561412e5750855b80156141375750835b15614140575060015b613f23565b8760ff168960ff161461428b57600061415e898b614bdd565b614169906001614bdd565b9050600060026141798184614d40565b60ff16156141915761418c836001614bdd565b614193565b825b61419d9190614c16565b905060008b60018b60200151846141b49190614bdd565b6141be9190614c6e565b6141c89190614c6e565b9050896020015160ff168160ff1611156142305760008a60200151826141ee9190614c6e565b90506141fa818e614bdd565b9c508060ff168c60ff161161421b576142138c82614c6e565b9b508b614229565b614225818d614c6e565b9b508b5b5050614280565b6000818b602001516142429190614c6e565b90508060ff168d60ff16116142635761425b8d82614c6e565b9c508c614271565b61426d818e614c6e565b9c508c5b5061427c818d614bdd565b9b50505b60ff1660208a015250505b5050505050509193909250565b6000806142a68585856136df565b60ff16151595945050505050565b6040518060a0016040528060608152602001606081526020016060815260200160008152602001600081525090565b6040805160e081018252600080825260208201529081016143026142b4565b8152600060208201819052604082018190526060820181905260809091015290565b60405180604001604052806143376142e3565b8152602001606081525090565b6040518060400160405280614357614389565b8152602001614364614369565b905290565b604080516060810182526000808252602082018190529181019190915290565b6040805160a08101825260008082526020820181905291810182905260608101829052608081019190915290565b6040518060c00160405280600060ff1681526020016143d46143fb565b81526020016143e16142e3565b815260606020820181905260006040830181905291015290565b6040805160e0810182526000808252602082015290810161441a614344565b81526020016060815260200160608152602001614337614389565b80516001600160a01b038116811461444c57600080fd5b919050565b600082601f830112614461578081fd5b8135602061447661447183614ba2565b614b72565b80838252828201915082860187848660051b8901011115614495578586fd5b855b858110156144b357813584529284019290840190600101614497565b5090979650505050505050565b600082601f8301126144d0578081fd5b81356001600160401b038111156144e9576144e9614d8e565b6144fc601f8201601f1916602001614b72565b818152846020838601011115614510578283fd5b816020850160208301379081016020019190915292915050565b6000806000806080858703121561453f578384fd5b61454885614435565b9350602085015192506040850151915061456460608601614435565b905092959194509250565b600080600060608486031215614583578283fd5b83356001600160401b0380821115614599578485fd5b818601915086601f8301126145ac578485fd5b813560206145bc61447183614ba2565b8083825282820191508286018b848660051b89010111156145db57898afd5b895b85811015614614578135878111156145f3578b8cfd5b6146018e87838c0101614451565b85525092840192908401906001016145dd565b5090985050508701359250508082111561462c578384fd5b614638878388016144c0565b9350604086013591508082111561464d578283fd5b5061465a868287016144c0565b9150509250925092565b600080600060608486031215614678578283fd5b83356001600160401b038082111561468e578485fd5b61469a87838801614451565b9450602086013591508082111561462c578384fd5b6000602082840312156146c0578081fd5b81356001600160e01b03198116811461097c578182fd5b6000602082840312156146e8578081fd5b81356001600160401b038111156146fd578182fd5b614709848285016144c0565b949350505050565b600080600060608486031215614725578283fd5b835192506020840151915061473c60408501614435565b90509250925092565b60008151614757818560208601614c91565b9290920192915050565b60008351614773818460208801614c91565b835190830190614787818360208801614c91565b01949350505050565b600084516147a2818460208901614c91565b8451908301906147b6818360208901614c91565b84519101906147c9818360208801614c91565b0195945050505050565b683d913730b6b2911d1160b91b815265139d59d9d19560d21b60098201526c1116113a37b5b2b724b2111d1160991b600f820152855160009061481d81601c850160208b01614c91565b701116113232b9b1b934b83a34b7b7111d1160791b601c918401918201526e151a1948139d59d9da595cdd081195608a1b602d8201526d11161134ba32b6a230ba30911d1160911b603c820152865161487d81604a840160208b01614c91565b6a11161137bbb732b9111d1160a91b604a929091019182015285516148a9816055840160208a01614c91565b6148ee6148e06148da6148d46055858701016c1116101134b6b0b3b2911d101160991b8152600d0190565b89614745565b87614745565b61227d60f01b815260020190565b9998505050505050505050565b6d093c726563742066696c6c3d272360901b8152855160009061492581600e850160208b01614c91565b642720783d2760d81b600e91840191820152865161494a816013840160208b01614c91565b642720793d2760d81b601392909101918201528551614970816018840160208a01614c91565b6927206865696768743d2760b01b60189290910191820152845161499b816022840160208901614c91565b68272077696474683d2760b81b6022929091019182015283516149c581602b840160208801614c91565b6148ee602b828401016313979f0560e11b815260040190565b7101e39bb33903b34b2bba137bc1e93981018160751b815260008551614a0b816012850160208a01614c91565b600160fd1b6012918401918201528551614a2c816013840160208a01614c91565b6920272077696474683d2760b01b601392909101918201528451614a5781601d840160208901614c91565b6927206865696768743d2760b01b601d92909101918201528351614a82816027840160208801614c91565b7f2720786d6c6e733d27687474703a2f2f7777772e77332e6f72672f323030302f602792909101918201527f7376672720786d6c6e733a786c696e6b3d27687474703a2f2f7777772e77332e60478201527137b93397989c9c9c97bc3634b735939f2e3760711b60678201526079019695505050505050565b6020808252825182820181905260009190848201906040850190845b81811015614b3357835183529284019291840191600101614b17565b50909695505050505050565b6020815260008251806020840152614b5e816040850160208701614c91565b601f01601f19169190910160400192915050565b604051601f8201601f191681016001600160401b0381118282101715614b9a57614b9a614d8e565b604052919050565b60006001600160401b03821115614bbb57614bbb614d8e565b5060051b60200190565b60008219821115614bd857614bd8614d62565b500190565b600060ff821660ff84168060ff03821115614bfa57614bfa614d62565b019392505050565b600082614c1157614c11614d78565b500490565b600060ff831680614c2957614c29614d78565b8060ff84160491505092915050565b6000816000190483118215151615614c5257614c52614d62565b500290565b600082821015614c6957614c69614d62565b500390565b600060ff821660ff841680821015614c8857614c88614d62565b90039392505050565b60005b83811015614cac578181015183820152602001614c94565b838111156129405750506000910152565b600081614ccc57614ccc614d62565b506000190190565b600060ff821680614ce757614ce7614d62565b6000190192915050565b6000600019821415614d0557614d05614d62565b5060010190565b600060ff821660ff811415614d2357614d23614d62565b60010192915050565b600082614d3b57614d3b614d78565b500690565b600060ff831680614d5357614d53614d78565b8060ff84160691505092915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fdfe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220011f01aebe2bbd379c8a93e78235ee777449061d828051fbb9bea25c50838c2864736f6c63430008040033",
  "devdoc": {
    "author": "Nugg Labs - @danny7even & @dub6ix",
    "details": "hold my margarita",
    "kind": "dev",
    "methods": {},
    "title": "DotNugg V1 - onchain encoder/decoder for dotnugg files",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "yoU CAN'T HaVe ImAgES oN THe BlOCkcHAIn",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}