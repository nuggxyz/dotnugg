{
  "address": "0xCEab72cb5BC8Fc1149AB63FA9986311f18E26573",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "artifactId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "resolver",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "comp",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256[]",
              "name": "file",
              "type": "uint256[]"
            },
            {
              "components": [
                {
                  "internalType": "uint8[]",
                  "name": "ids",
                  "type": "uint8[]"
                },
                {
                  "internalType": "uint8[]",
                  "name": "xovers",
                  "type": "uint8[]"
                },
                {
                  "internalType": "uint8[]",
                  "name": "yovers",
                  "type": "uint8[]"
                },
                {
                  "internalType": "uint256",
                  "name": "version",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "implementer",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "artifactId",
                  "type": "uint256"
                },
                {
                  "internalType": "string[]",
                  "name": "labels",
                  "type": "string[]"
                },
                {
                  "internalType": "string[]",
                  "name": "styles",
                  "type": "string[]"
                },
                {
                  "internalType": "string",
                  "name": "background",
                  "type": "string"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "internalType": "struct IDotnuggV1Metadata.Memory",
              "name": "metadata",
              "type": "tuple"
            }
          ],
          "internalType": "struct IDotnuggV1File.Compressed",
          "name": "res",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "artifactId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "resolver",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "desc",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "base64",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "dat",
      "outputs": [
        {
          "internalType": "string",
          "name": "res",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "artifactId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "resolver",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "rekt",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "back",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "stats",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "base64",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "img",
      "outputs": [
        {
          "internalType": "string",
          "name": "res",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lib",
      "outputs": [
        {
          "internalType": "contract DotnuggV1Lib",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "artifactId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "resolver",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "proc",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256[]",
              "name": "file",
              "type": "uint256[]"
            },
            {
              "components": [
                {
                  "internalType": "uint8[]",
                  "name": "ids",
                  "type": "uint8[]"
                },
                {
                  "internalType": "uint8[]",
                  "name": "xovers",
                  "type": "uint8[]"
                },
                {
                  "internalType": "uint8[]",
                  "name": "yovers",
                  "type": "uint8[]"
                },
                {
                  "internalType": "uint256",
                  "name": "version",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "implementer",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "artifactId",
                  "type": "uint256"
                },
                {
                  "internalType": "string[]",
                  "name": "labels",
                  "type": "string[]"
                },
                {
                  "internalType": "string[]",
                  "name": "styles",
                  "type": "string[]"
                },
                {
                  "internalType": "string",
                  "name": "background",
                  "type": "string"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "internalType": "struct IDotnuggV1Metadata.Memory",
              "name": "metadata",
              "type": "tuple"
            }
          ],
          "internalType": "struct IDotnuggV1File.Processed",
          "name": "res",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementer",
          "type": "address"
        }
      ],
      "name": "proxyOf",
      "outputs": [
        {
          "internalType": "contract IDotnuggV1StorageProxy",
          "name": "proxy",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "artifactId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "resolver",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "raw",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256[][]",
              "name": "file",
              "type": "uint256[][]"
            },
            {
              "components": [
                {
                  "internalType": "uint8[]",
                  "name": "ids",
                  "type": "uint8[]"
                },
                {
                  "internalType": "uint8[]",
                  "name": "xovers",
                  "type": "uint8[]"
                },
                {
                  "internalType": "uint8[]",
                  "name": "yovers",
                  "type": "uint8[]"
                },
                {
                  "internalType": "uint256",
                  "name": "version",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "implementer",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "artifactId",
                  "type": "uint256"
                },
                {
                  "internalType": "string[]",
                  "name": "labels",
                  "type": "string[]"
                },
                {
                  "internalType": "string[]",
                  "name": "styles",
                  "type": "string[]"
                },
                {
                  "internalType": "string",
                  "name": "background",
                  "type": "string"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "internalType": "struct IDotnuggV1Metadata.Memory",
              "name": "metadata",
              "type": "tuple"
            }
          ],
          "internalType": "struct IDotnuggV1File.Raw",
          "name": "res",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "register",
      "outputs": [
        {
          "internalType": "contract IDotnuggV1StorageProxy",
          "name": "proxy",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "template",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x41cbff231ddd44d5390f8aa2a0fff80eb81d67a92905fbec5f154a20344b04f4",
  "receipt": {
    "to": null,
    "from": "0x27b6E7032F3800389D963DDba80CEB6f7815a4FC",
    "contractAddress": "0xCEab72cb5BC8Fc1149AB63FA9986311f18E26573",
    "transactionIndex": 1,
    "gasUsed": "7987042",
    "logsBloom": "0x
    "blockHash": "0xbcff3dc50223d1f00107a74ca273577b34081bde1259e2a8c18cfd176a035ac9",
    "transactionHash": "0x41cbff231ddd44d5390f8aa2a0fff80eb81d67a92905fbec5f154a20344b04f4",
    "logs": [],
    "blockNumber": 6178663,
    "cumulativeGasUsed": "8040664",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "fa8cabace77d7b6a2b328d8f2d5a29f7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"artifactId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"comp\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"file\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint8[]\",\"name\":\"ids\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"xovers\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"yovers\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"implementer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"artifactId\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"labels\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"styles\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"background\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IDotnuggV1Metadata.Memory\",\"name\":\"metadata\",\"type\":\"tuple\"}],\"internalType\":\"struct IDotnuggV1File.Compressed\",\"name\":\"res\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"artifactId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"desc\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"base64\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"dat\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"res\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"artifactId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"rekt\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"back\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"stats\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"base64\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"img\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"res\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lib\",\"outputs\":[{\"internalType\":\"contract DotnuggV1Lib\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"artifactId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"proc\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"file\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint8[]\",\"name\":\"ids\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"xovers\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"yovers\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"implementer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"artifactId\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"labels\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"styles\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"background\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IDotnuggV1Metadata.Memory\",\"name\":\"metadata\",\"type\":\"tuple\"}],\"internalType\":\"struct IDotnuggV1File.Processed\",\"name\":\"res\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementer\",\"type\":\"address\"}],\"name\":\"proxyOf\",\"outputs\":[{\"internalType\":\"contract IDotnuggV1StorageProxy\",\"name\":\"proxy\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"artifactId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"raw\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256[][]\",\"name\":\"file\",\"type\":\"uint256[][]\"},{\"components\":[{\"internalType\":\"uint8[]\",\"name\":\"ids\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"xovers\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"yovers\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"implementer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"artifactId\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"labels\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"styles\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"background\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IDotnuggV1Metadata.Memory\",\"name\":\"metadata\",\"type\":\"tuple\"}],\"internalType\":\"struct IDotnuggV1File.Raw\",\"name\":\"res\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"register\",\"outputs\":[{\"internalType\":\"contract IDotnuggV1StorageProxy\",\"name\":\"proxy\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"template\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"nugg.xyz - danny7even & dub6ix\",\"details\":\"hold my margarita\",\"kind\":\"dev\",\"methods\":{},\"title\":\"dotnugg V1 - onchain encoder/decoder protocol for dotnugg files\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"yoU CAN'T HaVe ImAgES oN THe BlOCkcHAIn\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/DotnuggV1.sol\":\"DotnuggV1\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"src/DotnuggV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {IDotnuggV1} from './interfaces/IDotnuggV1.sol';\\nimport {IDotnuggV1Metadata as Metadata} from './interfaces/IDotnuggV1Metadata.sol';\\nimport {IDotnuggV1StorageProxy} from './interfaces/IDotnuggV1StorageProxy.sol';\\n\\nimport {IDotnuggV1File as File} from './interfaces/IDotnuggV1File.sol';\\nimport {IDotnuggV1Resolver as Resolver} from './interfaces/IDotnuggV1Resolver.sol';\\nimport {IDotnuggV1Implementer as Implementer} from './interfaces/IDotnuggV1Implementer.sol';\\n\\nimport {DotnuggV1StorageProxy} from './core/DotnuggV1StorageProxy.sol';\\nimport {DotnuggV1Lib} from './core/DotnuggV1Lib.sol';\\nimport {MinimalProxy} from './libraries/MinimalProxy.sol';\\n\\n/// @title dotnugg V1 - onchain encoder/decoder protocol for dotnugg files\\n/// @author nugg.xyz - danny7even & dub6ix\\n/// @notice yoU CAN'T HaVe ImAgES oN THe BlOCkcHAIn\\n/// @dev hold my margarita\\ncontract DotnuggV1 is IDotnuggV1 {\\n    DotnuggV1Lib public lib;\\n\\n    address public template;\\n\\n    constructor() {\\n        lib = new DotnuggV1Lib();\\n        template = address(new DotnuggV1StorageProxy());\\n    }\\n\\n    function register() external override returns (IDotnuggV1StorageProxy proxy) {\\n        proxy = IDotnuggV1StorageProxy(MinimalProxy.deploy(template, keccak256(abi.encodePacked(msg.sender))));\\n        proxy.init(msg.sender);\\n    }\\n\\n    function proxyOf(address implementer) public view override returns (IDotnuggV1StorageProxy proxy) {\\n        proxy = IDotnuggV1StorageProxy(MinimalProxy.compute(template, keccak256(abi.encodePacked(implementer))));\\n        require(address(proxy).code.length != 0, 'P:0');\\n    }\\n\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                     core\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    function raw(\\n        address implementer,\\n        uint256 artifactId,\\n        address resolver,\\n        bytes memory data\\n    ) public view override returns (File.Raw memory res) {\\n        if (0 == 9) return res;\\n        res.metadata = Implementer(implementer).dotnuggV1ImplementerCallback(artifactId);\\n\\n        res.metadata.artifactId = artifactId;\\n        res.metadata.implementer = implementer;\\n\\n        res.file = proxyOf(implementer).getBatch(res.metadata.ids);\\n\\n        if (resolver != address(0)) {\\n            try Resolver(resolver).dotnuggV1MetadataCallback(implementer, artifactId, res.metadata, data) returns (Metadata.Memory memory resp) {\\n                res.metadata = resp;\\n            } catch (bytes memory) {}\\n        }\\n    }\\n\\n    function proc(\\n        address implementer,\\n        uint256 artifactId,\\n        address resolver,\\n        bytes memory data\\n    ) public view override returns (File.Processed memory res) {\\n        File.Raw memory _raw = raw(implementer, artifactId, resolver, data);\\n\\n        res.file = lib.process(_raw.file, _raw.metadata, 63);\\n\\n        res.metadata = _raw.metadata;\\n    }\\n\\n    function comp(\\n        address implementer,\\n        uint256 artifactId,\\n        address resolver,\\n        bytes memory data\\n    ) public view override returns (File.Compressed memory res) {\\n        File.Processed memory _proc = proc(implementer, artifactId, resolver, data);\\n\\n        res.file = lib.compress(_proc.file, 0);\\n\\n        res.metadata = _proc.metadata;\\n    }\\n\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                complex proccessors\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    function dat(\\n        address implementer,\\n        uint256 artifactId,\\n        address resolver,\\n        string memory name,\\n        string memory desc,\\n        bool base64,\\n        bytes memory data\\n    ) external view override returns (string memory res) {\\n        File.Processed memory _proc = proc(implementer, artifactId, resolver, data);\\n\\n        if (resolver != address(0)) {\\n            try Resolver(resolver).dotnuggV1JsonCallback(_proc, data) returns (string memory r) {\\n                return r;\\n            } catch (bytes memory) {}\\n        }\\n\\n        res = string(\\n            lib.buildJson(\\n                _proc.metadata,\\n                name,\\n                desc, //\\n                string(lib.buildSvg(_proc.file, _proc.metadata, false, true, false, true)),\\n                base64\\n            )\\n        );\\n    }\\n\\n    function img(\\n        address implementer,\\n        uint256 artifactId,\\n        address resolver,\\n        bool rekt,\\n        bool back,\\n        bool stats,\\n        bool base64,\\n        bytes memory data\\n    ) external view override returns (string memory res) {\\n        File.Processed memory _proc = proc(implementer, artifactId, resolver, data);\\n\\n        if (resolver != address(0)) {\\n            try Resolver(resolver).dotnuggV1SvgCallback(_proc, data) returns (string memory d) {\\n                return d;\\n            } catch (bytes memory) {}\\n        }\\n\\n        res = string(lib.buildSvg(_proc.file, _proc.metadata, rekt, back, stats, base64));\\n    }\\n\\n    // /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n    //                             basic proccessors\\n    //    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    // function plain(\\n    //     address implementer,\\n    //     uint256 artifactId,\\n    //     address resolver,\\n    //     bytes memory data\\n    // ) external view override returns (bytes memory res) {\\n    //     File.Processed memory _proc = proc(implementer, artifactId, resolver, data);\\n\\n    //     if (resolver != address(0)) {\\n    //         try Resolver(resolver).dotnuggV1BytesCallback(_proc, data) returns (bytes memory d) {\\n    //             return d;\\n    //         } catch (bytes memory) {}\\n    //     }\\n\\n    //     res = lib.buildSvg(_proc.file, _proc.metadata, false, false, false, true);\\n    // }\\n\\n    // function str(\\n    //     address implementer,\\n    //     uint256 artifactId,\\n    //     address resolver,\\n    //     bytes memory data\\n    // ) external view override returns (string memory res) {\\n    //     File.Processed memory _proc = proc(implementer, artifactId, resolver, data);\\n\\n    //     if (resolver != address(0)) {\\n    //         try Resolver(resolver).dotnuggV1StringCallback(_proc, data) returns (string memory d) {\\n    //             return d;\\n    //         } catch (bytes memory) {}\\n    //     }\\n\\n    //     res = string(lib.buildSvg(_proc.file, _proc.metadata, false, false, false, false));\\n    // }\\n}\\n\",\"keccak256\":\"0x8b769b4e637884addbd2969a5d0beb5883694b5da1640be0b74b5b57b9b717fd\",\"license\":\"MIT\"},\"src/_test/utils/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n    function _sendLogPayload(bytes memory payload) private view {\\n        uint256 payloadLength = payload.length;\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        assembly {\\n            let payloadStart := add(payload, 32)\\n            let r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n        }\\n    }\\n\\n    function log() internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log()'));\\n    }\\n\\n    function logInt(int256 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(int)', p0));\\n    }\\n\\n    function logUint(uint256 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint)', p0));\\n    }\\n\\n    function logString(string memory p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string)', p0));\\n    }\\n\\n    function logBool(bool p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool)', p0));\\n    }\\n\\n    function logAddress(address p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address)', p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes)', p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes1)', p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes2)', p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes3)', p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes4)', p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes5)', p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes6)', p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes7)', p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes8)', p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes9)', p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes10)', p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes11)', p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes12)', p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes13)', p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes14)', p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes15)', p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes16)', p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes17)', p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes18)', p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes19)', p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes20)', p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes21)', p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes22)', p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes23)', p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes24)', p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes25)', p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes26)', p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes27)', p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes28)', p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes29)', p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes30)', p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes31)', p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bytes32)', p0));\\n    }\\n\\n    function log(uint256 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint)', p0));\\n    }\\n\\n    function log(string memory p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string)', p0));\\n    }\\n\\n    function log(bool p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool)', p0));\\n    }\\n\\n    function log(address p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address)', p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint)', p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string)', p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool)', p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address)', p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint)', p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string)', p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool)', p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address)', p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint)', p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string)', p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool)', p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address)', p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint)', p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string)', p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool)', p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address)', p0, p1));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,uint)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,string)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,bool)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,address)', p0, p1, p2));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,uint,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,string,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,bool,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(uint,address,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,uint,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,string,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,bool,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(string,address,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,uint,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,string,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,bool,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(bool,address,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,uint,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,string,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,bool,address,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,uint,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,uint,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,uint,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,uint,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,string,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,string,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,string,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,string,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,bool,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,bool,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,bool,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,bool,address)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,address,uint)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,address,string)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,address,bool)', p0, p1, p2, p3));\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(abi.encodeWithSignature('log(address,address,address,address)', p0, p1, p2, p3));\\n    }\\n}\\n\",\"keccak256\":\"0x37bd64b8511ea43408b826a23d5b6c0777e251e5a38fcfa27074bc56344874f9\",\"license\":\"MIT\"},\"src/core/DotnuggV1JsonLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {StringCastLib} from '../libraries/StringCastLib.sol';\\nimport {ShiftLib} from '../libraries/ShiftLib.sol';\\nimport {Pixel} from '../types/Pixel.sol';\\nimport {Version} from '../types/Version.sol';\\nimport {Base64} from '../libraries/Base64.sol';\\n\\nimport {IDotnuggV1Metadata} from '../interfaces/IDotnuggV1Metadata.sol';\\n\\ncontract DotnuggV1JsonLib {\\n    using StringCastLib for uint256;\\n    using StringCastLib for uint8;\\n\\n    using StringCastLib for address;\\n\\n    function jsonBase64(bytes memory input) public pure returns (bytes memory res) {\\n        res = abi.encodePacked(Base64.PREFIX_JSON, Base64._encode(input));\\n    }\\n\\n    function jsonUtf8(bytes memory input) public pure returns (bytes memory res) {\\n        res = abi.encodePacked('data:application/json;charset=UTF-8,', input);\\n    }\\n\\n    function buildJson(\\n        IDotnuggV1Metadata.Memory memory data,\\n        string memory name,\\n        string memory desc,\\n        string memory img,\\n        bool base64\\n    ) external pure returns (bytes memory res) {\\n        for (uint8 i = 0; i < 8; i++) {\\n            res = abi.encodePacked(\\n                res,\\n                kv(\\n                    data.labels[i], //\\n                    data.ids[i] == 0 ? 'null' : ((uint256(i) << 8) | data.ids[i]).toAsciiString(),\\n                    i != 7\\n                )\\n            );\\n        }\\n\\n        res = abi.encodePacked(\\n            '{', //\\n            kv('name', name, true),\\n            kv('description', desc, true),\\n            kv('image', img, true),\\n            obj('properties', res, false),\\n            '}'\\n        );\\n\\n        if (base64) res = jsonBase64(res);\\n        else res = jsonUtf8(res);\\n    }\\n\\n    function obj(\\n        string memory key,\\n        bytes memory value,\\n        bool comma\\n    ) internal pure returns (bytes memory res) {\\n        res = abi.encodePacked('\\\"', key, '\\\":{', value, '}', comma ? ',' : '');\\n    }\\n\\n    function kv(\\n        string memory key,\\n        string memory value,\\n        bool comma\\n    ) internal pure returns (bytes memory res) {\\n        res = abi.encodePacked('\\\"', key, '\\\":\\\"', value, '\\\"', comma ? ',' : '');\\n    }\\n}\\n\",\"keccak256\":\"0xe6bf51e8e843bc47148cbc85ee4162d742606d12614cddb66d36be377df6e8dc\",\"license\":\"MIT\"},\"src/core/DotnuggV1Lib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {IDotnuggV1Metadata} from '../interfaces/IDotnuggV1Metadata.sol';\\n\\nimport {BitReader} from '../libraries/BitReader.sol';\\nimport {Base64} from '../libraries/Base64.sol';\\n\\nimport {Calculator} from '../logic/Calculator.sol';\\nimport {Matrix} from '../logic/Matrix.sol';\\nimport {DotnuggV1SvgLib} from './DotnuggV1SvgLib.sol';\\nimport {DotnuggV1JsonLib} from './DotnuggV1JsonLib.sol';\\n\\nimport {ShiftLib} from '../libraries/ShiftLib.sol';\\nimport {Base64} from '../libraries/Base64.sol';\\n\\nimport {Version} from '../types/Version.sol';\\nimport {Types} from '../types/Types.sol';\\nimport {DotnuggV1StorageProxy} from './DotnuggV1StorageProxy.sol';\\nimport {StringCastLib} from '../libraries/StringCastLib.sol';\\n\\ncontract DotnuggV1Lib is DotnuggV1SvgLib, DotnuggV1JsonLib {\\n    using BitReader for BitReader.Memory;\\n\\n    function process(\\n        uint256[][] memory files,\\n        IDotnuggV1Metadata.Memory memory data,\\n        uint8 width\\n    ) public view returns (uint256[] memory resp) {\\n        require(data.version == 1, 'V1s');\\n\\n        // require(width <= 64 && width > 4, 'V1:SIZE');\\n\\n        // if (width % 2 == 0) width--;\\n\\n        Version.Memory[][] memory versions = parse(files, data.xovers, data.yovers);\\n\\n        Types.Matrix memory old = Calculator.combine(8, width, versions);\\n\\n        resp = old.version.bigmatrix;\\n    }\\n\\n    function parse(\\n        uint256[][] memory data,\\n        uint8[] memory xovers,\\n        uint8[] memory yovers\\n    ) public view returns (Version.Memory[][] memory m) {\\n        m = new Version.Memory[][](data.length);\\n\\n        for (uint256 j = 0; j < data.length; j++) {\\n            (bool empty, BitReader.Memory memory reader) = BitReader.init(data[j]);\\n\\n            if (empty) continue;\\n\\n            // indicates dotnuggV1 encoded file\\n            require(reader.select(32) == 0x420690_01, 'DEC:PI:0');\\n\\n            uint256 feature = reader.select(3);\\n\\n            uint256 id = reader.select(8);\\n\\n            uint256[] memory pallet = Version.parsePallet(reader, id, feature);\\n\\n            uint256 versionLength = reader.select(2) + 1;\\n\\n            m[j] = new Version.Memory[](versionLength);\\n\\n            for (uint256 i = 0; i < versionLength; i++) {\\n                m[j][i].data = Version.parseData(reader, feature, xovers, yovers);\\n\\n                m[j][i].receivers = Version.parseReceivers(reader);\\n\\n                (uint256 width, uint256 height) = Version.getWidth(m[j][i]);\\n\\n                m[j][i].minimatrix = Version.parseMiniMatrix(reader, width, height);\\n\\n                m[j][i].pallet = pallet;\\n            }\\n        }\\n    }\\n\\n    function decompress(uint256[] memory input) public pure returns (uint256[] memory res) {\\n        res = new uint256[]((input[input.length - 1] >> 240));\\n\\n        uint256 counter = 0;\\n\\n        for (uint256 i = 0; i < input.length; i++) {\\n            uint256 numzeros = input[i] & 0xf;\\n\\n            if (numzeros == 0xf) {\\n                numzeros = input[i++] >> 4;\\n            }\\n\\n            for (uint256 j = 0; j < numzeros; j++) {\\n                // skips a row, keeping it at zero\\n                counter++;\\n            }\\n\\n            res[counter++] = input[i] >> 4;\\n        }\\n    }\\n\\n    function compress(uint256[] memory input, uint256 data) public pure returns (uint256[] memory res) {\\n        uint256 counter;\\n        uint256 rescounter;\\n        uint256 zerocount;\\n\\n        do {\\n            if (input[counter] == 0) {\\n                zerocount++;\\n                continue;\\n            }\\n\\n            if (zerocount > 14) {\\n                input[rescounter++] = (zerocount << 4) | 0xf;\\n                zerocount = 0;\\n            }\\n\\n            input[rescounter++] = (input[counter] << 4) | zerocount;\\n\\n            zerocount = 0;\\n        } while (++counter < input.length);\\n\\n        if (zerocount > 14) {\\n            input[rescounter++] = (zerocount << 4) | 0xf;\\n            zerocount = 0;\\n        }\\n\\n        input[rescounter++] = (data << 4) | zerocount | ((input.length + 1) << 240);\\n\\n        Version.setArrayLength(input, rescounter);\\n\\n        return input;\\n    }\\n\\n    function base64(bytes memory input) public pure returns (bytes memory res) {\\n        res = Base64._encode(input);\\n    }\\n}\\n\",\"keccak256\":\"0x1ba4c45c69514d7802c9e11b74661004e23bf12a9d5ceb19c9ff173f5ec43563\",\"license\":\"MIT\"},\"src/core/DotnuggV1StorageProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\nimport {IDotnuggV1StorageProxy} from '../interfaces/IDotnuggV1StorageProxy.sol';\\nimport {IDotnuggV1Implementer} from '../interfaces/IDotnuggV1Implementer.sol';\\n\\nimport {SSTORE2} from '../libraries/SSTORE2.sol';\\nimport {SafeCastLib} from '../libraries/SafeCastLib.sol';\\n\\nimport '../_test/utils/console.sol';\\n\\ncontract DotnuggV1StorageProxy is IDotnuggV1StorageProxy {\\n    using SafeCastLib for uint256;\\n    using SafeCastLib for uint16;\\n\\n    address public immutable dotnuggv1;\\n\\n    address public implementer;\\n\\n    constructor() {\\n        dotnuggv1 = msg.sender;\\n    }\\n\\n    function init(address _implementer) external {\\n        require(implementer == address(0) && msg.sender == dotnuggv1, 'C:0');\\n        implementer = _implementer;\\n    }\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint8 => uint168[]) sstore2Pointers;\\n    mapping(uint8 => uint8) featureLengths;\\n\\n    function stored(uint8 feature) public view override returns (uint8 res) {\\n        return featureLengths[feature];\\n    }\\n\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                TRUSTED\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    function unsafeBulkStore(uint256[][][] calldata data) public override {\\n        for (uint8 i = 0; i < 8; i++) {\\n            uint8 len = data[i].length.safe8();\\n\\n            if (len > 0) {\\n                address ptr = SSTORE2.write(data[i]);\\n\\n                bool ok = IDotnuggV1Implementer(implementer).dotnuggV1StoreCallback(msg.sender, i, len, ptr);\\n\\n                require(ok, 'C:0');\\n\\n                sstore2Pointers[i].push(uint168(uint160(ptr)) | (uint168(len) << 160));\\n\\n                featureLengths[i] += len;\\n            }\\n        }\\n    }\\n\\n    function store(uint8 feature, uint256[][] calldata data) public override returns (uint8 res) {\\n        require(feature < 8, 'F:3');\\n\\n        uint8 len = data.length.safe8();\\n\\n        require(len > 0, 'F:0');\\n\\n        address ptr = SSTORE2.write(data);\\n\\n        bool ok = IDotnuggV1Implementer(implementer).dotnuggV1StoreCallback(msg.sender, feature, len, ptr);\\n\\n        require(ok, 'C:0');\\n\\n        sstore2Pointers[feature].push(uint168(uint160(ptr)) | (uint168(len) << 160));\\n\\n        featureLengths[feature] += len;\\n\\n        return len;\\n    }\\n\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                 GET FILES\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    function getBatch(uint8[] memory ids) public view returns (uint256[][] memory data) {\\n        data = new uint256[][](ids.length);\\n\\n        for (uint8 i = 0; i < ids.length; i++) {\\n            if (ids[i] == 0) data[i] = new uint256[](0);\\n            else data[i] = get(i, ids[i]);\\n        }\\n    }\\n\\n    function get(uint8 feature, uint8 pos) public view returns (uint256[] memory data) {\\n        require(pos != 0, 'F:1');\\n\\n        pos--;\\n\\n        uint8 totalLength = featureLengths[feature];\\n\\n        require(pos < totalLength, 'F:2');\\n\\n        uint168[] memory ptrs = sstore2Pointers[feature];\\n\\n        address stor;\\n        uint8 storePos;\\n\\n        uint8 workingPos;\\n\\n        for (uint256 i = 0; i < ptrs.length; i++) {\\n            uint8 here = uint8(ptrs[i] >> 160);\\n            if (workingPos + here > pos) {\\n                stor = address(uint160(ptrs[i]));\\n                storePos = pos - workingPos;\\n                break;\\n            } else {\\n                workingPos += here;\\n            }\\n        }\\n\\n        require(stor != address(0), 'F:3');\\n\\n        data = SSTORE2.read2DArray(stor, storePos);\\n    }\\n}\\n\",\"keccak256\":\"0xa35778ad58caeb3cd03388d20ff366444fbba13c8e5359f9af58abdcaa8bb3b7\",\"license\":\"MIT\"},\"src/core/DotnuggV1SvgLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {StringCastLib} from '../libraries/StringCastLib.sol';\\nimport {ShiftLib} from '../libraries/ShiftLib.sol';\\nimport {Pixel} from '../types/Pixel.sol';\\nimport {Version} from '../types/Version.sol';\\nimport {Base64} from '../libraries/Base64.sol';\\n\\nimport {IDotnuggV1Metadata} from '../interfaces/IDotnuggV1Metadata.sol';\\n\\ncontract DotnuggV1SvgLib {\\n    using StringCastLib for uint256;\\n    using StringCastLib for uint8;\\n\\n    using StringCastLib for address;\\n\\n    using Pixel for uint256;\\n\\n    struct Memory {\\n        bytes data;\\n        uint256 color;\\n    }\\n\\n    function svgBase64(bytes memory input) public pure returns (bytes memory res) {\\n        res = abi.encodePacked(Base64.PREFIX_SVG, Base64._encode(input));\\n    }\\n\\n    function svgUtf8(bytes memory input) public pure returns (bytes memory res) {\\n        res = abi.encodePacked('data:image/svg+xml;charset=UTF-8,', input);\\n    }\\n\\n    function buildSvg(\\n        uint256[] memory file,\\n        IDotnuggV1Metadata.Memory memory metadata,\\n        // uint256 zoom,\\n        bool rekt,\\n        bool background,\\n        bool,\\n        bool base64\\n    ) external pure returns (bytes memory res) {\\n        // styles[0] = '{filter: drop-shadow( 3px 3px 2px rgba(0, 0, 0, .7));}';\\n\\n        /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                    header\\n           \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n        string memory __63 = uint256(63).toAsciiString();\\n\\n        bytes memory header = abi.encodePacked(\\n            '<svg',\\n            ' viewBox=\\\"0 0 ',\\n            __63,\\n            ' ',\\n            __63,\\n            // '\\\" height=\\\"',\\n            // __63,\\n            // '\\\" width=\\\"',\\n            '\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"'\\n        );\\n\\n        if (background) {\\n            header = abi.encodePacked(\\n                header, //\\n                ' style=\\\"background-color:',\\n                bytes(metadata.background).length > 0 ? metadata.background : '#FFF',\\n                '\\\"'\\n            );\\n        }\\n\\n        /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                        body\\n           \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n        // if (zoom == 0) zoom = 1;\\n\\n        Memory[] memory mapper = fletchOutTheRects(file, rekt);\\n\\n        bytes memory body;\\n\\n        for (uint256 i = 1; i < mapper.length; i++) {\\n            if (mapper[i].color == 0) break;\\n\\n            body = abi.encodePacked(\\n                body, //\\n                mapper[i].data,\\n                '\\\"/>'\\n            );\\n        }\\n\\n        if (rekt) {\\n            bytes memory stylee = abi.encodePacked('<style type=\\\"text/css\\\" ><![CDATA[');\\n\\n            for (uint256 i = 0; i < 8; i++) {\\n                if (metadata.styles.length > i && bytes(metadata.styles[i]).length == 0) continue;\\n                stylee = abi.encodePacked(stylee, '.', i + 65, metadata.styles[i]);\\n            }\\n\\n            body = abi.encodePacked(stylee, ']]></style>', body);\\n        }\\n\\n        // if (stats) {\\n        //     body = abi.encodePacked(body, getMetadata(metadata));\\n        // }\\n\\n        res = abi.encodePacked(header, '>', body, hex'3c2f7376673e');\\n\\n        if (base64) res = svgBase64(res);\\n        else res = svgUtf8(res);\\n    }\\n\\n    function fletchOutTheRects(uint256[] memory file, bool rekt) internal pure returns (Memory[] memory mapper) {\\n        (uint256 last, ) = Version.getPixelAt(file, 0, 0, 63);\\n\\n        uint256 count = 1;\\n\\n        mapper = new Memory[](64);\\n\\n        for (uint256 y = 0; y < 63; y++) {\\n            for (uint256 x = y == 0 ? 1 : 0; x < 63; x++) {\\n                // if (y == 0 && x == 0) x++;\\n\\n                (uint256 curr, ) = Version.getPixelAt(file, x, y, 63);\\n\\n                if (curr.rgba() == last.rgba()) {\\n                    count++;\\n                    continue;\\n                }\\n\\n                setRektPath(mapper, last, (x - count), y, count, rekt);\\n\\n                last = curr;\\n                count = 1;\\n            }\\n\\n            setRektPath(mapper, last, (63 - count), y, count, rekt);\\n\\n            last = 0;\\n            count = 0;\\n        }\\n    }\\n\\n    function getColorIndex(\\n        Memory[] memory mapper,\\n        uint256 color,\\n        bool rekt\\n    ) internal pure returns (uint256 i) {\\n        if (color.rgba() == 0) return 0;\\n        i++;\\n        for (; i < mapper.length; i++) {\\n            if (mapper[i].color == 0) break;\\n            if (mapper[i].color == color) return i;\\n        }\\n\\n        mapper[i].color = color;\\n\\n        string memory colorStr = color.a() == 0xff ? (color.rgba() >> 8).toHexStringNoPrefix(3) : color.rgba().toHexStringNoPrefix(4);\\n\\n        if (rekt) {\\n            mapper[i].data = abi.encodePacked('<path fill=\\\"#', colorStr, '\\\" class=\\\"', color.f() + 65, '\\\" d=\\\"');\\n        } else {\\n            mapper[i].data = abi.encodePacked('<path stroke=\\\"#', colorStr, '\\\" d=\\\"');\\n        }\\n    }\\n\\n    function setRektPath(\\n        Memory[] memory mapper,\\n        uint256 color,\\n        uint256 x,\\n        uint256 y,\\n        uint256 xlen,\\n        bool rekt\\n    ) internal pure {\\n        if (color == 0) return;\\n\\n        uint256 index = getColorIndex(mapper, color, rekt);\\n\\n        mapper[index].data = abi.encodePacked(\\n            mapper[index].data, //\\n            'M',\\n            (x).toAsciiString(),\\n            ' ',\\n            (y).toAsciiString(),\\n            'h',\\n            (xlen).toAsciiString()\\n        );\\n\\n        if (rekt) {\\n            mapper[index].data = abi.encodePacked(\\n                mapper[index].data, //\\n                'v',\\n                uint256(1).toAsciiString(),\\n                'L',\\n                (x).toAsciiString(),\\n                ' ',\\n                (y + 1).toAsciiString()\\n            );\\n        }\\n    }\\n\\n    // function getMetadata(IDotnuggV1Metadata.Memory memory data) internal pure returns (bytes memory res) {\\n    //     res = abi.encodePacked(\\n    //         '<text x=\\\"10\\\" y=\\\"20\\\" font-family=\\\"monospace\\\" font-size=\\\"20px\\\" style=\\\"fill:black;\\\">Metadata:',\\n    //         // getTspan(45, 0, 'name', data.name),\\n    //         // getTspan(75, 0, 'description', data.desc),\\n    //         // getTspan(105, 0, 'id', data.tokenId.toAsciiString()),\\n    //         // getTspan(135, 0, 'owner', data.owner.toHexString()),\\n    //         getTspan(165, 0, 'items', '')\\n    //     );\\n\\n    //     for (uint256 i = 0; i < 8; i++) {\\n    //         if (data.ids[i] > 0) {\\n    //             res = abi.encodePacked(res, getTspan(195 + i * 30, 20, data.labels[i], data.ids[i].toAsciiString()));\\n    //         }\\n    //     }\\n\\n    //     res = abi.encodePacked(res, '</text>');\\n    // }\\n\\n    // function getTspan(\\n    //     uint256 y,\\n    //     uint256 xoffset,\\n    //     string memory label,\\n    //     string memory data\\n    // ) internal pure returns (bytes memory res) {\\n    //     res = abi.encodePacked(\\n    //         '<tspan x=\\\"',\\n    //         (10 + xoffset).toAsciiString(),\\n    //         '\\\" y=\\\"',\\n    //         y.toAsciiString(),\\n    //         '\\\">',\\n    //         '<tspan style=\\\"font-weight:bold;\\\">',\\n    //         label,\\n    //         ':</tspan> ',\\n    //         data,\\n    //         '</tspan>'\\n    //     );\\n    // }\\n}\\n\",\"keccak256\":\"0x32750caa9e64994e4bdab29dade6e54d816ebd8e2ef0405405c3085036092d28\",\"license\":\"MIT\"},\"src/interfaces/IDotnuggV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {IDotnuggV1Metadata as Metadata} from './IDotnuggV1Metadata.sol';\\nimport {IDotnuggV1File as File} from './IDotnuggV1File.sol';\\nimport {IDotnuggV1StorageProxy} from './IDotnuggV1StorageProxy.sol';\\n\\ninterface IDotnuggV1 {\\n    function register() external returns (IDotnuggV1StorageProxy proxy);\\n\\n    function proxyOf(address implementer) external view returns (IDotnuggV1StorageProxy proxy);\\n\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                core processors\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    function raw(\\n        address implementer,\\n        uint256 artifactId,\\n        address resolver,\\n        bytes memory data\\n    ) external view returns (File.Raw memory res);\\n\\n    function proc(\\n        address implementer,\\n        uint256 artifactId,\\n        address resolver,\\n        bytes memory data\\n    ) external view returns (File.Processed memory res);\\n\\n    function comp(\\n        address implementer,\\n        uint256 artifactId,\\n        address resolver,\\n        bytes memory data\\n    ) external view returns (File.Compressed memory res);\\n\\n    // /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n    //                         basic resolved processors\\n    //    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n    // function byt(\\n    //     address implementer,\\n    //     uint256 artifactId,\\n    //     address resolver,\\n    //     bytes calldata data\\n    // ) external view returns (bytes memory res);\\n\\n    // function str(\\n    //     address implementer,\\n    //     uint256 artifactId,\\n    //     address resolver,\\n    //     bytes calldata data\\n    // ) external view returns (string memory res);\\n\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                            complex resolved processors\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n    function dat(\\n        address implementer,\\n        uint256 artifactId,\\n        address resolver,\\n        string memory name,\\n        string memory desc,\\n        bool base64,\\n        bytes calldata data\\n    ) external view returns (string memory res);\\n\\n    function img(\\n        address implementer,\\n        uint256 artifactId,\\n        address resolver,\\n        bool rekt,\\n        bool background,\\n        bool stats,\\n        bool base64,\\n        bytes calldata data\\n    ) external view returns (string memory res);\\n}\\n\",\"keccak256\":\"0x870773b4facb8c57bffaa4605ff0411dd894922d88d47ab8985d1cda5e91ace7\",\"license\":\"MIT\"},\"src/interfaces/IDotnuggV1File.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {IDotnuggV1Metadata as Metadata} from './IDotnuggV1Metadata.sol';\\n\\ninterface IDotnuggV1File {\\n    struct Raw {\\n        uint256[][] file;\\n        Metadata.Memory metadata;\\n    }\\n\\n    struct Processed {\\n        uint256[] file;\\n        Metadata.Memory metadata;\\n    }\\n\\n    struct Compressed {\\n        uint256[] file;\\n        Metadata.Memory metadata;\\n    }\\n}\\n\",\"keccak256\":\"0x0dddef068fc65fc4f0d6849f65d4669e960725087d361caa023e947cdce21537\",\"license\":\"MIT\"},\"src/interfaces/IDotnuggV1Implementer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {IDotnuggV1Metadata} from './IDotnuggV1Metadata.sol';\\nimport {IDotnuggV1StorageProxy} from './IDotnuggV1StorageProxy.sol';\\n\\ninterface IDotnuggV1Implementer {\\n    event DotnuggV1ConfigUpdated(uint256 indexed artifactId);\\n\\n    function dotnuggV1ImplementerCallback(uint256 artifactId) external view returns (IDotnuggV1Metadata.Memory memory data);\\n\\n    function dotnuggV1StoreCallback(\\n        address caller,\\n        uint8 feature,\\n        uint8 amount,\\n        address storagePointer\\n    ) external returns (bool ok);\\n\\n    function dotnuggV1StorageProxy() external returns (IDotnuggV1StorageProxy res);\\n}\\n\",\"keccak256\":\"0x1865523e448b3d3c75fd772d2b54760154a34e1e690572dc6d0963d8ce686e63\",\"license\":\"MIT\"},\"src/interfaces/IDotnuggV1Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IDotnuggV1Metadata {\\n    struct Memory {\\n        uint8[] ids;\\n        uint8[] xovers;\\n        uint8[] yovers;\\n        uint256 version;\\n        address implementer;\\n        uint256 artifactId;\\n        string[] labels;\\n        string[] styles;\\n        string background;\\n        bytes data;\\n    }\\n}\\n\",\"keccak256\":\"0x87228718e37d0c24c240eb5d3a09192a708cbfd7293b5b4f1a03bc9ede33e712\",\"license\":\"MIT\"},\"src/interfaces/IDotnuggV1Resolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {IDotnuggV1Metadata as Metadata} from './IDotnuggV1Metadata.sol';\\nimport {IDotnuggV1File as File} from './IDotnuggV1File.sol';\\n\\ninterface IDotnuggV1Resolver {\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                              complex [default] resolvers\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    function dotnuggV1MetadataCallback(\\n        address implementer,\\n        uint256 artifactId,\\n        Metadata.Memory memory input,\\n        bytes memory data\\n    ) external view returns (Metadata.Memory memory resolved);\\n\\n    function dotnuggV1SvgCallback(\\n        File.Processed memory proc, //\\n        bytes memory data\\n    ) external view returns (string memory res);\\n\\n    function dotnuggV1JsonCallback(\\n        File.Processed memory proc, //\\n        bytes memory data\\n    ) external view returns (string memory res);\\n\\n    /* \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                              basic resolvers\\n       \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501 */\\n\\n    function dotnuggV1StringCallback(\\n        File.Processed memory proc, //\\n        bytes memory data\\n    ) external view returns (string memory res);\\n\\n    function dotnuggV1BytesCallback(\\n        File.Processed memory proc, //\\n        bytes memory data\\n    ) external view returns (bytes memory res);\\n}\\n\",\"keccak256\":\"0xc6261b93f9965f222a899fc233ca9344f8b7d555ee5f88981ea32b9d11300826\",\"license\":\"MIT\"},\"src/interfaces/IDotnuggV1StorageProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IDotnuggV1StorageProxy {\\n    function stored(uint8 feature) external view returns (uint8);\\n\\n    function store(uint8 feature, uint256[][] calldata data) external returns (uint8 amount);\\n\\n    function unsafeBulkStore(uint256[][][] calldata data) external;\\n\\n    function init(address _implementer) external;\\n\\n    function getBatch(uint8[] memory ids) external view returns (uint256[][] memory data);\\n\\n    function get(uint8 feature, uint8 pos) external view returns (uint256[] memory data);\\n}\\n\",\"keccak256\":\"0xe7cdc2f164e14c96a1ccd18fea1d90e086065d55e8a7889dbc8272918497ac40\",\"license\":\"MIT\"},\"src/libraries/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @title Base64\\n * @author Nugg Labs - @danny7even & @dub6ix\\n * @notice library for encoding bytes into base64\\n */\\nlibrary Base64 {\\n    string internal constant _TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    string internal constant PREFIX_JSON = 'data:application/json;base64,';\\n    string internal constant PREFIX_DOTNUGG = 'data:image/dotnugg;base64,';\\n    string internal constant PREFIX_SVG = 'data:image/svg+xml;base64,';\\n\\n    /**\\n     * @notice wrapper for _encode for svg data\\n     * @param data bytes to encode\\n     * @return base64 string representation of input bytes, prefixed with json base64 prefix\\n     */\\n    function encode(bytes memory data, string memory file) internal pure returns (string memory) {\\n        return string(abi.encodePacked('data:', file, ';base64,', _encode(data)));\\n    }\\n\\n    /**\\n     * @notice Encodes some bytes in base64\\n     * @param data bytes to encode\\n     * @return base64 string representation of input bytes\\n     * @dev Credit to Brecht Devos - <brecht@loopring.org> - under MIT license https://github.com/Brechtpd/base64/blob/main/base64.sol\\n     * @dev modified for solidity v8\\n     */\\n    function _encode(bytes memory data) internal pure returns (bytes memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = _TABLE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {\\n\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                dataPtr := add(dataPtr, 3)\\n\\n                // read 3 bytes\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F)))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F)))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(6, input), 0x3F)))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore(resultPtr, shl(248, mload(add(tablePtr, and(input, 0x3F)))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n            }\\n            case 2 {\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x24a45e23f4363421ff4ca2c5bd3f9ade211119cb67606dc017aa4c3e0cb4ddee\",\"license\":\"MIT\"},\"src/libraries/BitReader.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport '../libraries/ShiftLib.sol';\\n\\nlibrary BitReader {\\n    using ShiftLib for uint256;\\n\\n    struct Memory {\\n        uint256[] dat;\\n        uint256 moves;\\n        uint256 pos;\\n    }\\n\\n    function init(uint256[] memory input) internal pure returns (bool err, Memory memory m) {\\n        if (input.length == 0) return (true, m);\\n\\n        m.dat = input;\\n\\n        m.moves = 2;\\n\\n        m.dat = new uint256[](input.length);\\n\\n        for (uint256 i = input.length; i > 0; i--) {\\n            m.dat[i - 1] = input[input.length - i];\\n        }\\n    }\\n\\n    function peek(Memory memory m, uint8 bits) internal pure returns (uint256 res) {\\n        res = m.dat[0] & ShiftLib.mask(bits);\\n    }\\n\\n    function select(Memory memory m, uint8 bits) internal pure returns (uint256 res) {\\n        res = m.dat[0] & ShiftLib.mask(bits);\\n\\n        m.dat[0] = m.dat[0] >> bits;\\n\\n        m.pos += bits;\\n\\n        if (m.pos >= 128) {\\n            uint256 ptr = (m.moves / 2);\\n            if (ptr < m.dat.length) {\\n                m.dat[0] <<= m.pos - 128;\\n                uint256 move = m.dat[ptr] & ShiftLib.mask(128);\\n                m.dat[ptr] >>= 128;\\n                m.dat[0] |= (move << 128);\\n                m.dat[0] >>= (m.pos - 128);\\n                m.moves++;\\n                m.pos -= 128;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1f5c8e79958d83664af4a27d4e2cc8959b074453deca179b038d8e375eee8e9\",\"license\":\"MIT\"},\"src/libraries/MinimalProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary MinimalProxy {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), 'ERC1167: create failed');\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function deploy(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), 'ERC1167: create2 failed');\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function compute(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function compute(address implementation, bytes32 salt) internal view returns (address predicted) {\\n        return compute(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xf742f6a18c53caa521457523fc37629818a417f802b24c848a61c9df89272b65\",\"license\":\"MIT\"},\"src/libraries/SSTORE2.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.9;\\n\\n/// @notice Read and write to persistent storage at a fraction of the cost.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/SSTORE2.sol)\\n/// @author Modified from 0xSequence (https://github.com/0xSequence/sstore2/blob/master/contracts/SSTORE2.sol)\\nlibrary SSTORE2 {\\n    uint256 internal constant DATA_OFFSET = 1; // We skip the first byte as it's a STOP opcode to ensure the contract can't be called.\\n\\n\\n    function read2DArray(address pointer, uint256 index) internal view returns (uint256[] memory) {\\n        return abi.decode(read(pointer), (uint256[][]))[index];\\n    }\\n\\n    // function write2DArray(uint256[][] memory data) internal  returns (address pointer) {\\n    //     return write(abi.encode(data));\\n    // }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                               WRITE LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function write(uint256[][] calldata data) internal returns (address pointer) {\\n        // Prefix the bytecode with a STOP opcode to ensure it cannot be called.\\n        // bytes memory runtimeCode = abi.encodePacked(hex'00', data);\\n\\n        bytes memory creationCode = abi.encodePacked(\\n            //---------------------------------------------------------------------------------------------------------------//\\n            // Opcode  | Opcode + Arguments  | Description  | Stack View                                                     //\\n            //---------------------------------------------------------------------------------------------------------------//\\n            // 0x60    |  0x600B             | PUSH1 11     | codeOffset                                                     //\\n            // 0x59    |  0x59               | MSIZE        | 0 codeOffset                                                   //\\n            // 0x81    |  0x81               | DUP2         | codeOffset 0 codeOffset                                        //\\n            // 0x38    |  0x38               | CODESIZE     | codeSize codeOffset 0 codeOffset                               //\\n            // 0x03    |  0x03               | SUB          | (codeSize - codeOffset) 0 codeOffset                           //\\n            // 0x80    |  0x80               | DUP          | (codeSize - codeOffset) (codeSize - codeOffset) 0 codeOffset   //\\n            // 0x92    |  0x92               | SWAP3        | codeOffset (codeSize - codeOffset) 0 (codeSize - codeOffset)   //\\n            // 0x59    |  0x59               | MSIZE        | 0 codeOffset (codeSize - codeOffset) 0 (codeSize - codeOffset) //\\n            // 0x39    |  0x39               | CODECOPY     | 0 (codeSize - codeOffset)                                      //\\n            // 0xf3    |  0xf3               | RETURN       |                                                                //\\n            //---------------------------------------------------------------------------------------------------------------//\\n            hex'60_0B_59_81_38_03_80_92_59_39_F3_00', // Returns all code in the contract except for the first 11 (0B in hex) bytes.\\n            abi.encode(data)\\n            // runtimeCode // The bytecode we want the contract to have after deployment. Capped at 1 byte less than the code size limit.\\n        );\\n\\n        assembly {\\n            // Deploy a new contract with the generated creation code.\\n            // We start 32 bytes into the code to avoid copying the byte length.\\n            pointer := create(0, add(creationCode, 32), mload(creationCode))\\n        }\\n\\n        require(pointer != address(0), 'DEPLOYMENT_FAILED');\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                               READ LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function read(address pointer) internal view returns (bytes memory) {\\n        return readBytecode(pointer, DATA_OFFSET, pointer.code.length - DATA_OFFSET);\\n    }\\n\\n\\n\\n\\n    // function read(address pointer, uint256 start) internal view returns (bytes memory) {\\n    //     start += DATA_OFFSET;\\n\\n    //     return readBytecode(pointer, start, pointer.code.length - start);\\n    // }\\n\\n    // function read(\\n    //     address pointer,\\n    //     uint256 start,\\n    //     uint256 end\\n    // ) internal view returns (bytes memory) {\\n    //     start += DATA_OFFSET;\\n    //     end += DATA_OFFSET;\\n\\n    //     require(pointer.code.length >= end, 'OUT_OF_BOUNDS');\\n\\n    //     return readBytecode(pointer, start, end - start);\\n    // }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                         INTERNAL HELPER LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function readBytecode(\\n        address pointer,\\n        uint256 start,\\n        uint256 size\\n    ) private view returns (bytes memory data) {\\n        assembly {\\n            // Get a pointer to some free memory.\\n            data := mload(0x40)\\n\\n            // Update the free memory pointer to prevent overriding our data.\\n            // We use and(x, not(31)) as a cheaper equivalent to sub(x, mod(x, 32)).\\n            // Adding 31 to size and running the result through the logic above ensures\\n            // the memory pointer remains word-aligned, following the Solidity convention.\\n            mstore(0x40, add(data, and(add(add(size, 32), 31), not(31))))\\n\\n            // Store the size of the data in the first 32 byte chunk of free memory.\\n            mstore(data, size)\\n\\n            // Copy the code into memory right after the 32 bytes we used to store the size.\\n            extcodecopy(pointer, add(data, 32), start, size)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd161ca2ed3da2891c250fc9ebaf76b7129fa0ef54a07f0b2605e6210f89b7506\",\"license\":\"AGPL-3.0-only\"},\"src/libraries/SafeCastLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\nimport {ShiftLib} from './ShiftLib.sol';\\n\\nlibrary SafeCastLib {\\n    function safe252(uint256 x) internal pure returns (uint256 y) {\\n        require(x <= ShiftLib.mask(252), 'SC:252');\\n        return x;\\n    }\\n\\n    function safe160(uint256 x) internal pure returns (uint160 y) {\\n        require(x <= type(uint160).max);\\n        y = uint160(x);\\n    }\\n\\n    function safe96(uint256 x) internal pure returns (uint96 y) {\\n        require(x <= type(uint96).max);\\n        y = uint96(x);\\n    }\\n\\n    function safe64(uint256 x) internal pure returns (uint64 y) {\\n        require(x <= type(uint64).max);\\n        y = uint64(x);\\n    }\\n\\n    function safe32(uint256 x) internal pure returns (uint32 y) {\\n        require(x <= type(uint32).max);\\n        y = uint32(x);\\n    }\\n\\n    function safe16(uint256 x) internal pure returns (uint16 y) {\\n        require(x <= type(uint16).max);\\n        y = uint16(x);\\n    }\\n\\n    function safe8(uint256 x) internal pure returns (uint8 y) {\\n        require(x <= type(uint8).max);\\n        y = uint8(x);\\n    }\\n\\n    function safe6(uint256 x) internal pure returns (uint8 y) {\\n        require(x <= 0xf7);\\n        y = uint8(x);\\n    }\\n\\n    function safe4(uint256 x) internal pure returns (uint8 y) {\\n        require(x <= 0xf);\\n        y = uint8(x);\\n    }\\n\\n    function safe3(uint256 x) internal pure returns (uint8 y) {\\n        require(x <= 0x7);\\n        y = uint8(x);\\n    }\\n}\\n\",\"keccak256\":\"0x70a9af6f707af1bcc29f5798a9dee15f7dae34ff5066278fcae3914f61006593\",\"license\":\"MIT\"},\"src/libraries/ShiftLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {SafeCastLib} from './SafeCastLib.sol';\\n\\nlibrary ShiftLib {\\n    using SafeCastLib for uint256;\\n\\n    /// @notice creates a bit mask\\n    /// @dev res = (2 ^ bits) - 1\\n    /// @param bits d\\n    /// @return res d\\n    /// @dev no need to check if \\\"bits\\\" is < 256 as anything greater than 255 will be treated the same\\n    function mask(uint8 bits) internal pure returns (uint256 res) {\\n        assembly {\\n            res := sub(shl(bits, 1), 1)\\n        }\\n    }\\n\\n    function fullsubmask(uint8 bits, uint8 pos) internal pure returns (uint256 res) {\\n        res = ~(mask(bits) << pos);\\n    }\\n\\n    function set(\\n        uint256 cache,\\n        uint8 bits,\\n        uint8 pos,\\n        uint256 value\\n    ) internal pure returns (uint256 res) {\\n        res = cache & fullsubmask(bits, pos);\\n\\n        assembly {\\n            value := shl(pos, value)\\n        }\\n\\n        res |= value;\\n    }\\n\\n    function get(\\n        uint256 cache,\\n        uint8 bits,\\n        uint8 pos\\n    ) internal pure returns (uint256 res) {\\n        assembly {\\n            res := shr(pos, cache)\\n        }\\n        res &= mask(bits);\\n    }\\n\\n    /*\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n                                ARRAYS\\n    \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501*/\\n\\n    function getArray8x8(uint256 store, uint8 pos) internal pure returns (uint8[] memory arr) {\\n        store = get(store, 64, pos);\\n\\n        arr = new uint8[](8);\\n        for (uint256 i = 0; i < 8; i++) {\\n            arr[i] = uint8(store & 0xff);\\n            store >>= 8;\\n        }\\n    }\\n\\n    function setArray8x8(\\n        uint256 store,\\n        uint8 pos,\\n        uint8[] memory arr\\n    ) internal pure returns (uint256 res) {\\n        for (uint256 i = 8; i > 0; i--) {\\n            res |= uint256(arr[i - 1]) << ((8 * (i - 1)));\\n        }\\n\\n        res = set(store, 64, pos, res);\\n    }\\n}\\n\",\"keccak256\":\"0x5ae0ed42cef7d742f8bb1ca830ff453a3324f081d8ea05dfbf3e5bdb51e3669f\",\"license\":\"MIT\"},\"src/libraries/StringCastLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/*\\n * @dev Uint operations.\\n */\\nlibrary StringCastLib {\\n    bytes16 private constant ALPHABET = '0123456789abcdef';\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toAsciiString(uint256 value) internal pure returns (string memory) {\\n        return string(toAsciiBytes(value));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toAsciiBytes(uint256 value) internal pure returns (bytes memory buffer) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return '0';\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n\\n        buffer = new bytes(digits);\\n\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return buffer;\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toHexString(address value) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(value)), 20);\\n    }\\n\\n    /// @notice Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n    /// @dev Credit to Open Zeppelin under MIT license https://github.com/OpenZeppelin/openzeppelin-contracts/blob/243adff49ce1700e0ecb99fe522fb16cff1d1ddc/contracts/utils/Strings.sol#L55\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = '0';\\n        buffer[1] = 'x';\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = ALPHABET[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, 'Strings: hex length insufficient');\\n        return string(buffer);\\n    }\\n\\n    function toHexStringNoPrefix(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length);\\n        for (uint256 i = buffer.length; i > 0; i--) {\\n            buffer[i - 1] = ALPHABET[value & 0xf];\\n            value >>= 4;\\n        }\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xa5332c65839a31f440bee88af098faf71314f6f124cb43435b5cbadc49163c6c\",\"license\":\"MIT\"},\"src/logic/Anchor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport '../types/Types.sol';\\nimport './Matrix.sol';\\n\\nlibrary Anchor {\\n    using Matrix for Types.Matrix;\\n    using Version for Version.Memory;\\n\\n    function convertReceiversToAnchors(Types.Mix memory mix) internal pure {\\n        Types.Coordinate[] memory anchors;\\n        uint8 stat = 0;\\n        uint8 cal = 0;\\n\\n        for (uint8 i = 0; i < mix.version.staticReceivers.length; i++) {\\n            Types.Coordinate memory coordinate;\\n            if (mix.version.staticReceivers[i].exists) {\\n                stat++;\\n                coordinate = mix.version.staticReceivers[i];\\n                mix.receivers[i].coordinate.a = coordinate.b;\\n                mix.receivers[i].coordinate.b = coordinate.a;\\n                mix.receivers[i].coordinate.exists = true;\\n            } else if (mix.version.calculatedReceivers[i].exists) {\\n                // if (mix.feature != 0) continue;\\n\\n                cal++;\\n                if (anchors.length == 0) anchors = getAnchors(mix.matrix);\\n                coordinate = calculateReceiverCoordinate(mix, mix.version.calculatedReceivers[i], anchors);\\n                fledgeOutTheRluds(mix, coordinate, i);\\n            }\\n        }\\n    }\\n\\n    function fledgeOutTheRluds(\\n        Types.Mix memory mix,\\n        Types.Coordinate memory coordinate,\\n        uint8 index\\n    ) internal pure {\\n        Types.Rlud memory radii;\\n\\n        while (coordinate.a < mix.matrix.width - 1 && mix.matrix.version.bigMatrixHasPixelAt(coordinate.a + (radii.r + 1), coordinate.b)) {\\n            radii.r++;\\n        }\\n        while (coordinate.a != 0 && coordinate.a >= (radii.l + 1) && mix.matrix.version.bigMatrixHasPixelAt(coordinate.a - (radii.l + 1), coordinate.b)) {\\n            radii.l++;\\n        }\\n        while (coordinate.b != 0 && coordinate.b >= (radii.u + 1) && mix.matrix.version.bigMatrixHasPixelAt(coordinate.a, coordinate.b - (radii.u + 1))) {\\n            radii.u++;\\n        }\\n        while (coordinate.b < mix.matrix.height - 1 && mix.matrix.version.bigMatrixHasPixelAt(coordinate.a, coordinate.b + (radii.d + 1))) {\\n            radii.d++;\\n        }\\n\\n        if (!mix.receivers[index].coordinate.exists) {\\n            mix.receivers[index] = Types.Anchor({radii: radii, coordinate: coordinate});\\n        }\\n    }\\n\\n    function calculateReceiverCoordinate(\\n        Types.Mix memory mix,\\n        Types.Coordinate memory calculatedReceiver,\\n        Types.Coordinate[] memory anchors\\n    ) internal pure returns (Types.Coordinate memory coordinate) {\\n        coordinate.a = anchors[calculatedReceiver.a].a;\\n        coordinate.b = anchors[calculatedReceiver.a].b;\\n        coordinate.exists = true;\\n\\n        if (calculatedReceiver.b < 32) {\\n            coordinate.b = coordinate.b - calculatedReceiver.b;\\n        } else {\\n            coordinate.b = coordinate.b + (calculatedReceiver.b - 32);\\n        }\\n\\n        while (!mix.matrix.version.bigMatrixHasPixelAt(coordinate.a, coordinate.b)) {\\n            if (anchors[0].b > coordinate.b) {\\n                coordinate.b++;\\n            } else {\\n                coordinate.b--;\\n            }\\n        }\\n        return coordinate;\\n    }\\n\\n    function getAnchors(Types.Matrix memory matrix) internal pure returns (Types.Coordinate[] memory anchors) {\\n        (uint8 topOffset, uint8 bottomOffset, Types.Coordinate memory center) = getBox(matrix);\\n\\n        anchors = new Types.Coordinate[](5);\\n\\n        anchors[0] = center; // center\\n\\n        anchors[1] = Types.Coordinate({a: center.a, b: center.b - topOffset, exists: true}); // top\\n\\n        uint8 upperOffset = topOffset;\\n        if (upperOffset % 2 != 0) {\\n            upperOffset++;\\n        }\\n        anchors[2] = Types.Coordinate({a: center.a, b: center.b - (upperOffset / 2), exists: true}); // inner top\\n\\n        uint8 lowerOffset = bottomOffset;\\n        if (lowerOffset % 2 != 0) {\\n            lowerOffset++;\\n        }\\n        anchors[3] = Types.Coordinate({a: center.a, b: center.b + (lowerOffset / 2), exists: true}); // inner bottom\\n\\n        anchors[4] = Types.Coordinate({a: center.a, b: center.b + bottomOffset, exists: true}); // bottom\\n    }\\n\\n    function getBox(Types.Matrix memory matrix)\\n        internal\\n        pure\\n        returns (\\n            uint8 topOffset,\\n            uint8 bottomOffset,\\n            Types.Coordinate memory center\\n        )\\n    {\\n        center.a = (matrix.width) / 2;\\n        center.b = (matrix.height) / 2;\\n        center.exists = true;\\n\\n        bool topFound = false;\\n        bool bottomFound = false;\\n        bool sideFound = false;\\n        bool shouldExpandSide = true;\\n\\n        topOffset = 1;\\n        bottomOffset = 1;\\n        uint8 sideOffset = 1;\\n\\n        bool allFound = false;\\n\\n        while (!allFound) {\\n            if (shouldExpandSide = !shouldExpandSide && !sideFound) {\\n                if (\\n                    matrix.version.bigMatrixHasPixelAt(center.a - (sideOffset + 1), center.b - topOffset) &&\\n                    // potential top left\\n                    matrix.version.bigMatrixHasPixelAt(center.a + (sideOffset + 1), center.b - topOffset) &&\\n                    // potential top right\\n                    matrix.version.bigMatrixHasPixelAt(center.a - (sideOffset + 1), center.b + bottomOffset) &&\\n                    // potential bot left\\n                    matrix.version.bigMatrixHasPixelAt(center.a + (sideOffset + 1), center.b + bottomOffset)\\n                    // potential bot right\\n                ) {\\n                    sideOffset++;\\n                } else {\\n                    sideFound = true;\\n                }\\n            }\\n            if (!topFound) {\\n                if (\\n                    center.b - topOffset > 0 &&\\n                    matrix.version.bigMatrixHasPixelAt(center.a - sideOffset, center.b - (topOffset + 1)) &&\\n                    // potential top left\\n                    matrix.version.bigMatrixHasPixelAt(center.a + sideOffset, center.b - (topOffset + 1))\\n                    // potential top right\\n                ) {\\n                    topOffset++;\\n                } else {\\n                    topFound = true;\\n                }\\n            }\\n            if (!bottomFound) {\\n                if (\\n                    center.b + bottomOffset < matrix.height - 1 &&\\n                    matrix.version.bigMatrixHasPixelAt(center.a - sideOffset, center.b + (bottomOffset + 1)) &&\\n                    // potential bot left\\n                    matrix.version.bigMatrixHasPixelAt(center.a + sideOffset, center.b + (bottomOffset + 1))\\n                    // potenetial bot right\\n                ) {\\n                    bottomOffset++;\\n                } else {\\n                    bottomFound = true;\\n                }\\n            }\\n            if (bottomFound && topFound && sideFound) allFound = true;\\n        }\\n\\n        if (topOffset != bottomOffset) {\\n            uint8 newHeight = topOffset + bottomOffset + 1;\\n            uint8 relativeCenter = (newHeight % 2 == 0 ? newHeight : newHeight + 1) / 2;\\n            uint8 newCenter = relativeCenter + center.b - 1 - topOffset;\\n            if (newCenter > center.b) {\\n                uint8 diff = newCenter - center.b;\\n                topOffset += diff;\\n                bottomOffset > diff ? bottomOffset = bottomOffset - diff : bottomOffset = diff - bottomOffset;\\n            } else {\\n                uint8 diff = center.b - newCenter;\\n                topOffset > diff ? topOffset = topOffset - diff : topOffset = diff - topOffset;\\n                bottomOffset += diff;\\n            }\\n            center.b = newCenter;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0c5e9cf79b7793bcce58b7ec7393121e0150e56a9603a8dfd7ffac9ce73552a7\",\"license\":\"MIT\"},\"src/logic/Calculator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport './Matrix.sol';\\nimport './Rgba.sol';\\nimport './Anchor.sol';\\n\\nimport '../types/Version.sol';\\nimport '../types/Pixel.sol';\\n\\nimport '../types/Types.sol';\\n\\nlibrary Calculator {\\n    using Rgba for Types.Rgba;\\n    using Matrix for Types.Matrix;\\n    using Pixel for uint256;\\n\\n    function combine(\\n        uint256 featureLen,\\n        uint8 width,\\n        Version.Memory[][] memory versions\\n    ) internal pure returns (Types.Matrix memory) {\\n        Types.Canvas memory canvas;\\n        canvas.matrix = Matrix.create(width, width);\\n        canvas.receivers = new Types.Anchor[](featureLen);\\n\\n        Types.Coordinate memory center = Types.Coordinate({a: width / 2 + 1, b: width / 2 + 1, exists: true});\\n\\n        Types.Rlud memory r;\\n\\n        for (uint8 i = 0; i < featureLen; i++) {\\n            canvas.receivers[i] = Types.Anchor({coordinate: center, radii: r});\\n        }\\n\\n        canvas.matrix.width = width;\\n        canvas.matrix.height = width;\\n\\n        Types.Mix memory mix;\\n        mix.matrix = Matrix.create(width, width);\\n        mix.receivers = new Types.Anchor[](featureLen);\\n\\n        for (uint8 i = 0; i < versions.length; i++) {\\n            if (versions[i].length > 0) {\\n                Calculator.setMix(mix, versions[i], Calculator.pickVersionIndex(canvas, versions[i]));\\n\\n                Calculator.formatForCanvas(canvas, mix);\\n\\n                Calculator.postionForCanvas(canvas, mix);\\n\\n                Calculator.mergeToCanvas(canvas, mix);\\n\\n                Calculator.calculateReceivers(mix);\\n\\n                Calculator.updateReceivers(canvas, mix);\\n            }\\n        }\\n\\n        return canvas.matrix;\\n    }\\n\\n    function postionForCanvas(Types.Canvas memory canvas, Types.Mix memory mix) internal pure {\\n        Types.Anchor memory receiver = canvas.receivers[mix.feature];\\n        Types.Anchor memory anchor = mix.version.anchor;\\n\\n        mix.xoffset = receiver.coordinate.a > anchor.coordinate.a ? receiver.coordinate.a - anchor.coordinate.a : 0;\\n        mix.yoffset = receiver.coordinate.b > anchor.coordinate.b ? receiver.coordinate.b - anchor.coordinate.b : 0;\\n\\n        mix.xoffset++;\\n\\n        canvas.matrix.moveTo(mix.xoffset, mix.yoffset, mix.matrix.width, mix.matrix.height);\\n    }\\n\\n    function formatForCanvas(Types.Canvas memory canvas, Types.Mix memory mix) internal pure {\\n        Types.Anchor memory receiver = canvas.receivers[mix.feature];\\n        Types.Anchor memory anchor = mix.version.anchor;\\n\\n        if (mix.version.expanders.l != 0 && anchor.radii.l != 0 && anchor.radii.l <= receiver.radii.l) {\\n            uint8 amount = receiver.radii.l - anchor.radii.l;\\n            mix.matrix.addColumnsAt(mix.version.expanders.l - 1, amount);\\n            anchor.coordinate.a += amount;\\n            if (mix.version.expanders.r > 0) mix.version.expanders.r += amount;\\n        }\\n        if (mix.version.expanders.r != 0 && anchor.radii.r != 0 && anchor.radii.r <= receiver.radii.r) {\\n            mix.matrix.addColumnsAt(mix.version.expanders.r - 1, receiver.radii.r - anchor.radii.r);\\n        }\\n        if (mix.version.expanders.d != 0 && anchor.radii.d != 0 && anchor.radii.d <= receiver.radii.d) {\\n            uint8 amount = receiver.radii.d - anchor.radii.d;\\n            mix.matrix.addRowsAt(mix.version.expanders.d, amount);\\n            anchor.coordinate.b += amount;\\n            if (mix.version.expanders.u > 0) mix.version.expanders.u += amount;\\n        }\\n        if (mix.version.expanders.u != 0 && anchor.radii.u != 0 && anchor.radii.u <= receiver.radii.u) {\\n            mix.matrix.addRowsAt(mix.version.expanders.u, receiver.radii.u - anchor.radii.u);\\n        }\\n    }\\n\\n    function pickVersionIndex(Types.Canvas memory canvas, Version.Memory[] memory versions) internal pure returns (uint8) {\\n        require(versions.length == 1, 'CALC:PVI:0');\\n        if (versions.length == 1) {\\n            return 0;\\n        }\\n        // uint8 index = uint8(versions.length) - 1;\\n        //\\n        // uint256 feature = (versions[0].data >> 75) & ShiftLib.mask(3);\\n\\n        // while (index > 0) {\\n        // uint256 bits = (versions[index].data >> 27) & ShiftLib.mask(24);\\n        // Types.Rlud memory anchorRadii = Types.Rlud({\\n        // r: uint8((bits >> 18) & ShiftLib.mask(6)),\\n        // l: uint8((bits >> 12) & ShiftLib.mask(6)),\\n        // u: uint8((bits >> 6) & ShiftLib.mask(6)),\\n        // d: uint8((bits) & ShiftLib.mask(6)),\\n        // exists: true\\n        // });\\n\\n        // if (checkRluds(anchorRadii, canvas.receivers[feature].radii)) {\\n        // return index;\\n        // }\\n        // index = index - 1;\\n        // }\\n\\n        return 0;\\n    }\\n\\n    function checkRluds(Types.Rlud memory r1, Types.Rlud memory r2) internal pure returns (bool) {\\n        return (r1.r <= r2.r && r1.l <= r2.l) || (r1.u <= r2.u && r1.d <= r2.d);\\n    }\\n\\n    function setMix(\\n        Types.Mix memory res,\\n        Version.Memory[] memory versions,\\n        uint8 versionIndex\\n    ) internal pure {\\n        uint256 radiiBits = (versions[versionIndex].data >> 27) & ShiftLib.mask(24);\\n        uint256 expanderBits = (versions[versionIndex].data >> 3) & ShiftLib.mask(24);\\n\\n        (uint256 x, uint256 y) = Version.getAnchor(versions[versionIndex]);\\n\\n        (uint256 width, uint256 height) = Version.getWidth(versions[versionIndex]);\\n\\n        res.version.width = uint8(width);\\n        res.version.height = uint8(height);\\n        res.version.anchor = Types.Anchor({\\n            radii: Types.Rlud({\\n                r: uint8((radiiBits >> 18) & ShiftLib.mask(6)),\\n                l: uint8((radiiBits >> 12) & ShiftLib.mask(6)),\\n                u: uint8((radiiBits >> 6) & ShiftLib.mask(6)),\\n                d: uint8((radiiBits >> 0) & ShiftLib.mask(6)),\\n                exists: true\\n            }),\\n            coordinate: Types.Coordinate({a: uint8(x), b: uint8(y), exists: true})\\n        });\\n        res.version.expanders = Types.Rlud({\\n            r: uint8((expanderBits >> 18) & ShiftLib.mask(6)),\\n            l: uint8((expanderBits >> 12) & ShiftLib.mask(6)),\\n            u: uint8((expanderBits >> 6) & ShiftLib.mask(6)),\\n            d: uint8((expanderBits >> 0) & ShiftLib.mask(6)),\\n            exists: true\\n        });\\n        res.version.calculatedReceivers = new Types.Coordinate[](8);\\n\\n        res.version.staticReceivers = new Types.Coordinate[](8);\\n\\n        for (uint256 i = 0; i < 8; i++) {\\n            (uint256 _x, uint256 _y, bool exists) = Version.getReceiverAt(versions[versionIndex], i, false);\\n            if (exists) {\\n                res.version.staticReceivers[i].a = uint8(_x);\\n                res.version.staticReceivers[i].b = uint8(_y);\\n                res.version.staticReceivers[i].exists = true;\\n            }\\n        }\\n\\n        for (uint256 i = 0; i < 8; i++) {\\n            (uint256 _x, uint256 _y, bool exists) = Version.getReceiverAt(versions[versionIndex], i, true);\\n            if (exists) {\\n                res.version.calculatedReceivers[i].a = uint8(_x);\\n                res.version.calculatedReceivers[i].b = uint8(_y);\\n                res.version.calculatedReceivers[i].exists = true;\\n            }\\n        }\\n\\n        // TODO - receivers?\\n        res.xoffset = 0;\\n        res.yoffset = 0;\\n        res.receivers = new Types.Anchor[](res.receivers.length);\\n        res.feature = uint8((versions[versionIndex].data >> 75) & ShiftLib.mask(3));\\n        res.matrix.set(versions[versionIndex], width, height);\\n    }\\n\\n    function updateReceivers(Types.Canvas memory canvas, Types.Mix memory mix) internal pure {\\n        for (uint8 i = 0; i < mix.receivers.length; i++) {\\n            Types.Anchor memory m = mix.receivers[i];\\n            if (m.coordinate.exists) {\\n                m.coordinate.a += mix.xoffset;\\n                m.coordinate.b += mix.yoffset;\\n                canvas.receivers[i] = m;\\n            }\\n        }\\n    }\\n\\n    function mergeToCanvas(Types.Canvas memory canvas, Types.Mix memory mix) internal pure {\\n        while (canvas.matrix.next() && mix.matrix.next()) {\\n            uint256 canvasPixel = canvas.matrix.current();\\n            uint256 mixPixel = mix.matrix.current();\\n\\n            if (mixPixel.e() && mixPixel.z() >= canvasPixel.z()) {\\n                canvas.matrix.setCurrent(Rgba.combine(canvasPixel, mixPixel));\\n            }\\n        }\\n        canvas.matrix.moveBack();\\n        canvas.matrix.resetIterator();\\n        mix.matrix.resetIterator();\\n    }\\n\\n    function calculateReceivers(Types.Mix memory mix) internal pure {\\n        Anchor.convertReceiversToAnchors(mix);\\n    }\\n}\\n\",\"keccak256\":\"0xaa1a4054a861e7ca0227ab02b40d67b572daf0445bd7748acb9960c115df9fd1\",\"license\":\"MIT\"},\"src/logic/Matrix.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {Rgba} from '../logic/Rgba.sol';\\n\\nimport {Version} from '../types/Version.sol';\\nimport {Types} from '../types/Types.sol';\\n\\nlibrary Matrix {\\n    using Rgba for Types.Rgba;\\n    using Version for Version.Memory;\\n\\n    function create(uint8 width, uint8 height) internal pure returns (Types.Matrix memory res) {\\n        require(width % 2 == 1 && height % 2 == 1, 'ML:C:0');\\n\\n        Version.initBigMatrix(res.version, width);\\n        res.version.setWidth(width, height);\\n    }\\n\\n    function moveTo(\\n        Types.Matrix memory matrix,\\n        uint8 xoffset,\\n        uint8 yoffset,\\n        uint8 width,\\n        uint8 height\\n    ) internal pure {\\n        matrix.currentUnsetX = xoffset;\\n        matrix.currentUnsetY = yoffset;\\n        matrix.startX = xoffset;\\n        matrix.width = width + xoffset;\\n        matrix.height = height + yoffset;\\n    }\\n\\n    function next(Types.Matrix memory matrix) internal pure returns (bool res) {\\n        res = next(matrix, matrix.width);\\n    }\\n\\n    function next(Types.Matrix memory matrix, uint8 width) internal pure returns (bool res) {\\n        if (matrix.init) {\\n            if (width <= matrix.currentUnsetX + 1) {\\n                if (matrix.height == matrix.currentUnsetY + 1) {\\n                    return false;\\n                }\\n                matrix.currentUnsetX = matrix.startX; // 0 by default\\n                matrix.currentUnsetY++;\\n            } else {\\n                matrix.currentUnsetX++;\\n            }\\n        } else {\\n            matrix.init = true;\\n        }\\n        res = true;\\n    }\\n\\n    function current(Types.Matrix memory matrix) internal pure returns (uint256 res) {\\n        res = matrix.version.getBigMatrixPixelAt(matrix.currentUnsetX, matrix.currentUnsetY);\\n    }\\n\\n    function setCurrent(Types.Matrix memory matrix, uint256 pixel) internal pure {\\n        matrix.version.setBigMatrixPixelAt(matrix.currentUnsetX, matrix.currentUnsetY, pixel);\\n    }\\n\\n    function resetIterator(Types.Matrix memory matrix) internal pure {\\n        matrix.currentUnsetX = 0;\\n        matrix.currentUnsetY = 0;\\n        matrix.startX = 0;\\n        matrix.init = false;\\n    }\\n\\n    function moveBack(Types.Matrix memory matrix) internal pure {\\n        (uint256 width, uint256 height) = matrix.version.getWidth();\\n        matrix.width = uint8(width);\\n        matrix.height = uint8(height);\\n    }\\n\\n    function set(\\n        Types.Matrix memory matrix,\\n        Version.Memory memory data,\\n        uint256 groupWidth,\\n        uint256 groupHeight\\n    ) internal pure {\\n        matrix.height = uint8(groupHeight);\\n\\n        for (uint256 y = 0; y < groupHeight; y++) {\\n            for (uint256 x = 0; x < groupWidth; x++) {\\n                next(matrix, uint8(groupWidth));\\n                uint256 col = Version.getPixelAt(data, x, y);\\n                if (col != 0) {\\n                    (uint256 yo, , ) = Version.getPalletColorAt(data, col);\\n\\n                    setCurrent(matrix, yo);\\n                } else {\\n                    setCurrent(matrix, 0x0000000000);\\n                }\\n            }\\n        }\\n\\n        matrix.width = uint8(groupWidth);\\n\\n        resetIterator(matrix);\\n    }\\n\\n    function addRowsAt(\\n        Types.Matrix memory matrix,\\n        uint8 index,\\n        uint8 amount\\n    ) internal pure {\\n        for (uint256 i = 0; i < matrix.height; i++) {\\n            for (uint256 j = matrix.height; j > index; j--) {\\n                if (j < index) break;\\n                matrix.version.setBigMatrixPixelAt(i, j + amount, matrix.version.getBigMatrixPixelAt(i, j));\\n            }\\n            // \\\"<=\\\" is because this loop needs to run [amount] times\\n            for (uint256 j = index + 1; j <= index + amount; j++) {\\n                matrix.version.setBigMatrixPixelAt(i, j, matrix.version.getBigMatrixPixelAt(i, index));\\n            }\\n        }\\n        matrix.height += amount;\\n    }\\n\\n    function addColumnsAt(\\n        Types.Matrix memory matrix,\\n        uint8 index,\\n        uint8 amount\\n    ) internal pure {\\n        // require(index < matrix.data[0].length, 'MAT:ACA:0');\\n        for (uint256 i = 0; i < matrix.width; i++) {\\n            for (uint256 j = matrix.width; j > index; j--) {\\n                if (j < index) break;\\n                matrix.version.setBigMatrixPixelAt(j + amount, i, matrix.version.getBigMatrixPixelAt(j, i));\\n            }\\n            // \\\"<=\\\" is because this loop needs to run [amount] times\\n            for (uint256 j = index + 1; j <= index + amount; j++) {\\n                matrix.version.setBigMatrixPixelAt(j, i, matrix.version.getBigMatrixPixelAt(index, i));\\n            }\\n        }\\n        matrix.width += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x54c2c1c17ce6eb6e3f956f0bc16f1e9a66816457e9684dad23e4aaf70ff7d70f\",\"license\":\"MIT\"},\"src/logic/Rgba.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {Pixel} from '../types/Pixel.sol';\\n\\nlibrary Rgba {\\n    using Pixel for uint256;\\n\\n    function combine(uint256 base, uint256 mix) internal pure returns (uint256 res) {\\n        return mix;\\n        // if (mix.a() == 255 || base.a() == 0) {\\n        //     res = mix;\\n        //     return res;\\n        // }\\n        // // FIXME - i am pretty sure there is a bug here that causes the non-color pixel data to be deleted\\n        // res |= uint256((base.r() * (255 - mix.a()) + mix.r() * mix.a()) / 255) << 19;\\n        // res |= uint256((base.g() * (255 - mix.a()) + mix.g() * mix.a()) / 255) << 11;\\n        // res |= uint256((base.b() * (255 - mix.a()) + mix.b() * mix.a()) / 255) << 3;\\n        // res |= 0x7;\\n    }\\n}\\n\",\"keccak256\":\"0xc562948f12328168d8e7dda4b3e34a37b3da726e560c3a4dc33abacabd687dab\",\"license\":\"MIT\"},\"src/types/Pixel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {SafeCastLib} from '../libraries/SafeCastLib.sol';\\nimport {ShiftLib} from '../libraries/ShiftLib.sol';\\n\\nlibrary Pixel {\\n    using SafeCastLib for uint256;\\n\\n    function safePack(\\n        uint256 _rgb,\\n        uint256 _a,\\n        uint256 _id,\\n        uint256 _zindex,\\n        uint256 _feature\\n    ) internal pure returns (uint256 res) {\\n        unchecked {\\n            res |= uint256(_feature.safe3()) << 39;\\n            res |= uint256(_zindex.safe4()) << 35;\\n            res |= uint256(_id.safe8()) << 27;\\n            res |= uint256(_rgb) << 3;\\n            res |= uint256(compressA(_a.safe8()));\\n        }\\n    }\\n\\n    function unsafePack(\\n        uint256 _rgb,\\n        uint256 _a,\\n        uint256 _id,\\n        uint256 _zindex,\\n        uint256 _feature\\n    ) internal pure returns (uint256 res) {\\n        unchecked {\\n            res |= _feature << 39;\\n            res |= _zindex << 35;\\n            res |= _id << 27;\\n            res |= _rgb << 3;\\n            res |= compressA(uint8(_a));\\n        }\\n    }\\n\\n    function rgba(uint256 input) internal pure returns (uint256 res) {\\n        return ((input << 5) & 0xffffff_00) | a(input);\\n    }\\n\\n    function r(uint256 input) internal pure returns (uint256 res) {\\n        res = (input >> 19) & 0xff;\\n    }\\n\\n    function g(uint256 input) internal pure returns (uint256 res) {\\n        res = (input >> 11) & 0xff;\\n    }\\n\\n    function b(uint256 input) internal pure returns (uint256 res) {\\n        res = (input >> 3) & 0xff;\\n    }\\n\\n    // 3 bits\\n    function a(uint256 input) internal pure returns (uint256 res) {\\n        res = decompressA(uint8(input & 0x7));\\n    }\\n\\n    // this is 1-8 so 3 bits\\n    function id(uint256 input) internal pure returns (uint256 res) {\\n        res = (input >> 27) & 0xff;\\n    }\\n\\n    // 18 3,3,4 && 8\\n    // this is 1-16 so 4 bits\\n    function z(uint256 input) internal pure returns (uint256 res) {\\n        res = (input >> 35) & 0xf;\\n    }\\n\\n    // this is 1-8 so 3 bits\\n    function f(uint256 input) internal pure returns (uint256 res) {\\n        res = (input >> 39) & 0x7;\\n    }\\n\\n    /// @notice check for if a pixel exists\\n    /// @dev for a pixel to exist a must be > 0, so we can safely assume that if we see\\n    /// no data it is empty or a transparent pixel we do not need to process\\n    function e(uint256 input) internal pure returns (bool res) {\\n        res = input != 0x00;\\n    }\\n\\n    /// @notice converts an 8 bit (0-255) value into a 3 bit value (0-7)\\n    /// @dev a compressed value of 7 is equivilent to 255, and a compressed 0 is 0\\n    function compressA(uint256 input) internal pure returns (uint256 res) {\\n        return input.safe8() / 36;\\n    }\\n\\n    /// @notice converts an 8 bit value into a 3 bit value\\n    function decompressA(uint256 input) internal pure returns (uint256 res) {\\n        if (input == 7) return 255;\\n        else return input.safe3() * 36;\\n    }\\n}\\n\",\"keccak256\":\"0x86abc94661574fe3b206a469c0f05e113c3f434ffe5b6bc169ce88b636e98d8f\",\"license\":\"MIT\"},\"src/types/Types.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {Version as NewVersion} from '../types/Version.sol';\\n\\nlibrary Types {\\n    struct Rlud {\\n        bool exists;\\n        uint8 r;\\n        uint8 l;\\n        uint8 u;\\n        uint8 d;\\n    }\\n\\n    struct Rgba {\\n        uint8 r;\\n        uint8 g;\\n        uint8 b;\\n        uint8 a;\\n    }\\n\\n    struct Anchor {\\n        Rlud radii;\\n        Coordinate coordinate;\\n    }\\n\\n    struct Coordinate {\\n        uint8 a; // anchorId\\n        uint8 b; // yoffset\\n        bool exists;\\n    }\\n\\n    struct Version {\\n        uint8 width;\\n        uint8 height;\\n        Anchor anchor;\\n        // these must be in same order as canvas receivers, respectively\\n        Coordinate[] calculatedReceivers; // can be empty\\n        Coordinate[] staticReceivers; // can be empty\\n        Rlud expanders;\\n        bytes data;\\n    }\\n\\n    struct Canvas {\\n        Matrix matrix;\\n        Anchor[] receivers;\\n    }\\n\\n    struct Mix {\\n        uint8 feature;\\n        Version version;\\n        Matrix matrix;\\n        Anchor[] receivers;\\n        uint8 yoffset;\\n        uint8 xoffset;\\n    }\\n\\n    struct Matrix {\\n        uint8 width;\\n        uint8 height;\\n        NewVersion.Memory version;\\n        uint8 currentUnsetX;\\n        uint8 currentUnsetY;\\n        bool init;\\n        uint8 startX;\\n    }\\n}\\n\",\"keccak256\":\"0x47e33f18fa60b26856ec9185781093c18b2f958f3cfaa86dcdbd5e7c5a8f45e2\",\"license\":\"MIT\"},\"src/types/Version.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {ShiftLib} from '../libraries/ShiftLib.sol';\\nimport {BitReader} from '../libraries/BitReader.sol';\\nimport {SafeCastLib} from '../libraries/SafeCastLib.sol';\\n\\nimport {Pixel} from '../types/Pixel.sol';\\n\\nimport '../_test/utils/console.sol';\\n\\nlibrary Version {\\n    using BitReader for BitReader.Memory;\\n    using SafeCastLib for uint256;\\n\\n    struct Memory {\\n        uint256[] pallet;\\n        uint256[] minimatrix;\\n        uint256[] bigmatrix;\\n        uint256 receivers;\\n        uint256 data;\\n    }\\n    event log_named_bytes32(string key, bytes32 val);\\n\\n    function parsePallet(\\n        BitReader.Memory memory reader,\\n        uint256 id,\\n        uint256 feature\\n    ) internal view returns (uint256[] memory res) {\\n        uint256 palletLength = reader.select(4) + 1;\\n\\n        res = new uint256[](palletLength + 1);\\n\\n        for (uint256 i = 0; i < palletLength; i++) {\\n            // uint256 working = 0;\\n\\n            // 4 bits: zindex\\n            // working |= (reader.select(4) << 32);\\n            uint256 z = reader.select(4);\\n\\n            uint256 color;\\n\\n            uint256 selecta = reader.select(1);\\n            if (selecta == 1) {\\n                color = 0x000000;\\n            } else {\\n                uint256 r = reader.select(8);\\n                uint256 g = reader.select(8);\\n                uint256 b = reader.select(8);\\n\\n                color = (r << 16) | (g << 8) | b;\\n            }\\n\\n            // // 1 or 8 bits: a\\n            uint256 a = (reader.select(1) == 0x1 ? 0xff : reader.select(8));\\n\\n            res[i + 1] = Pixel.safePack(color, a, id, z, feature);\\n        }\\n    }\\n\\n    function parseData(\\n        BitReader.Memory memory reader,\\n        uint256 feature,\\n        uint8[] memory xovers,\\n        uint8[] memory yovers\\n    ) internal pure returns (uint256 res) {\\n        // 12 bits: coordinate - anchor x and y\\n\\n        res |= feature << 75;\\n\\n        uint256 width = reader.select(6);\\n        uint256 height = reader.select(6);\\n\\n        res |= height << 69; // heighth and width\\n        res |= width << 63;\\n\\n        uint256 anchorX = reader.select(6);\\n        uint256 anchorY = reader.select(6);\\n\\n        if (xovers.length == 8 && yovers.length == 8 && (xovers[feature] != 0 || yovers[feature] != 0)) {\\n            res |= uint256(yovers[feature]) << 57;\\n            res |= uint256(xovers[feature]) << 51;\\n        } else {\\n            // 12 bits: coordinate - anchor x and y\\n            res |= anchorX << 51;\\n            res |= anchorY << 57;\\n        }\\n\\n        // 1 or 25 bits: rlud - radii\\n        res |= (reader.select(1) == 0x1 ? 0x000000 : reader.select(24)) << 27;\\n\\n        // 1 or 25 bits: rlud - expanders\\n        res |= (reader.select(1) == 0x1 ? 0x000000 : reader.select(24)) << 3;\\n    }\\n\\n    function parseReceivers(BitReader.Memory memory reader) internal pure returns (uint256 res) {\\n        uint256 receiversLength = reader.select(1) == 0x1 ? 0x1 : reader.select(4);\\n\\n        for (uint256 j = 0; j < receiversLength; j++) {\\n            uint256 receiver = 0;\\n\\n            uint256 yOrYOffset = reader.select(6);\\n\\n            uint256 xOrPreset = reader.select(6);\\n\\n            // rFeature\\n            uint256 rFeature = reader.select(3);\\n\\n            uint256 calculated = reader.select(1);\\n\\n            if (calculated == 0x1) {\\n                receiver |= yOrYOffset << 6;\\n                receiver |= xOrPreset;\\n            } else {\\n                receiver |= xOrPreset << 6;\\n                receiver |= yOrYOffset;\\n            }\\n\\n            receiver <<= ((rFeature * 12) + (calculated == 0x1 ? 128 : 0));\\n\\n            res |= receiver;\\n        }\\n    }\\n\\n    function parseMiniMatrix(\\n        BitReader.Memory memory reader,\\n        uint256 height,\\n        uint256 width\\n    ) internal pure returns (uint256[] memory res) {\\n        uint256 groupsLength = reader.select(1) == 0x1 ? reader.select(8) + 1 : reader.select(16) + 1;\\n\\n        res = new uint256[]((height * width) / 64 + 1);\\n\\n        uint256 index = 0;\\n\\n        for (uint256 a = 0; a < groupsLength; a++) {\\n            uint256 len = reader.select(2) + 1;\\n\\n            if (len == 4) len = reader.select(4) + 4;\\n\\n            uint256 key = reader.select(4);\\n\\n            for (uint256 i = 0; i < len; i++) {\\n                res[index / 64] |= (key << (4 * (index % 64)));\\n                index++;\\n            }\\n        }\\n    }\\n\\n    function getReceiverAt(\\n        Memory memory m,\\n        uint256 index,\\n        bool calculated\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint256 x,\\n            uint256 y,\\n            bool exists\\n        )\\n    {\\n        uint256 data = m.receivers >> (index * 12 + (calculated ? 128 : 0));\\n\\n        data &= ShiftLib.mask(12);\\n\\n        x = data & ShiftLib.mask(6);\\n        y = data >> 6;\\n\\n        exists = x != 0 || y != 0;\\n    }\\n\\n    function setReceiverAt(\\n        Memory memory m,\\n        uint256 index,\\n        bool calculated,\\n        uint256 x,\\n        uint256 y\\n    ) internal pure returns (uint256 res) {\\n        // yOrYOffset\\n        res |= y << 6;\\n\\n        //xOrPreset\\n        res |= x;\\n\\n        m.receivers |= res << ((index * 12) + (calculated ? 128 : 0));\\n    }\\n\\n    function setOffset(\\n        Memory memory m,\\n        bool negX,\\n        uint256 diffX,\\n        bool negY,\\n        uint256 diffY\\n    ) internal pure {\\n        m.data |= ((((diffX & 0xff) << 1) | (((negX ? 0x1 : 0x0)))) << 85);\\n        m.data |= ((((diffY & 0xff) << 1) | ((((negY ? 0x1 : 0x0))))) << 94);\\n    }\\n\\n    function getOffset(Memory memory m)\\n        internal\\n        pure\\n        returns (\\n            bool negX,\\n            uint256 diffX,\\n            bool negY,\\n            uint256 diffY\\n        )\\n    {\\n        uint256 data = m.data;\\n        negX = (data >> 85) & 0x1 == 1;\\n        diffX = (data >> 86) & 0xff;\\n        negY = (data >> 94) & 0x1 == 1;\\n        diffY = (data >> 95) & 0xff;\\n    }\\n\\n    function setZ(Memory memory m, uint256 z) internal pure {\\n        require(z <= 0xf, 'VERS:SETZ:0');\\n        m.data |= z << 78;\\n    }\\n\\n    function getZ(Memory memory m) internal pure returns (uint256 res) {\\n        res = (m.data >> 78) & 0xf;\\n    }\\n\\n    function setFeature(Memory memory m, uint256 z) internal pure {\\n        require(z <= ShiftLib.mask(3), 'VERS:SETF:0');\\n        m.data &= ShiftLib.fullsubmask(3, 75);\\n        m.data |= (z << 75);\\n    }\\n\\n    function getFeature(Memory memory m) internal pure returns (uint256 res) {\\n        res = (m.data >> 75) & ShiftLib.mask(3);\\n    }\\n\\n    function getWidth(Memory memory m) internal pure returns (uint256 width, uint256 height) {\\n        // yOrYOffset\\n        width = (m.data >> 63) & ShiftLib.mask(6);\\n        height = (m.data >> 69) & ShiftLib.mask(6);\\n    }\\n\\n    function setWidth(\\n        Memory memory m,\\n        uint256 w,\\n        uint256 h\\n    ) internal pure {\\n        require(w <= ShiftLib.mask(6), 'VERS:SETW:0');\\n        require(h <= ShiftLib.mask(6), 'VERS:SETW:1');\\n\\n        m.data &= ShiftLib.fullsubmask(12, 63);\\n\\n        m.data |= (w << 63);\\n        m.data |= (h << 69);\\n    }\\n\\n    function getAnchor(Memory memory m) internal pure returns (uint256 x, uint256 y) {\\n        // yOrYOffset\\n        x = (m.data >> 51) & ShiftLib.mask(6);\\n        y = (m.data >> 57) & ShiftLib.mask(6);\\n    }\\n\\n    function getOverrides(Memory memory m)\\n        internal\\n        pure\\n        returns (\\n            bool shouldOverride,\\n            uint8 x,\\n            uint8 y\\n        )\\n    {\\n        // yOrYOffset\\n        x = uint8((m.data >> 78) & ShiftLib.mask(6));\\n        y = uint8((m.data >> 84) & ShiftLib.mask(6));\\n\\n        shouldOverride = x != 0 && y != 0;\\n    }\\n\\n    function getPixelAt(\\n        Memory memory m,\\n        uint256 x,\\n        uint256 y\\n    ) internal pure returns (uint256 palletKey) {\\n        (uint256 width, ) = getWidth(m);\\n        uint256 index = x + (y * width);\\n\\n        if (index / 64 >= m.minimatrix.length) return 0x0;\\n\\n        palletKey = (m.minimatrix[index / 64] >> (4 * (index % 64))) & 0xf;\\n    }\\n\\n    function getPalletColorAt(Memory memory m, uint256 index)\\n        internal\\n        pure\\n        returns (\\n            uint256 res,\\n            uint256 color,\\n            uint256 zindex\\n        )\\n    {\\n        // res = (m.pallet[index / 7] >> (36 * (index % 7))) & ShiftLib.mask(36);\\n        res = m.pallet[index];\\n\\n        color = Pixel.rgba(res);\\n\\n        zindex = Pixel.z(res);\\n    }\\n\\n    function initBigMatrix(Memory memory m, uint256 width) internal pure {\\n        m.bigmatrix = new uint256[](((width * width) / 6) + 2);\\n    }\\n\\n    function setBigMatrixPixelAt(\\n        Memory memory m,\\n        uint256 x,\\n        uint256 y,\\n        uint256 color\\n    ) internal pure {\\n        (uint256 width, ) = getWidth(m);\\n\\n        uint256 index = x + (y * width);\\n\\n        setBigMatrixPixelAt(m, index, color);\\n    }\\n\\n    function setBigMatrixPixelAt(\\n        Memory memory m,\\n        uint256 index,\\n        uint256 color\\n    ) internal pure {\\n        if (m.bigmatrix.length > index / 6) {\\n            uint8 offset = (42 * (index % 6)).safe8();\\n            m.bigmatrix[index / 6] &= ShiftLib.fullsubmask(42, offset);\\n            m.bigmatrix[index / 6] |= (color << offset);\\n        }\\n    }\\n\\n    function getBigMatrixPixelAt(\\n        Memory memory m,\\n        uint256 x,\\n        uint256 y\\n    ) internal pure returns (uint256 res) {\\n        (uint256 width, ) = getWidth(m);\\n\\n        (res, ) = getPixelAt(m.bigmatrix, x, y, width);\\n    }\\n\\n    function getPixelAt(\\n        uint256[] memory arr,\\n        uint256 x,\\n        uint256 y,\\n        uint256 width\\n    ) internal pure returns (uint256 res, uint256 row) {\\n        uint256 index = x + (y * width);\\n\\n        if (index / 6 >= arr.length) return (0, 0);\\n\\n        row = (arr[index / 6] >> (42 * (index % 6)));\\n\\n        res = row & ShiftLib.mask(42);\\n    }\\n\\n    function bigMatrixHasPixelAt(\\n        Memory memory m,\\n        uint256 x,\\n        uint256 y\\n    ) internal pure returns (bool res) {\\n        uint256 pix = getBigMatrixPixelAt(m, x, y);\\n\\n        res = pix & 0x7 != 0x00;\\n    }\\n\\n    function setArrayLength(uint256[] memory input, uint256 size) internal pure {\\n        assembly {\\n            let ptr := mload(input)\\n            ptr := size\\n            mstore(input, ptr)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x78bfa87e8ebc2a8194bc3b9149ac791d8d14c0ba3b52b9ddeb25d799ed6e52c9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200002090620000b0565b604051809103906000f0801580156200003d573d6000803e3d6000fd5b50600080546001600160a01b0319166001600160a01b03929092169190911790556040516200006c90620000be565b604051809103906000f08015801562000089573d6000803e3d6000fd5b50600180546001600160a01b0319166001600160a01b0392909216919091179055620000cc565b615ca08062001c5783390190565b61163a80620078f783390190565b611b7b80620000dc6000396000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c80635f6d703111610076578063928012301161005b578063928012301461016d578063b0ef3d771461018d578063c1a9a508146101a057600080fd5b80635f6d70311461012d5780636f2ddd931461014d57600080fd5b80631aa3a008146100a8578063276b99f5146100da578063290966aa146100fa578063448e347f1461011a575b600080fd5b6100b06101b3565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100ed6100e8366004611037565b6102a7565b6040516100d19190611160565b61010d610108366004611173565b6104be565b6040516100d191906113e5565b6100ed610128366004611445565b6107b3565b61014061013b366004611173565b610a6b565b6040516100d1919061153b565b6001546100b09073ffffffffffffffffffffffffffffffffffffffff1681565b6000546100b09073ffffffffffffffffffffffffffffffffffffffff1681565b61014061019b366004611173565b610b62565b6100b06101ae36600461154e565b610bda565b6001546040517fffffffffffffffffffffffffffffffffffffffff0000000000000000000000003360601b1660208201526000916102229173ffffffffffffffffffffffffffffffffffffffff9091169060340160405160208183030381529060405280519060200120610cd4565b6040517f19ab453c00000000000000000000000000000000000000000000000000000000815233600482015290915073ffffffffffffffffffffffffffffffffffffffff8216906319ab453c90602401600060405180830381600087803b15801561028c57600080fd5b505af11580156102a0573d6000803e3d6000fd5b5050505090565b606060006102b78a8a8a86610b62565b905073ffffffffffffffffffffffffffffffffffffffff8816156103d7576040517f72e9196700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8916906372e9196790610329908490879060040161156b565b60006040518083038186803b15801561034157600080fd5b505afa92505050801561039457506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261039191908101906115d5565b60015b6103ce573d8080156103c2576040519150601f19603f3d011682016040523d82523d6000602084013e6103c7565b606091505b50506103d7565b91506104b29050565b600054815160208301516040517fb9183b3100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9093169263b9183b319261043c9290918c908c908c908c9060040161160a565b60006040518083038186803b15801561045457600080fd5b505afa158015610468573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526104ae91908101906115d5565b9150505b98975050505050505050565b6104c6610e3b565b6040517f9b9173520000000000000000000000000000000000000000000000000000000081526004810185905273ffffffffffffffffffffffffffffffffffffffff861690639b9173529060240160006040518083038186803b15801561052c57600080fd5b505afa158015610540573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610586919081019061177c565b6020820181815260a09091018590525173ffffffffffffffffffffffffffffffffffffffff86166080909101526105bc85610bda565b6020820151516040517f36aa589d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff92909216916336aa589d91610614916004016118ed565b60006040518083038186803b15801561062c57600080fd5b505afa158015610640573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610686919081019061195b565b815273ffffffffffffffffffffffffffffffffffffffff8316156107ab5760208101516040517f39fed0c400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8516916339fed0c4916107009189918991908890600401611a0c565b60006040518083038186803b15801561071857600080fd5b505afa92505050801561076b57506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610768919081019061177c565b60015b6107a5573d808015610799576040519150601f19603f3d011682016040523d82523d6000602084013e61079e565b606091505b50506107ab565b60208201525b949350505050565b606060006107c389898986610b62565b905073ffffffffffffffffffffffffffffffffffffffff8716156108e3576040517f8eba997800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff881690638eba997890610835908490879060040161156b565b60006040518083038186803b15801561084d57600080fd5b505afa9250505080156108a057506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261089d91908101906115d5565b60015b6108da573d8080156108ce576040519150601f19603f3d011682016040523d82523d6000602084013e6108d3565b606091505b50506108e3565b9150610a609050565b60008054602083015183516040517fb9183b3100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9093169363f6e35446938b928b92879263b9183b31926109579290918891906001908290829060040161160a565b60006040518083038186803b15801561096f57600080fd5b505afa158015610983573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526109c991908101906115d5565b896040518663ffffffff1660e01b81526004016109ea959493929190611a53565b60006040518083038186803b158015610a0257600080fd5b505afa158015610a16573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610a5c91908101906115d5565b9150505b979650505050505050565b610a73610e3b565b6000610a8186868686610b62565b6000805482516040517f5c60ee9200000000000000000000000000000000000000000000000000000000815293945073ffffffffffffffffffffffffffffffffffffffff90911692635c60ee9292610adc9291600401611ab5565b60006040518083038186803b158015610af457600080fd5b505afa158015610b08573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610b4e9190810190611ad7565b825260209081015190820152949350505050565b610b6a610e3b565b6000610b78868686866104be565b600054815160208301516040517f4d67139300000000000000000000000000000000000000000000000000000000815293945073ffffffffffffffffffffffffffffffffffffffff90921692634d67139392610adc9291603f90600401611b0c565b6001546040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606084901b166020820152600091610c4a9173ffffffffffffffffffffffffffffffffffffffff9091169060340160405160208183030381529060405280519060200120610db8565b905073ffffffffffffffffffffffffffffffffffffffff81163b610ccf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600360248201527f503a30000000000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b919050565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528360601b60148201527f5af43d82803e903d91602b57fd5bf300000000000000000000000000000000006028820152826037826000f591505073ffffffffffffffffffffffffffffffffffffffff8116610db2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f455243313136373a2063726561746532206661696c65640000000000000000006044820152606401610cc6565b92915050565b6000610e348383306040517f3d602d80600a3d3981f3363d3d373d3d3d363d730000000000000000000000008152606093841b60148201527f5af43d82803e903d91602b57fd5bf3ff000000000000000000000000000000006028820152921b6038830152604c8201526037808220606c830152605591012090565b9392505050565b604051806040016040528060608152602001610eb960405180610140016040528060608152602001606081526020016060815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001606081526020016060815260200160608152602001606081525090565b905290565b73ffffffffffffffffffffffffffffffffffffffff81168114610ee057600080fd5b50565b80358015158114610ccf57600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610140810167ffffffffffffffff81118282101715610f4657610f46610ef3565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715610f9357610f93610ef3565b604052919050565b600067ffffffffffffffff821115610fb557610fb5610ef3565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b600082601f830112610ff257600080fd5b813561100561100082610f9b565b610f4c565b81815284602083860101111561101a57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600080600080610100898b03121561105457600080fd5b883561105f81610ebe565b975060208901359650604089013561107681610ebe565b955061108460608a01610ee3565b945061109260808a01610ee3565b93506110a060a08a01610ee3565b92506110ae60c08a01610ee3565b915060e089013567ffffffffffffffff8111156110ca57600080fd5b6110d68b828c01610fe1565b9150509295985092959890939650565b60005b838110156111015781810151838201526020016110e9565b83811115611110576000848401525b50505050565b6000815180845261112e8160208601602086016110e6565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526000610e346020830184611116565b6000806000806080858703121561118957600080fd5b843561119481610ebe565b93506020850135925060408501356111ab81610ebe565b9150606085013567ffffffffffffffff8111156111c757600080fd5b6111d387828801610fe1565b91505092959194509250565b600081518084526020808501945080840160005b8381101561120f578151875295820195908201906001016111f3565b509495945050505050565b600081518084526020808501808196508360051b8101915082860160005b858110156112625782840389526112508483516111df565b98850198935090840190600101611238565b5091979650505050505050565b600081518084526020808501945080840160005b8381101561120f57815160ff1687529582019590820190600101611283565b600081518084526020808501808196508360051b8101915082860160005b858110156112625782840389526112d8848351611116565b988501989350908401906001016112c0565b600061014082518185526113008286018261126f565b9150506020830151848203602086015261131a828261126f565b91505060408301518482036040860152611334828261126f565b915050606083015160608501526080830151611368608086018273ffffffffffffffffffffffffffffffffffffffff169052565b5060a083015160a085015260c083015184820360c086015261138a82826112a2565b91505060e083015184820360e08601526113a482826112a2565b91505061010080840151858303828701526113bf8382611116565b9250505061012080840151858303828701526113db8382611116565b9695505050505050565b602081526000825160406020840152611401606084018261121a565b905060208401517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe084830301604085015261143c82826112ea565b95945050505050565b600080600080600080600060e0888a03121561146057600080fd5b873561146b81610ebe565b965060208801359550604088013561148281610ebe565b9450606088013567ffffffffffffffff8082111561149f57600080fd5b6114ab8b838c01610fe1565b955060808a01359150808211156114c157600080fd5b6114cd8b838c01610fe1565b94506114db60a08b01610ee3565b935060c08a01359150808211156114f157600080fd5b506114fe8a828b01610fe1565b91505092959891949750929550565b600081516040845261152260408501826111df565b90506020830151848203602086015261143c82826112ea565b602081526000610e34602083018461150d565b60006020828403121561156057600080fd5b8135610e3481610ebe565b60408152600061157e604083018561150d565b828103602084015261143c8185611116565b600082601f8301126115a157600080fd5b81516115af61100082610f9b565b8181528460208386010111156115c457600080fd5b6107ab8260208301602087016110e6565b6000602082840312156115e757600080fd5b815167ffffffffffffffff8111156115fe57600080fd5b6107ab84828501611590565b60c08152600061161d60c08301896111df565b828103602084015261162f81896112ea565b9615156040840152505092151560608401529015156080830152151560a09091015292915050565b600067ffffffffffffffff82111561167157611671610ef3565b5060051b60200190565b600082601f83011261168c57600080fd5b8151602061169c61100083611657565b82815260059290921b840181019181810190868411156116bb57600080fd5b8286015b848110156116e657805160ff811681146116d95760008081fd5b83529183019183016116bf565b509695505050505050565b8051610ccf81610ebe565b600082601f83011261170d57600080fd5b8151602061171d61100083611657565b82815260059290921b8401810191818101908684111561173c57600080fd5b8286015b848110156116e657805167ffffffffffffffff8111156117605760008081fd5b61176e8986838b0101611590565b845250918301918301611740565b60006020828403121561178e57600080fd5b815167ffffffffffffffff808211156117a657600080fd5b9083019061014082860312156117bb57600080fd5b6117c3610f22565b8251828111156117d257600080fd5b6117de8782860161167b565b8252506020830151828111156117f357600080fd5b6117ff8782860161167b565b60208301525060408301518281111561181757600080fd5b6118238782860161167b565b6040830152506060830151606082015261183f608084016116f1565b608082015260a083015160a082015260c08301518281111561186057600080fd5b61186c878286016116fc565b60c08301525060e08301518281111561188457600080fd5b611890878286016116fc565b60e08301525061010080840151838111156118aa57600080fd5b6118b688828701611590565b82840152505061012080840151838111156118d057600080fd5b6118dc88828701611590565b918301919091525095945050505050565b602081526000610e34602083018461126f565b600082601f83011261191157600080fd5b8151602061192161100083611657565b82815260059290921b8401810191818101908684111561194057600080fd5b8286015b848110156116e65780518352918301918301611944565b6000602080838503121561196e57600080fd5b825167ffffffffffffffff8082111561198657600080fd5b818501915085601f83011261199a57600080fd5b81516119a861100082611657565b81815260059190911b830184019084810190888311156119c757600080fd5b8585015b838110156119ff578051858111156119e35760008081fd5b6119f18b89838a0101611900565b8452509186019186016119cb565b5098975050505050505050565b73ffffffffffffffffffffffffffffffffffffffff85168152836020820152608060408201526000611a4160808301856112ea565b8281036060840152610a608185611116565b60a081526000611a6660a08301886112ea565b8281036020840152611a788188611116565b90508281036040840152611a8c8187611116565b90508281036060840152611aa08186611116565b91505082151560808301529695505050505050565b604081526000611ac860408301856111df565b90508260208301529392505050565b600060208284031215611ae957600080fd5b815167ffffffffffffffff811115611b0057600080fd5b6107ab84828501611900565b606081526000611b1f606083018661121a565b8281036020840152611b3181866112ea565b91505060ff8316604083015294935050505056fea264697066735822122070abc9b32b834276e06a06f323fbf7bc750c3a4ef93cde054199f8ed6752e50364736f6c63430008090033608060405234801561001057600080fd5b50615c7f80620000216000396000f3fe608060405234801561001057600080fd5b50600436106100c95760003560e01c80637295e04611610081578063d8674cb71161005b578063d8674cb714610189578063daa68c21146101a9578063f6e35446146101bc57600080fd5b80637295e04614610150578063b9183b3114610163578063d7d9b57d1461017657600080fd5b80634d671393116100b25780634d6713931461010a578063577de07c1461012a5780635c60ee921461013d57600080fd5b806330375a35146100ce57806346eceb3a146100f7575b600080fd5b6100e16100dc36600461481e565b6101cf565b6040516100ee9190614887565b60405180910390f35b6100e161010536600461481e565b610237565b61011d610118366004614c50565b610278565b6040516100ee9190614cf6565b6100e161013836600461481e565b610324565b61011d61014b366004614d09565b610337565b61011d61015e366004614d4e565b61049d565b6100e1610171366004614d93565b6105fe565b6100e161018436600461481e565b6108df565b61019c610197366004614e38565b6108f2565b6040516100ee9190614ec0565b6100e16101b736600461481e565b610c7b565b6100e16101ca366004614ff3565b610c86565b60606040518060400160405280601d81526020017f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c00000081525061021083610eee565b6040516020016102219291906150b1565b6040516020818303038152906040529050919050565b60606040518060400160405280601a81526020017f646174613a696d6167652f7376672b786d6c3b6261736536342c00000000000081525061021083610eee565b606082606001516001146102ed576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600360248201527f563173000000000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b600061030285856020015186604001516108f2565b90506000610312600885846110c9565b60409081015101519695505050505050565b60608160405160200161022191906150e0565b606060008060005b8583815181106103515761035161514b565b602002602001015160001415610373578061036b816151a9565b9150506103fd565b600e8111156103b057600f600482901b17868361038f816151a9565b9450815181106103a1576103a161514b565b60209081029190910101525060005b8060048785815181106103c5576103c561514b565b6020026020010151901b178683806103dc906151a9565b9450815181106103ee576103ee61514b565b60209081029190910101525060005b8551610408846151a9565b9350831061033f57600e81111561044d57600f600482901b17868361042c816151a9565b94508151811061043e5761043e61514b565b60209081029190910101525060005b60f08651600161045d91906151e2565b600487901b8317911b178683610472816151a9565b9450815181106104845761048461514b565b6020908102919091010152508452508290505b92915050565b606060f082600184516104b091906151fa565b815181106104c0576104c061514b565b6020026020010151901c67ffffffffffffffff8111156104e2576104e26146e8565b60405190808252806020026020018201604052801561050b578160200160208202803683370190505b5090506000805b83518110156105f757600084828151811061052f5761052f61514b565b6020026020010151600f16905080600f14156105715760048583610552816151a9565b9450815181106105645761056461514b565b6020026020010151901c90505b60005b8181101561059c5783610586816151a9565b9450508080610594906151a9565b915050610574565b5060048583815181106105b1576105b161514b565b6020026020010151901c8484806105c7906151a9565b9550815181106105d9576105d961514b565b602090810291909101015250806105ef816151a9565b915050610512565b5050919050565b6060600061060c603f611405565b905060008182604051602001610623929190615211565b604051602081830303815290604052905085156106ae578060008961010001515111610684576040518060400160405280600481526020017f234646460000000000000000000000000000000000000000000000000000000081525061068b565b8861010001515b60405160200161069c929190615308565b60405160208183030381529060405290505b60006106ba8a89611410565b9050606060015b8251811015610749578281815181106106dc576106dc61514b565b602002602001015160200151600014156106f557610749565b818382815181106107085761070861514b565b60200260200101516000015160405160200161072592919061538a565b60405160208183030381529060405291508080610741906151a9565b9150506106c1565b50881561088b5760006040516020016107ab907f3c7374796c6520747970653d22746578742f63737322203e3c215b434441544181527f5b00000000000000000000000000000000000000000000000000000000000000602082015260210190565b604051602081830303815290604052905060005b600881101561086457808c60e00151511180156107fa57508b60e0015181815181106107ed576107ed61514b565b6020026020010151516000145b1561080457610852565b816108108260416151e2565b8d60e0015183815181106108265761082661514b565b6020026020010151604051602001610840939291906153e1565b60405160208183030381529060405291505b8061085c816151a9565b9150506107bf565b508082604051602001610878929190615441565b6040516020818303038152906040529150505b828160405160200161089e929190615499565b604051602081830303815290604052945085156108c5576108be85610237565b94506108d1565b6108ce85610324565b94505b505050509695505050505050565b606081604051602001610221919061551b565b6060835167ffffffffffffffff81111561090e5761090e6146e8565b60405190808252806020026020018201604052801561094157816020015b606081526020019060019003908161092c5790505b50905060005b8451811015610c73576000806109758784815181106109685761096861514b565b602002602001015161153c565b915091508115610986575050610c61565b610991816020611635565b6342069001146109fd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f4445433a50493a3000000000000000000000000000000000000000000000000060448201526064016102e4565b6000610a0a826003611635565b90506000610a19836008611635565b90506000610a2884838561182f565b90506000610a37856002611635565b610a429060016151e2565b90508067ffffffffffffffff811115610a5d57610a5d6146e8565b604051908082528060200260200182016040528015610ac057816020015b610aad6040518060a0016040528060608152602001606081526020016060815260200160008152602001600081525090565b815260200190600190039081610a7b5790505b50888881518110610ad357610ad361514b565b602002602001018190525060005b81811015610c5957610af586868d8d611994565b898981518110610b0757610b0761514b565b60200260200101518281518110610b2057610b2061514b565b60200260200101516080018181525050610b3986611b15565b898981518110610b4b57610b4b61514b565b60200260200101518281518110610b6457610b6461514b565b60200260200101516060018181525050600080610bc38b8b81518110610b8c57610b8c61514b565b60200260200101518481518110610ba557610ba561514b565b602002602001015160800151603f81811c81169260459290921c1690565b91509150610bd2888383611bfa565b8b8b81518110610be457610be461514b565b60200260200101518481518110610bfd57610bfd61514b565b602002602001015160200181905250848b8b81518110610c1f57610c1f61514b565b60200260200101518481518110610c3857610c3861514b565b60209081029190910101515250819050610c51816151a9565b915050610ae1565b505050505050505b80610c6b816151a9565b915050610947565b509392505050565b606061049782610eee565b606060005b60088160ff161015610d9a5781610d658860c001518360ff1681518110610cb457610cb461514b565b602002602001015189600001518460ff1681518110610cd557610cd561514b565b602002602001015160ff16600014610d2157610d1c8a600001518560ff1681518110610d0357610d0361514b565b602002602001015160ff1660088660ff16901b17611405565b610d58565b6040518060400160405280600481526020017f6e756c6c000000000000000000000000000000000000000000000000000000008152505b8460ff1660071415611d90565b604051602001610d769291906150b1565b60405160208183030381529060405291508080610d9290615586565b915050610c8b565b50610ddc6040518060400160405280600481526020017f6e616d6500000000000000000000000000000000000000000000000000000000815250866001611d90565b610e1d6040518060400160405280600b81526020017f6465736372697074696f6e000000000000000000000000000000000000000000815250866001611d90565b610e5e6040518060400160405280600581526020017f696d616765000000000000000000000000000000000000000000000000000000815250866001611d90565b610e9f6040518060400160405280600a81526020017f70726f7065727469657300000000000000000000000000000000000000000000815250856000611e0f565b604051602001610eb294939291906155a6565b60405160208183030381529060405290508115610ed957610ed2816101cf565b9050610ee5565b610ee2816108df565b90505b95945050505050565b6060815160001415610f0e57505060408051602081019091526000815290565b6000604051806060016040528060408152602001615c0a6040913990506000600384516002610f3d91906151e2565b610f479190615688565b610f5290600461569c565b90506000610f618260206151e2565b67ffffffffffffffff811115610f7957610f796146e8565b6040519080825280601f01601f191660200182016040528015610fa3576020820181803683370190505b509050818152600183018586518101602084015b818310156110115760039283018051603f601282901c811687015160f890811b8552600c83901c8216880151811b6001860152600683901c8216880151811b60028601529116860151901b93820193909352600401610fb7565b60038951066001811461102b5760028114611075576110bb565b7f3d3d0000000000000000000000000000000000000000000000000000000000007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe8301526110bb565b7f3d000000000000000000000000000000000000000000000000000000000000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8301525b509398975050505050505050565b6110d161455f565b6110d96145d2565b6110e38485611e76565b81528467ffffffffffffffff8111156110fe576110fe6146e8565b60405190808252806020026020018201604052801561118757816020015b6111746040805160e0810182526000918101828152606082018390526080820183905260a0820183905260c0820192909252908190815260408051606081018252600080825260208281018290529282015291015290565b81526020019060019003908161111c5790505b5060208201526040805160608101909152600090806111a76002886156d9565b6111b29060016156fb565b60ff1681526020016111c56002886156d9565b6111d09060016156fb565b60ff16815260016020918201526040805160a081018252600080825292810183905290810182905260608101829052608081018290529192505b878160ff1610156112615760405180604001604052808381526020018481525084602001518260ff16815181106112435761124361514b565b6020026020010181905250808061125990615586565b91505061120a565b50825160ff87169081905283516020015261127a6145f2565b6112848788611e76565b60408201528767ffffffffffffffff8111156112a2576112a26146e8565b60405190808252806020026020018201604052801561132b57816020015b6113186040805160e0810182526000918101828152606082018390526080820183905260a0820183905260c0820192909252908190815260408051606081018252600080825260208281018290529282015291015290565b8152602001906001900390816112c05790505b50606082015260005b86518160ff1610156113f5576000878260ff16815181106113575761135761514b565b60200260200101515111156113e3576113b282888360ff168151811061137f5761137f61514b565b60200260200101516113ad888b8660ff16815181106113a0576113a061514b565b6020026020010151611f35565b611fbd565b6113bc8583612561565b6113c6858361286a565b6113d08583612968565b6113d982612a4e565b6113e38583612a5a565b806113ed81615586565b915050611334565b50509151925050505b9392505050565b606061049782612b1f565b6060600061142284600080603f612c4f565b50604080518181526108208101825291925060019190816020015b60408051808201909152606081526000602082015281526020019060019003908161143d57905050925060005b603f8110156115335760008115611482576000611485565b60015b60ff1690505b603f8110156115015760006114a3888385603f612c4f565b5090506114af85612ce0565b6114b882612ce0565b14156114d157836114c8816151a9565b945050506114ef565b6114e886866114e087866151fa565b86888c612cfe565b9350600192505b806114f9816151a9565b91505061148b565b5061151a848461151285603f6151fa565b84868a612cfe565b600092508291508061152b816151a9565b91505061146a565b50505092915050565b600061156260405180606001604052806060815260200160008152602001600081525090565b82516115715760019150915091565b82815260026020820152825167ffffffffffffffff811115611595576115956146e8565b6040519080825280602002602001820160405280156115be578160200160208202803683370190505b50815282515b801561162f57838185516115d891906151fa565b815181106115e8576115e861514b565b6020026020010151826000015160018361160291906151fa565b815181106116125761161261514b565b60209081029190910101528061162781615720565b9150506115c4565b50915091565b60006001821b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01835180516000906116705761167061514b565b60200260200101511690508160ff1683600001516000815181106116965761169661514b565b6020026020010151901c83600001516000815181106116b7576116b761514b565b6020026020010181815250508160ff16836040018181516116d891906151e2565b9052506040830151608011610497576000600284602001516116fa9190615688565b845151909150811015611828576080846040015161171891906151fa565b8451805160009061172b5761172b61514b565b60209081029190910101805190911b905260006fffffffffffffffffffffffffffffffff85518051849081106117635761176361514b565b60200260200101511690506080856000015183815181106117865761178661514b565b60200260200101818151901c91508181525050608081901b85600001516000815181106117b5576117b561514b565b602002602001018181511791508181525050608085604001516117d891906151fa565b855180516000906117eb576117eb61514b565b6020908102919091018101805190921c909152850180519061180c826151a9565b8152505060808560400181815161182391906151fa565b905250505b5092915050565b6060600061183e856004611635565b6118499060016151e2565b90506118568160016151e2565b67ffffffffffffffff81111561186e5761186e6146e8565b604051908082528060200260200182016040528015611897578160200160208202803683370190505b50915060005b8181101561198b5760006118b2876004611635565b90506000806118c2896001611635565b905080600114156118d65760009150611916565b60006118e38a6008611635565b905060006118f28b6008611635565b905060006119018c6008611635565b905080600883901b601085901b171794505050505b60006119238a6001611635565b60011461193a576119358a6008611635565b61193d565b60ff5b905061194c83828b878c612e25565b876119588760016151e2565b815181106119685761196861514b565b602002602001018181525050505050508080611983906151a9565b91505061189d565b50509392505050565b604b83901b60006119a6866006611635565b905060006119b5876006611635565b604581901b93909317603f83901b1792905060006119d4886006611635565b905060006119e3896006611635565b9050865160081480156119f7575085516008145b8015611a475750868881518110611a1057611a1061514b565b602002602001015160ff166000141580611a475750858881518110611a3757611a3761514b565b602002602001015160ff16600014155b15611a9b576039868981518110611a6057611a6061514b565b602002602001015160ff16901b851794506033878981518110611a8557611a8561514b565b602002602001015160ff16901b85179450611aae565b603382901b85179450603981901b851794505b601b611abb8a6001611635565b600114611ad257611acd8a6018611635565b611ad5565b60005b901b94909417936003611ae98a6001611635565b600114611b0057611afb8a6018611635565b611b03565b60005b901b8517945050505050949350505050565b600080611b23836001611635565b600114611b3a57611b35836004611635565b611b3d565b60015b905060005b818110156105f757600080611b58866006611635565b90506000611b67876006611635565b90506000611b76886003611635565b90506000611b85896001611635565b90508060011415611ba157600684901b94909417821793611bae565b600683901b949094178317935b80600114611bbd576000611bc0565b60805b60ff16611bce83600c61569c565b611bd891906151e2565b85901b9450848817975050505050508080611bf2906151a9565b915050611b42565b60606000611c09856001611635565b600114611c2b57611c1b856010611635565b611c269060016151e2565b611c41565b611c36856008611635565b611c419060016151e2565b90506040611c4f848661569c565b611c599190615688565b611c649060016151e2565b67ffffffffffffffff811115611c7c57611c7c6146e8565b604051908082528060200260200182016040528015611ca5578160200160208202803683370190505b5091506000805b82811015611d86576000611cc1886002611635565b611ccc9060016151e2565b90508060041415611cf057611ce2886004611635565b611ced9060046151e2565b90505b6000611cfd896004611635565b905060005b82811015611d7057611d15604086615755565b611d2090600461569c565b82901b87611d2f604088615688565b81518110611d3f57611d3f61514b565b602090810291909101018051909117905284611d5a816151a9565b9550508080611d68906151a9565b915050611d02565b5050508080611d7e906151a9565b915050611cac565b5050509392505050565b6060838383611dae5760405180602001604052806000815250611de5565b6040518060400160405280600181526020017f2c000000000000000000000000000000000000000000000000000000000000008152505b604051602001611df793929190615769565b60405160208183030381529060405290509392505050565b6060838383611e2d5760405180602001604052806000815250611e64565b6040518060400160405280600181526020017f2c000000000000000000000000000000000000000000000000000000000000008152505b604051602001611df793929190615809565b611e7e61455f565b611e896002846158bc565b60ff166001148015611ea85750611ea16002836158bc565b60ff166001145b611f0e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4d4c3a433a30000000000000000000000000000000000000000000000000000060448201526064016102e4565b611f1f81604001518460ff16612e84565b60408101516104979060ff808616908516612ef3565b60008151600114611fa2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f43414c433a5056493a300000000000000000000000000000000000000000000060448201526064016102e4565b815160011415611fb457506000610497565b50600092915050565b600062ffffff601b848460ff1681518110611fda57611fda61514b565b602090810291909101015160800151901c169050600062ffffff6003858560ff168151811061200b5761200b61514b565b602002602001015160800151901c169050600080612058868660ff16815181106120375761203761514b565b602002602001015160800151603381901c603f9081169260399290921c1690565b91509150600080612077888860ff1681518110610ba557610ba561514b565b60208b8101805160ff85811690915290519083169101526040805160e0810182526001918101918252929450909250819060608201603f60128b901c1660ff168152602001603f600c8b901c1660ff168152602001603f60068b901c1660ff168152602001603f60ff908b1681169091529082526040805160608101825288831681529187166020838101919091526001838301819052938101929092528c820151810193909352825160a081019093529082528101603f601288901c1660ff168152602001603f600c88901c1660ff168152602001603f600688901c1660ff168152602001603f60ff90881616905260208a015160a00152604080516008808252610120820190925290816020015b60408051606081018252600080825260208083018290529282015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092019101816121875790505060208a015160600152604080516008808252610120820190925290816020015b60408051606081018252600080825260208083018290529282015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092019101816121f257505060208a01516080015260005b600881101561233757600080600061227e8c8c60ff168151811061226e5761226e61514b565b6020026020010151856000613007565b925092509250801561232157828d602001516080015185815181106122a5576122a561514b565b60200260200101516000019060ff16908160ff1681525050818d602001516080015185815181106122d8576122d861514b565b60200260200101516020019060ff16908160ff168152505060018d6020015160800151858151811061230c5761230c61514b565b60209081029190910101519015156040909101525b505050808061232f906151a9565b915050612248565b5060005b600881101561242a5760008060006123718c8c60ff16815181106123615761236161514b565b6020026020010151856001613007565b925092509250801561241457828d602001516060015185815181106123985761239861514b565b60200260200101516000019060ff16908160ff1681525050818d602001516060015185815181106123cb576123cb61514b565b60200260200101516020019060ff16908160ff168152505060018d602001516060015185815181106123ff576123ff61514b565b60209081029190910101519015156040909101525b5050508080612422906151a9565b91505061233b565b50600060a08a0181905260808a015260608901515167ffffffffffffffff811115612457576124576146e8565b6040519080825280602002602001820160405280156124e057816020015b6124cd6040805160e0810182526000918101828152606082018390526080820183905260a0820183905260c0820192909252908190815260408051606081018252600080825260208281018290529282015291015290565b8152602001906001900390816124755790505b5060608a01526007604b898960ff16815181106124ff576124ff61514b565b602002602001015160800151901c16896000019060ff16908160ff1681525050612556888860ff16815181106125375761253761514b565b602002602001015183838c60400151613067909392919063ffffffff16565b505050505050505050565b60008260200151826000015160ff16815181106125805761258061514b565b6020026020010151905060008260200151604001519050826020015160a001516040015160ff166000141580156125be575080516040015160ff1615155b80156125e0575081600001516040015160ff1681600001516040015160ff1611155b1561267e5780516040908101518351909101516000916125ff916158de565b90506126296001856020015160a001516040015161261d91906158de565b6040860151908361311f565b80826020015160000181815161263f91906156fb565b60ff90811690915260208087015160a0015101511615905061267c5780846020015160a0015160200181815161267591906156fb565b60ff169052505b505b60208084015160a00151015160ff16158015906126a2575080516020015160ff1615155b80156126c4575081600001516020015160ff1681600001516020015160ff1611155b15612709576127096001846020015160a00151602001516126e591906158de565b82516020908101518551909101516126fd91906158de565b6040860151919061311f565b602083015160a001516080015160ff161580159061272e575080516080015160ff1615155b8015612750575081600001516080015160ff1681600001516080015160ff1611155b156127e557805160809081015183519091015160009161276f916158de565b602085015160a0015160800151604086015191925061278f91908361321b565b8082602001516020018181516127a591906156fb565b60ff908116909152602086015160a0015160600151161590506127e35780846020015160a001516060018181516127dc91906156fb565b60ff169052505b505b602083015160a001516060015160ff161580159061280a575080516060015160ff1615155b801561282c575081600001516060015160ff1681600001516060015160ff1611155b1561286457602083015160a00151606090810151825182015184519092015161286492612858916158de565b6040860151919061321b565b50505050565b60008260200151826000015160ff16815181106128895761288961514b565b602002602001015190506000826020015160400151905080602001516000015160ff1682602001516000015160ff16116128c45760006128da565b6020808201515190830151516128da91906158de565b60ff90811660a08501526020808301518101518482015190910151908216911611612906576000612922565b80602001516020015182602001516020015161292291906158de565b60ff16608084015260a0830180519061293a82615586565b60ff1690525060a0830151608084015160408501518051602090910151875161286494909390929091613304565b815161297390613348565b801561298757506129878160400151613348565b156129e357600061299b8360000151613358565b905060006129ac8360400151613358565b905080151580156129cb5750602382901c600f16602382901c600f1610155b156129dc576129dc81855190613381565b5050612968565b8151604081015160800151603f81811c8116835260459190911c1660209091015281516000606082018190526080820181905260c0820181905260a090910152612a4a81604001516000606082018190526080820181905260c0820181905260a090910152565b5050565b612a57816133aa565b50565b60005b8160600151518160ff161015612b1a57600082606001518260ff1681518110612a8857612a8861514b565b6020026020010151905080602001516040015115612b075760a083015160208201518051612ab79083906156fb565b60ff169052506080830151602080830151018051612ad69083906156fb565b60ff9081169091526020860151805184935090918516908110612afb57612afb61514b565b60200260200101819052505b5080612b1281615586565b915050612a5d565b505050565b606081612b5f57505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b8115612b895780612b73816151a9565b9150612b829050600a83615688565b9150612b63565b8067ffffffffffffffff811115612ba257612ba26146e8565b6040519080825280601f01601f191660200182016040528015612bcc576020820181803683370190505b5092505b83156105f757612be16001826151fa565b9050612bee600a85615755565b612bf99060306151e2565b60f81b838281518110612c0e57612c0e61514b565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350612c48600a85615688565b9350612bd0565b60008080612c5d848661569c565b612c6790876151e2565b8751909150612c77600683615688565b10612c89576000809250925050612cd7565b612c94600682615755565b612c9f90602a61569c565b87612cab600684615688565b81518110612cbb57612cbb61514b565b6020908102919091010151901c91506503ffffffffff82169250505b94509492505050565b6000612ceb82613599565b600583901b63ffffff0016179050919050565b84612d0857612e1d565b6000612d158787846135a7565b9050868181518110612d2957612d2961514b565b602002602001015160000151612d3e86611405565b612d4786611405565b612d5086611405565b604051602001612d639493929190615901565b604051602081830303815290604052878281518110612d8457612d8461514b565b6020908102919091010151528115612e1b57868181518110612da857612da861514b565b602002602001015160000151612dbe6001611405565b612dc787611405565b612dda612dd58860016151e2565b611405565b604051602001612ded94939291906159d7565b604051602081830303815290604052878281518110612e0e57612e0e61514b565b6020908102919091010151525b505b505050505050565b60006027612e3283613746565b60ff16901b176023612e438461375a565b60ff16901b17601b612e548561376a565b60ff16901b81179050600386901b81179050612e7a612e728661376a565b60ff1661377a565b1795945050505050565b6006612e90828061569c565b612e9a9190615688565b612ea59060026151e2565b67ffffffffffffffff811115612ebd57612ebd6146e8565b604051908082528060200260200182016040528015612ee6578160200160208202803683370190505b5082604001819052505050565b603f821115612f5e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f564552533a534554573a3000000000000000000000000000000000000000000060448201526064016102e4565b603f811115612fc9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f564552533a534554573a3100000000000000000000000000000000000000000060448201526064016102e4565b7ffffffffffffffffffffffffffffffffffffffffffffff8007fffffffffffffff6080909301805160459290921b603f9390931b9190931617179052565b6000806000808461301957600061301c565b60805b60ff1661302a87600c61569c565b61303491906151e2565b6060880151901c9050610fff16603f81169350600681901c92508315158061305b57508215155b91505093509350939050565b60ff8116602085015260005b818110156130f75760005b838110156130e457613090868561379a565b50600061309e868385613834565b905080156130c65760006130b287836138c9565b505090506130c08882613381565b506130d1565b6130d1876000613381565b50806130dc816151a9565b91505061307e565b50806130ef816151a9565b915050613073565b5060ff821684526000606085018190526080850181905260c0850181905260a0850152612864565b60005b835160ff168110156131fd57835160ff165b8360ff16811115613190578360ff1681101561314f57613190565b61317e61315f60ff8516836151e2565b6040870151849061317190858361390b565b6040890151929190613935565b8061318881615720565b915050613134565b50600061319e8460016156fb565b60ff1690505b6131ae83856156fb565b60ff1681116131ea576131d881836131718760ff16868a6040015161390b9092919063ffffffff16565b806131e2816151a9565b9150506131a4565b50806131f5816151a9565b915050613122565b50808360000181815161321091906156fb565b60ff16905250505050565b60005b836020015160ff168110156132f157602084015160ff165b8360ff16811115613284578360ff1681101561325157613284565b6132728261326260ff8616846151e2565b604088015161317190868661390b565b8061327c81615720565b915050613236565b5060006132928460016156fb565b60ff1690505b6132a283856156fb565b60ff1681116132de576132cc8282613171858860ff168a6040015161390b9092919063ffffffff16565b806132d6816151a9565b915050613298565b50806132e9816151a9565b91505061321e565b50808360200181815161321091906156fb565b60ff80851660608701819052908416608087015260c086015261332784836156fb565b60ff16855261333683826156fb565b60ff1660209095019490945250505050565b600061049782836000015161379a565b6000610497826060015160ff16836080015160ff16846040015161390b9092919063ffffffff16565b612a4a826060015160ff16836080015160ff16838560400151613935909392919063ffffffff16565b606060008060005b846020015160800151518160ff161015613592576040805160608101825260008082526020808301829052928201529086015160800151805160ff84169081106133fe576133fe61514b565b602002602001015160400151156134ee578361341981615586565b9450508560200151608001518260ff16815181106134395761343961514b565b60200260200101519050806020015186606001518360ff16815181106134615761346161514b565b6020026020010151602001516000019060ff16908160ff1681525050806000015186606001518360ff168151811061349b5761349b61514b565b6020026020010151602001516020019060ff16908160ff1681525050600186606001518360ff16815181106134d2576134d261514b565b602090810291909101810151015190151560409091015261357f565b8560200151606001518260ff168151811061350b5761350b61514b565b6020026020010151604001511561357f578261352681615586565b935050845160001415613543576135408660400151613963565b94505b613572868760200151606001518460ff16815181106135645761356461514b565b602002602001015187613bae565b905061357f868284613d04565b508061358a81615586565b9150506133b2565b5050505050565b600061049760078316613f90565b60006135b283612ce0565b6135be575060006113fe565b806135c8816151a9565b9150505b835181101561363c578381815181106135e7576135e761514b565b602002602001015160200151600014156136005761363c565b828482815181106136135761361361514b565b602002602001015160200151141561362a576113fe565b80613634816151a9565b9150506135cc565b8284828151811061364f5761364f61514b565b60200260200101516020018181525050600061366a84613599565b60ff1461368a57613685600461367f86612ce0565b90613fbc565b6136a2565b6136a26003600861369a87612ce0565b901c90613fbc565b9050821561370057806136bd6007602787901c1660416151e2565b6040516020016136ce929190615a9f565b6040516020818303038152906040528583815181106136ef576136ef61514b565b602090810291909101015152610c73565b806040516020016137119190615b39565b6040516020818303038152906040528583815181106137325761373261514b565b602090810291909101015152509392505050565b6000600782111561375657600080fd5b5090565b6000600f82111561375657600080fd5b600060ff82111561375657600080fd5b600060246137878361376a565b61379191906156d9565b60ff1692915050565b60008260a00151156138235760608301516137b69060016156fb565b60ff168260ff16116138135760808301516137d29060016156fb565b60ff16836020015160ff1614156137eb57506000610497565b60c083015160ff1660608401526080830180519061380882615586565b60ff1690525061382b565b6060830180519061380882615586565b600160a08401525b50600192915050565b6080830151600090603f90811c168161384d828561569c565b61385790866151e2565b60208701515190915061386b604083615688565b1061387b576000925050506113fe565b613886604082615755565b61389190600461569c565b60208701516138a1604084615688565b815181106138b1576138b161514b565b6020026020010151901c600f16925050509392505050565b6000806000846000015184815181106138e4576138e461514b565b602002602001015192506138f783612ce0565b9150602383901c600f165b90509250925092565b60808301516040840151600091603f90811c169061392b90858584612c4f565b5095945050505050565b6080840151603f90811c16600061394c828561569c565b61395690866151e2565b9050612e1d8682856140b7565b606060008060006139738561416e565b60408051600580825260c082019092529396509194509250816020015b60408051606081018252600080825260208083018290529282015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90920191018161399057905050935080846000815181106139f1576139f161514b565b60200260200101819052506040518060600160405280826000015160ff168152602001848360200151613a2491906158de565b60ff1681526020016001151581525084600181518110613a4657613a4661514b565b602090810291909101015282613a5d6002826158bc565b60ff1615613a735780613a6f81615586565b9150505b6040805160608101909152825160ff16815260208101613a946002846156d9565b8460200151613aa391906158de565b60ff1681526020016001151581525085600281518110613ac557613ac561514b565b602090810291909101015282613adc6002826158bc565b60ff1615613af25780613aee81615586565b9150505b6040805160608101909152835160ff16815260208101613b136002846156d9565b8560200151613b2291906156fb565b60ff1681526020016001151581525086600381518110613b4457613b4461514b565b60200260200101819052506040518060600160405280846000015160ff168152602001858560200151613b7791906156fb565b60ff1681526020016001151581525086600481518110613b9957613b9961514b565b60200260200101819052505050505050919050565b604080516060810182526000808252602082018190529181019190915281836000015160ff1681518110613be457613be461514b565b60209081029190910101515160ff908116825283518351849291909116908110613c1057613c1061514b565b60209081029190910181015181015160ff908116838301526001604084015284820151161015613c5b5782602001518160200151613c4e91906158de565b60ff166020820152613c84565b60208360200151613c6c91906158de565b8160200151613c7b91906156fb565b60ff1660208201525b805160208201516040808701510151613ca592909160ff9182169116614543565b6113fe57806020015160ff1682600081518110613cc457613cc461514b565b60200260200101516020015160ff161115613cf45760208101805190613ce982615586565b60ff16905250613c84565b60208101805190613ce982615ba5565b6040805160a0810182526000808252602082018190529181018290526060810182905260808101919091525b604084015151613d42906001906158de565b60ff16836000015160ff16108015613d8f5750613d8f81602001516001613d6991906156fb565b8451613d7591906156fb565b602085015160408088015101519160ff9081169116614543565b15613daf5760208101805190613da482615586565b60ff16905250613d30565b825160ff1615801590613ddb57506040810151613dcd9060016156fb565b60ff16836000015160ff1610155b8015613e025750613e0281604001516001613df691906156fb565b8451613d7591906158de565b15613e225760408101805190613e1782615586565b60ff16905250613daf565b602083015160ff1615801590613e5157506060810151613e439060016156fb565b60ff16836020015160ff1610155b8015613e93575082516060820151613e939160ff1690613e729060016156fb565b8560200151613e8191906158de565b6040808801510151919060ff16614543565b15613eb35760608101805190613ea882615586565b60ff16905250613e22565b6001846040015160200151613ec891906158de565b60ff16836020015160ff16108015613f04575082516080820151613f049160ff1690613ef59060016156fb565b8560200151613e8191906156fb565b15613f245760808101805190613f1982615586565b60ff16905250613eb3565b83606001518260ff1681518110613f3d57613f3d61514b565b602002602001015160200151604001516128645760405180604001604052808281526020018481525084606001518360ff1681518110613f7f57613f7f61514b565b602002602001018190525050505050565b60008160071415613fa3575060ff919050565b613fac82613746565b613791906024615be0565b919050565b60606000613fcb83600261569c565b67ffffffffffffffff811115613fe357613fe36146e8565b6040519080825280601f01601f19166020018201604052801561400d576020820181803683370190505b5080519091505b8015610c73577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061404f5761404f61514b565b1a60f81b8261405f6001846151fa565b8151811061406f5761406f61514b565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c93806140af81615720565b915050614014565b6140c2600683615688565b8360400151511115612b1a5760006140ee6140de600685615755565b6140e990602a61569c565b61376a565b90506503ffffffffff60ff82161b19604085015161410d600686615688565b8151811061411d5761411d61514b565b6020908102919091010180519091169052604084015160ff821683901b90614146600686615688565b815181106141565761415661514b565b60200260200101818151179150818152505050505050565b604080516060810182526000808252602082018190529181018290528190835161419a906002906156d9565b60ff16815260208401516141b0906002906156d9565b60ff1660208201526001604082018190529250829150600080808480825b806143f057821580156141df575083155b925082156142b5576142236141f58360016156fb565b885161420191906158de565b60ff168a896020015161421491906158de565b60408d0151919060ff16614543565b801561424457506142446142388360016156fb565b885161420191906156fb565b801561427857506142786142598360016156fb565b885161426591906158de565b60ff1689896020015161421491906156fb565b8015614299575061429961428d8360016156fb565b885161426591906156fb565b156142b057816142a881615586565b9250506142b5565b600193505b856143395760008988602001516142cc91906158de565b60ff1611801561430557508651614305906142e89084906158de565b60ff166142f68b60016156fb565b896020015161421491906158de565b801561431d5750865161431d906142e89084906156fb565b15614334578861432c81615586565b995050614339565b600195505b846143cf5760018a6020015161434f91906158de565b60ff1688886020015161436291906156fb565b60ff1610801561439b5750865161439b9061437e9084906158de565b60ff1661438c8a60016156fb565b896020015161421491906156fb565b80156143b3575086516143b39061437e9084906156fb565b156143ca57876143c281615586565b9850506143cf565b600194505b8480156143d95750855b80156143e25750835b156143eb575060015b6141ce565b8760ff168960ff1614614536576000614409898b6156fb565b6144149060016156fb565b90506000600261442481846158bc565b60ff161561443c576144378360016156fb565b61443e565b825b61444891906156d9565b905060008b60018b602001518461445f91906156fb565b61446991906158de565b61447391906158de565b9050896020015160ff168160ff1611156144db5760008a602001518261449991906158de565b90506144a5818e6156fb565b9c508060ff168c60ff16116144c6576144be8c826158de565b9b508b6144d4565b6144d0818d6158de565b9b508b5b505061452b565b6000818b602001516144ed91906158de565b90508060ff168d60ff161161450e576145068d826158de565b9c508c61451c565b614518818e6158de565b9c508c5b50614527818d6156fb565b9b50505b60ff1660208a015250505b5050505050509193909250565b60008061455185858561390b565b600716151595945050505050565b6040518060e00160405280600060ff168152602001600060ff1681526020016145b06040518060a0016040528060608152602001606081526020016060815260200160008152602001600081525090565b8152600060208201819052604082018190526060820181905260809091015290565b60405180604001604052806145e561455f565b8152602001606081525090565b6040518060c00160405280600060ff16815260200161460f614636565b815260200161461c61455f565b815260606020820181905260006040830181905291015290565b6040805160e081018252600080825260208201529081016146a56040805160e0810182526000918101828152606082018390526080820183905260a0820183905260c0820192909252908190815260408051606081018252600080825260208281018290529282015291015290565b8152606060208083018290526040808401839052805160a081018252600080825292810183905290810182905280830182905260808101919091529101906145e5565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610140810167ffffffffffffffff8111828210171561473b5761473b6146e8565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715614788576147886146e8565b604052919050565b600082601f8301126147a157600080fd5b813567ffffffffffffffff8111156147bb576147bb6146e8565b6147ec60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601614741565b81815284602083860101111561480157600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561483057600080fd5b813567ffffffffffffffff81111561484757600080fd5b61485384828501614790565b949350505050565b60005b8381101561487657818101518382015260200161485e565b838111156128645750506000910152565b60208152600082518060208401526148a681604085016020870161485b565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b600067ffffffffffffffff8211156148f2576148f26146e8565b5060051b60200190565b600082601f83011261490d57600080fd5b8135602061492261491d836148d8565b614741565b82815260059290921b8401810191818101908684111561494157600080fd5b8286015b8481101561495c5780358352918301918301614945565b509695505050505050565b600082601f83011261497857600080fd5b8135602061498861491d836148d8565b82815260059290921b840181019181810190868411156149a757600080fd5b8286015b8481101561495c57803567ffffffffffffffff8111156149cb5760008081fd5b6149d98986838b01016148fc565b8452509183019183016149ab565b803560ff81168114613fb757600080fd5b600082601f830112614a0957600080fd5b81356020614a1961491d836148d8565b82815260059290921b84018101918181019086841115614a3857600080fd5b8286015b8481101561495c57614a4d816149e7565b8352918301918301614a3c565b803573ffffffffffffffffffffffffffffffffffffffff81168114613fb757600080fd5b600082601f830112614a8f57600080fd5b81356020614a9f61491d836148d8565b82815260059290921b84018101918181019086841115614abe57600080fd5b8286015b8481101561495c57803567ffffffffffffffff811115614ae25760008081fd5b614af08986838b0101614790565b845250918301918301614ac2565b60006101408284031215614b1157600080fd5b614b19614717565b9050813567ffffffffffffffff80821115614b3357600080fd5b614b3f858386016149f8565b83526020840135915080821115614b5557600080fd5b614b61858386016149f8565b60208401526040840135915080821115614b7a57600080fd5b614b86858386016149f8565b604084015260608401356060840152614ba160808501614a5a565b608084015260a084013560a084015260c0840135915080821115614bc457600080fd5b614bd085838601614a7e565b60c084015260e0840135915080821115614be957600080fd5b614bf585838601614a7e565b60e084015261010091508184013581811115614c1057600080fd5b614c1c86828701614790565b838501525061012091508184013581811115614c3757600080fd5b614c4386828701614790565b8385015250505092915050565b600080600060608486031215614c6557600080fd5b833567ffffffffffffffff80821115614c7d57600080fd5b614c8987838801614967565b94506020860135915080821115614c9f57600080fd5b50614cac86828701614afe565b925050613902604085016149e7565b600081518084526020808501945080840160005b83811015614ceb57815187529582019590820190600101614ccf565b509495945050505050565b6020815260006113fe6020830184614cbb565b60008060408385031215614d1c57600080fd5b823567ffffffffffffffff811115614d3357600080fd5b614d3f858286016148fc565b95602094909401359450505050565b600060208284031215614d6057600080fd5b813567ffffffffffffffff811115614d7757600080fd5b614853848285016148fc565b80358015158114613fb757600080fd5b60008060008060008060c08789031215614dac57600080fd5b863567ffffffffffffffff80821115614dc457600080fd5b614dd08a838b016148fc565b97506020890135915080821115614de657600080fd5b50614df389828a01614afe565b955050614e0260408801614d83565b9350614e1060608801614d83565b9250614e1e60808801614d83565b9150614e2c60a08801614d83565b90509295509295509295565b600080600060608486031215614e4d57600080fd5b833567ffffffffffffffff80821115614e6557600080fd5b614e7187838801614967565b94506020860135915080821115614e8757600080fd5b614e93878388016149f8565b93506040860135915080821115614ea957600080fd5b50614eb6868287016149f8565b9150509250925092565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015614fe5578883037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0018552815180518085529088019088850190600581901b86018a0160005b82811015614fcf577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0888303018452845160a08151818552614f7582860182614cbb565b9150508d8201518482038f860152614f8d8282614cbb565b9150508c8201518482038e860152614fa58282614cbb565b6060848101519087015260809384015193909501929092525050938b0193928b0192600101614f31565b50978a0197955050509187019150600101614ee7565b509098975050505050505050565b600080600080600060a0868803121561500b57600080fd5b853567ffffffffffffffff8082111561502357600080fd5b61502f89838a01614afe565b9650602088013591508082111561504557600080fd5b61505189838a01614790565b9550604088013591508082111561506757600080fd5b61507389838a01614790565b9450606088013591508082111561508957600080fd5b5061509688828901614790565b9250506150a560808701614d83565b90509295509295909350565b600083516150c381846020880161485b565b8351908301906150d781836020880161485b565b01949350505050565b7f646174613a696d6167652f7376672b786d6c3b636861727365743d5554462d3881527f2c0000000000000000000000000000000000000000000000000000000000000060208201526000825161513e81602185016020870161485b565b9190910160210192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156151db576151db61517a565b5060010190565b600082198211156151f5576151f561517a565b500190565b60008282101561520c5761520c61517a565b500390565b7f3c7376670000000000000000000000000000000000000000000000000000000081527f2076696577426f783d223020302000000000000000000000000000000000000060048201526000835161526f81601285016020880161485b565b7f200000000000000000000000000000000000000000000000000000000000000060129184019182015283516152ac81601384016020880161485b565b7f2220786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323030302f601392909101918201527f73766722000000000000000000000000000000000000000000000000000000006033820152603701949350505050565b6000835161531a81846020880161485b565b7f207374796c653d226261636b67726f756e642d636f6c6f723a00000000000000908301908152835161535481601984016020880161485b565b7f220000000000000000000000000000000000000000000000000000000000000060199290910191820152601a01949350505050565b6000835161539c81846020880161485b565b8351908301906153b081836020880161485b565b7f222f3e00000000000000000000000000000000000000000000000000000000009101908152600301949350505050565b600084516153f381846020890161485b565b80830190507f2e000000000000000000000000000000000000000000000000000000000000008152846001820152835161543481602184016020880161485b565b0160210195945050505050565b6000835161545381846020880161485b565b7f5d5d3e3c2f7374796c653e000000000000000000000000000000000000000000908301908152835161548d81600b84016020880161485b565b01600b01949350505050565b600083516154ab81846020880161485b565b7f3e0000000000000000000000000000000000000000000000000000000000000090830190815283516154e581600184016020880161485b565b7f3c2f7376673e000000000000000000000000000000000000000000000000000060019290910191820152600701949350505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b636861727365743d555481527f462d382c0000000000000000000000000000000000000000000000000000000060208201526000825161557981602485016020870161485b565b9190910160240192915050565b600060ff821660ff81141561559d5761559d61517a565b60010192915050565b7f7b000000000000000000000000000000000000000000000000000000000000008152600085516155de816001850160208a0161485b565b8551908301906155f5816001840160208a0161485b565b855191019061560b81600184016020890161485b565b845191019061562181600184016020880161485b565b7f7d00000000000000000000000000000000000000000000000000000000000000600192909101918201526002019695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60008261569757615697615659565b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156156d4576156d461517a565b500290565b600060ff8316806156ec576156ec615659565b8060ff84160491505092915050565b600060ff821660ff84168060ff038211156157185761571861517a565b019392505050565b60008161572f5761572f61517a565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b60008261576457615764615659565b500690565b60007f220000000000000000000000000000000000000000000000000000000000000080835285516157a2816001860160208a0161485b565b7f223a22000000000000000000000000000000000000000000000000000000000060019185019182015285516157df816004840160208a0161485b565b0160048101919091528351906157fc82600583016020880161485b565b0160050195945050505050565b7f220000000000000000000000000000000000000000000000000000000000000081526000845161584181600185016020890161485b565b7f223a7b0000000000000000000000000000000000000000000000000000000000600191840191820152845161587e81600484016020890161485b565b7f7d000000000000000000000000000000000000000000000000000000000000006004929091019182015283516157fc81600584016020880161485b565b600060ff8316806158cf576158cf615659565b8060ff84160691505092915050565b600060ff821660ff8416808210156158f8576158f861517a565b90039392505050565b60008551615913818460208a0161485b565b7f4d00000000000000000000000000000000000000000000000000000000000000908301908152855161594d816001840160208a0161485b565b7f200000000000000000000000000000000000000000000000000000000000000060019290910191820152845161598b81600284016020890161485b565b7f68000000000000000000000000000000000000000000000000000000000000006002929091019182015283516159c981600384016020880161485b565b016003019695505050505050565b600085516159e9818460208a0161485b565b7f76000000000000000000000000000000000000000000000000000000000000009083019081528551615a23816001840160208a0161485b565b7f4c00000000000000000000000000000000000000000000000000000000000000600192909101918201528451615a6181600284016020890161485b565b7f20000000000000000000000000000000000000000000000000000000000000006002929091019182015283516159c981600384016020880161485b565b7f3c706174682066696c6c3d222300000000000000000000000000000000000000815260008351615ad781600d85016020880161485b565b7f2220636c6173733d220000000000000000000000000000000000000000000000600d93909101928301525060168101919091527f2220643d220000000000000000000000000000000000000000000000000000006036820152603b01919050565b7f3c70617468207374726f6b653d22230000000000000000000000000000000000815260008251615b7181600f85016020870161485b565b7f2220643d22000000000000000000000000000000000000000000000000000000600f939091019283015250601401919050565b600060ff821680615bb857615bb861517a565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0192915050565b600060ff821660ff84168160ff0481118215151615615c0157615c0161517a565b02939250505056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220324f8628754b61933f1c337e3c4aefb0240d1add204f90d4829a8262d7d21e2864736f6c6343000809003360a060405234801561001057600080fd5b50336080526080516116036100376000396000818161015c01526104d001526116036000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063645ace531161005b578063645ace53146101315780636aea29a31461015757806387ae70311461017e578063f9ec93d41461019157600080fd5b80630c67edb81461008d57806311c16aa3146100d757806319ab453c146100fc57806336aa589d14610111575b600080fd5b6000546100ad9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100ea6100e5366004610e11565b6101b1565b60405160ff90911681526020016100ce565b61010f61010a366004610e64565b610497565b005b61012461011f366004610f43565b61059f565b6040516100ce9190610fe0565b6100ea61013f366004611088565b60ff9081166000908152600260205260409020541690565b6100ad7f000000000000000000000000000000000000000000000000000000000000000081565b61010f61018c3660046110a3565b6106bd565b6101a461019f3660046110e5565b610935565b6040516100ce9190611118565b600060088460ff1610610225576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600360248201527f463a33000000000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b600061023083610bf6565b905060008160ff161161029f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600360248201527f463a300000000000000000000000000000000000000000000000000000000000604482015260640161021c565b60006102ab8585610c0a565b600080546040517f64d350bd00000000000000000000000000000000000000000000000000000000815233600482015260ff808b1660248301528616604482015273ffffffffffffffffffffffffffffffffffffffff8085166064830152939450919216906364d350bd90608401602060405180830381600087803b15801561033357600080fd5b505af1158015610347573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036b919061115c565b9050806103d4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600360248201527f433a300000000000000000000000000000000000000000000000000000000000604482015260640161021c565b60ff808816600081815260016020818152604080842080549384018155845281842090920180547fffffffffffffffffffffff0000000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff891674ff000000000000000000000000000000000000000060a08c901b1617179055928252600290925290812080548693919291610472918591166111ad565b92506101000a81548160ff021916908360ff1602179055508293505050509392505050565b60005473ffffffffffffffffffffffffffffffffffffffff161580156104f257503373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016145b610558576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600360248201527f433a300000000000000000000000000000000000000000000000000000000000604482015260640161021c565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6060815167ffffffffffffffff8111156105bb576105bb610ea1565b6040519080825280602002602001820160405280156105ee57816020015b60608152602001906001900390816105d95790505b50905060005b82518160ff1610156106b757828160ff1681518110610615576106156111d2565b602002602001015160ff166000141561065e576040805160008152602081019091528251839060ff841690811061064e5761064e6111d2565b60200260200101819052506106a5565b61068481848360ff1681518110610677576106776111d2565b6020026020010151610935565b828260ff1681518110610699576106996111d2565b60200260200101819052505b806106af81611201565b9150506105f4565b50919050565b60005b60088160ff1610156109305760006106ff84848460ff168181106106e6576106e66111d2565b90506020028101906106f89190611221565b9050610bf6565b905060ff81161561091d57600061073b85858560ff16818110610724576107246111d2565b90506020028101906107369190611221565b610c0a565b600080546040517f64d350bd00000000000000000000000000000000000000000000000000000000815233600482015260ff80881660248301528616604482015273ffffffffffffffffffffffffffffffffffffffff8085166064830152939450919216906364d350bd90608401602060405180830381600087803b1580156107c357600080fd5b505af11580156107d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107fb919061115c565b905080610864576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600360248201527f433a300000000000000000000000000000000000000000000000000000000000604482015260640161021c565b60ff808516600081815260016020818152604080842080549384018155845281842090920180547fffffffffffffffffffffff0000000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff891674ff000000000000000000000000000000000000000060a08c901b1617179055928252600290925290812080548693919291610902918591166111ad565b92506101000a81548160ff021916908360ff16021790555050505b508061092881611201565b9150506106c0565b505050565b606060ff82166109a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600360248201527f463a310000000000000000000000000000000000000000000000000000000000604482015260640161021c565b816109ab81611289565b60ff808616600090815260026020526040902054919450908116915083168111610a31576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600360248201527f463a320000000000000000000000000000000000000000000000000000000000604482015260640161021c565b60ff8416600090815260016020908152604080832080548251818502810185019093528083529192909190830182828015610aa357602002820191906000526020600020905b815474ffffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610a77575b50505050509050600080600080600090505b8451811015610b5f57600060a0868381518110610ad457610ad46111d2565b602002602001015174ffffffffffffffffffffffffffffffffffffffffff16901c90508860ff168184610b0791906111ad565b60ff161115610b4057858281518110610b2257610b226111d2565b602002602001015194508289610b3891906112c4565b935050610b5f565b610b4a81846111ad565b92505080610b57816112e7565b915050610ab5565b5073ffffffffffffffffffffffffffffffffffffffff8316610bdd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600360248201527f463a330000000000000000000000000000000000000000000000000000000000604482015260640161021c565b610bea838360ff16610cfb565b98975050505050505050565b600060ff821115610c0657600080fd5b5090565b6000808383604051602001610c2092919061136f565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815290829052610c5b91602001611448565b60405160208183030381529060405290508051602082016000f0915073ffffffffffffffffffffffffffffffffffffffff8216610cf4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4445504c4f594d454e545f4641494c4544000000000000000000000000000000604482015260640161021c565b5092915050565b6060610d0683610d3a565b806020019051810190610d1991906114af565b8281518110610d2a57610d2a6111d2565b6020026020010151905092915050565b6060610d68826001610d638173ffffffffffffffffffffffffffffffffffffffff84163b6115b6565b610d6e565b92915050565b60408051603f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168101909152818152818360208301863c9392505050565b803560ff81168114610dc057600080fd5b919050565b60008083601f840112610dd757600080fd5b50813567ffffffffffffffff811115610def57600080fd5b6020830191508360208260051b8501011115610e0a57600080fd5b9250929050565b600080600060408486031215610e2657600080fd5b610e2f84610daf565b9250602084013567ffffffffffffffff811115610e4b57600080fd5b610e5786828701610dc5565b9497909650939450505050565b600060208284031215610e7657600080fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610e9a57600080fd5b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715610f1757610f17610ea1565b604052919050565b600067ffffffffffffffff821115610f3957610f39610ea1565b5060051b60200190565b60006020808385031215610f5657600080fd5b823567ffffffffffffffff811115610f6d57600080fd5b8301601f81018513610f7e57600080fd5b8035610f91610f8c82610f1f565b610ed0565b81815260059190911b82018301908381019087831115610fb057600080fd5b928401925b82841015610fd557610fc684610daf565b82529284019290840190610fb5565b979650505050505050565b6000602080830181845280855180835260408601915060408160051b87010192508387016000805b8381101561107a578886037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0018552825180518088529088019088880190845b818110156110645783518352928a0192918a0191600101611048565b5090975050509386019391860191600101611008565b509398975050505050505050565b60006020828403121561109a57600080fd5b610e9a82610daf565b600080602083850312156110b657600080fd5b823567ffffffffffffffff8111156110cd57600080fd5b6110d985828601610dc5565b90969095509350505050565b600080604083850312156110f857600080fd5b61110183610daf565b915061110f60208401610daf565b90509250929050565b6020808252825182820181905260009190848201906040850190845b8181101561115057835183529284019291840191600101611134565b50909695505050505050565b60006020828403121561116e57600080fd5b81518015158114610e9a57600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060ff821660ff84168060ff038211156111ca576111ca61117e565b019392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060ff821660ff8114156112185761121861117e565b60010192915050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261125657600080fd5b83018035915067ffffffffffffffff82111561127157600080fd5b6020019150600581901b3603821315610e0a57600080fd5b600060ff82168061129c5761129c61117e565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0192915050565b600060ff821660ff8416808210156112de576112de61117e565b90039392505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156113195761131961117e565b5060010190565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561135257600080fd5b8260051b8083602087013760009401602001938452509192915050565b6020808252818101839052600090600560408085019086831b86010187855b8881101561143a577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc088840301845281357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18b36030181126113ef57600080fd5b8a01803567ffffffffffffffff81111561140857600080fd5b80871b36038c131561141957600080fd5b61142685828a8501611320565b95880195945050509085019060010161138e565b509098975050505050505050565b7f600b5981380380925939f300000000000000000000000000000000000000000081526000825160005b8181101561148f576020818601810151600c868401015201611472565b818111156114a1576000600c83860101525b5091909101600c0192915050565b600060208083850312156114c257600080fd5b825167ffffffffffffffff808211156114da57600080fd5b818501915085601f8301126114ee57600080fd5b81516114fc610f8c82610f1f565b818152600591821b840185019185820191908984111561151b57600080fd5b8686015b848110156115a7578051868111156115375760008081fd5b8701603f81018c136115495760008081fd5b88810151604061155b610f8c83610f1f565b82815291851b83018101918b8101908f8411156115785760008081fd5b938201935b838510156115965784518252938c0193908c019061157d565b88525050509388019350870161151f565b50909998505050505050505050565b6000828210156115c8576115c861117e565b50039056fea2646970667358221220becdda533cd439dd46c1ffb60e1c160c43feb6bde6e086b861d15c0083b2bb5b64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a35760003560e01c80635f6d703111610076578063928012301161005b578063928012301461016d578063b0ef3d771461018d578063c1a9a508146101a057600080fd5b80635f6d70311461012d5780636f2ddd931461014d57600080fd5b80631aa3a008146100a8578063276b99f5146100da578063290966aa146100fa578063448e347f1461011a575b600080fd5b6100b06101b3565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100ed6100e8366004611037565b6102a7565b6040516100d19190611160565b61010d610108366004611173565b6104be565b6040516100d191906113e5565b6100ed610128366004611445565b6107b3565b61014061013b366004611173565b610a6b565b6040516100d1919061153b565b6001546100b09073ffffffffffffffffffffffffffffffffffffffff1681565b6000546100b09073ffffffffffffffffffffffffffffffffffffffff1681565b61014061019b366004611173565b610b62565b6100b06101ae36600461154e565b610bda565b6001546040517fffffffffffffffffffffffffffffffffffffffff0000000000000000000000003360601b1660208201526000916102229173ffffffffffffffffffffffffffffffffffffffff9091169060340160405160208183030381529060405280519060200120610cd4565b6040517f19ab453c00000000000000000000000000000000000000000000000000000000815233600482015290915073ffffffffffffffffffffffffffffffffffffffff8216906319ab453c90602401600060405180830381600087803b15801561028c57600080fd5b505af11580156102a0573d6000803e3d6000fd5b5050505090565b606060006102b78a8a8a86610b62565b905073ffffffffffffffffffffffffffffffffffffffff8816156103d7576040517f72e9196700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8916906372e9196790610329908490879060040161156b565b60006040518083038186803b15801561034157600080fd5b505afa92505050801561039457506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261039191908101906115d5565b60015b6103ce573d8080156103c2576040519150601f19603f3d011682016040523d82523d6000602084013e6103c7565b606091505b50506103d7565b91506104b29050565b600054815160208301516040517fb9183b3100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9093169263b9183b319261043c9290918c908c908c908c9060040161160a565b60006040518083038186803b15801561045457600080fd5b505afa158015610468573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526104ae91908101906115d5565b9150505b98975050505050505050565b6104c6610e3b565b6040517f9b9173520000000000000000000000000000000000000000000000000000000081526004810185905273ffffffffffffffffffffffffffffffffffffffff861690639b9173529060240160006040518083038186803b15801561052c57600080fd5b505afa158015610540573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610586919081019061177c565b6020820181815260a09091018590525173ffffffffffffffffffffffffffffffffffffffff86166080909101526105bc85610bda565b6020820151516040517f36aa589d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff92909216916336aa589d91610614916004016118ed565b60006040518083038186803b15801561062c57600080fd5b505afa158015610640573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610686919081019061195b565b815273ffffffffffffffffffffffffffffffffffffffff8316156107ab5760208101516040517f39fed0c400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8516916339fed0c4916107009189918991908890600401611a0c565b60006040518083038186803b15801561071857600080fd5b505afa92505050801561076b57506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610768919081019061177c565b60015b6107a5573d808015610799576040519150601f19603f3d011682016040523d82523d6000602084013e61079e565b606091505b50506107ab565b60208201525b949350505050565b606060006107c389898986610b62565b905073ffffffffffffffffffffffffffffffffffffffff8716156108e3576040517f8eba997800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff881690638eba997890610835908490879060040161156b565b60006040518083038186803b15801561084d57600080fd5b505afa9250505080156108a057506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261089d91908101906115d5565b60015b6108da573d8080156108ce576040519150601f19603f3d011682016040523d82523d6000602084013e6108d3565b606091505b50506108e3565b9150610a609050565b60008054602083015183516040517fb9183b3100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9093169363f6e35446938b928b92879263b9183b31926109579290918891906001908290829060040161160a565b60006040518083038186803b15801561096f57600080fd5b505afa158015610983573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526109c991908101906115d5565b896040518663ffffffff1660e01b81526004016109ea959493929190611a53565b60006040518083038186803b158015610a0257600080fd5b505afa158015610a16573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610a5c91908101906115d5565b9150505b979650505050505050565b610a73610e3b565b6000610a8186868686610b62565b6000805482516040517f5c60ee9200000000000000000000000000000000000000000000000000000000815293945073ffffffffffffffffffffffffffffffffffffffff90911692635c60ee9292610adc9291600401611ab5565b60006040518083038186803b158015610af457600080fd5b505afa158015610b08573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610b4e9190810190611ad7565b825260209081015190820152949350505050565b610b6a610e3b565b6000610b78868686866104be565b600054815160208301516040517f4d67139300000000000000000000000000000000000000000000000000000000815293945073ffffffffffffffffffffffffffffffffffffffff90921692634d67139392610adc9291603f90600401611b0c565b6001546040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606084901b166020820152600091610c4a9173ffffffffffffffffffffffffffffffffffffffff9091169060340160405160208183030381529060405280519060200120610db8565b905073ffffffffffffffffffffffffffffffffffffffff81163b610ccf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600360248201527f503a30000000000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b919050565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528360601b60148201527f5af43d82803e903d91602b57fd5bf300000000000000000000000000000000006028820152826037826000f591505073ffffffffffffffffffffffffffffffffffffffff8116610db2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f455243313136373a2063726561746532206661696c65640000000000000000006044820152606401610cc6565b92915050565b6000610e348383306040517f3d602d80600a3d3981f3363d3d373d3d3d363d730000000000000000000000008152606093841b60148201527f5af43d82803e903d91602b57fd5bf3ff000000000000000000000000000000006028820152921b6038830152604c8201526037808220606c830152605591012090565b9392505050565b604051806040016040528060608152602001610eb960405180610140016040528060608152602001606081526020016060815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001606081526020016060815260200160608152602001606081525090565b905290565b73ffffffffffffffffffffffffffffffffffffffff81168114610ee057600080fd5b50565b80358015158114610ccf57600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610140810167ffffffffffffffff81118282101715610f4657610f46610ef3565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715610f9357610f93610ef3565b604052919050565b600067ffffffffffffffff821115610fb557610fb5610ef3565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b600082601f830112610ff257600080fd5b813561100561100082610f9b565b610f4c565b81815284602083860101111561101a57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600080600080610100898b03121561105457600080fd5b883561105f81610ebe565b975060208901359650604089013561107681610ebe565b955061108460608a01610ee3565b945061109260808a01610ee3565b93506110a060a08a01610ee3565b92506110ae60c08a01610ee3565b915060e089013567ffffffffffffffff8111156110ca57600080fd5b6110d68b828c01610fe1565b9150509295985092959890939650565b60005b838110156111015781810151838201526020016110e9565b83811115611110576000848401525b50505050565b6000815180845261112e8160208601602086016110e6565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526000610e346020830184611116565b6000806000806080858703121561118957600080fd5b843561119481610ebe565b93506020850135925060408501356111ab81610ebe565b9150606085013567ffffffffffffffff8111156111c757600080fd5b6111d387828801610fe1565b91505092959194509250565b600081518084526020808501945080840160005b8381101561120f578151875295820195908201906001016111f3565b509495945050505050565b600081518084526020808501808196508360051b8101915082860160005b858110156112625782840389526112508483516111df565b98850198935090840190600101611238565b5091979650505050505050565b600081518084526020808501945080840160005b8381101561120f57815160ff1687529582019590820190600101611283565b600081518084526020808501808196508360051b8101915082860160005b858110156112625782840389526112d8848351611116565b988501989350908401906001016112c0565b600061014082518185526113008286018261126f565b9150506020830151848203602086015261131a828261126f565b91505060408301518482036040860152611334828261126f565b915050606083015160608501526080830151611368608086018273ffffffffffffffffffffffffffffffffffffffff169052565b5060a083015160a085015260c083015184820360c086015261138a82826112a2565b91505060e083015184820360e08601526113a482826112a2565b91505061010080840151858303828701526113bf8382611116565b9250505061012080840151858303828701526113db8382611116565b9695505050505050565b602081526000825160406020840152611401606084018261121a565b905060208401517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe084830301604085015261143c82826112ea565b95945050505050565b600080600080600080600060e0888a03121561146057600080fd5b873561146b81610ebe565b965060208801359550604088013561148281610ebe565b9450606088013567ffffffffffffffff8082111561149f57600080fd5b6114ab8b838c01610fe1565b955060808a01359150808211156114c157600080fd5b6114cd8b838c01610fe1565b94506114db60a08b01610ee3565b935060c08a01359150808211156114f157600080fd5b506114fe8a828b01610fe1565b91505092959891949750929550565b600081516040845261152260408501826111df565b90506020830151848203602086015261143c82826112ea565b602081526000610e34602083018461150d565b60006020828403121561156057600080fd5b8135610e3481610ebe565b60408152600061157e604083018561150d565b828103602084015261143c8185611116565b600082601f8301126115a157600080fd5b81516115af61100082610f9b565b8181528460208386010111156115c457600080fd5b6107ab8260208301602087016110e6565b6000602082840312156115e757600080fd5b815167ffffffffffffffff8111156115fe57600080fd5b6107ab84828501611590565b60c08152600061161d60c08301896111df565b828103602084015261162f81896112ea565b9615156040840152505092151560608401529015156080830152151560a09091015292915050565b600067ffffffffffffffff82111561167157611671610ef3565b5060051b60200190565b600082601f83011261168c57600080fd5b8151602061169c61100083611657565b82815260059290921b840181019181810190868411156116bb57600080fd5b8286015b848110156116e657805160ff811681146116d95760008081fd5b83529183019183016116bf565b509695505050505050565b8051610ccf81610ebe565b600082601f83011261170d57600080fd5b8151602061171d61100083611657565b82815260059290921b8401810191818101908684111561173c57600080fd5b8286015b848110156116e657805167ffffffffffffffff8111156117605760008081fd5b61176e8986838b0101611590565b845250918301918301611740565b60006020828403121561178e57600080fd5b815167ffffffffffffffff808211156117a657600080fd5b9083019061014082860312156117bb57600080fd5b6117c3610f22565b8251828111156117d257600080fd5b6117de8782860161167b565b8252506020830151828111156117f357600080fd5b6117ff8782860161167b565b60208301525060408301518281111561181757600080fd5b6118238782860161167b565b6040830152506060830151606082015261183f608084016116f1565b608082015260a083015160a082015260c08301518281111561186057600080fd5b61186c878286016116fc565b60c08301525060e08301518281111561188457600080fd5b611890878286016116fc565b60e08301525061010080840151838111156118aa57600080fd5b6118b688828701611590565b82840152505061012080840151838111156118d057600080fd5b6118dc88828701611590565b918301919091525095945050505050565b602081526000610e34602083018461126f565b600082601f83011261191157600080fd5b8151602061192161100083611657565b82815260059290921b8401810191818101908684111561194057600080fd5b8286015b848110156116e65780518352918301918301611944565b6000602080838503121561196e57600080fd5b825167ffffffffffffffff8082111561198657600080fd5b818501915085601f83011261199a57600080fd5b81516119a861100082611657565b81815260059190911b830184019084810190888311156119c757600080fd5b8585015b838110156119ff578051858111156119e35760008081fd5b6119f18b89838a0101611900565b8452509186019186016119cb565b5098975050505050505050565b73ffffffffffffffffffffffffffffffffffffffff85168152836020820152608060408201526000611a4160808301856112ea565b8281036060840152610a608185611116565b60a081526000611a6660a08301886112ea565b8281036020840152611a788188611116565b90508281036040840152611a8c8187611116565b90508281036060840152611aa08186611116565b91505082151560808301529695505050505050565b604081526000611ac860408301856111df565b90508260208301529392505050565b600060208284031215611ae957600080fd5b815167ffffffffffffffff811115611b0057600080fd5b6107ab84828501611900565b606081526000611b1f606083018661121a565b8281036020840152611b3181866112ea565b91505060ff8316604083015294935050505056fea264697066735822122070abc9b32b834276e06a06f323fbf7bc750c3a4ef93cde054199f8ed6752e50364736f6c63430008090033",
  "devdoc": {
    "author": "nugg.xyz - danny7even & dub6ix",
    "details": "hold my margarita",
    "kind": "dev",
    "methods": {},
    "title": "dotnugg V1 - onchain encoder/decoder protocol for dotnugg files",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "yoU CAN'T HaVe ImAgES oN THe BlOCkcHAIn",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1706,
        "contract": "src/DotnuggV1.sol:DotnuggV1",
        "label": "lib",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(DotnuggV1Lib)17141"
      },
      {
        "astId": 1708,
        "contract": "src/DotnuggV1.sol:DotnuggV1",
        "label": "template",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(DotnuggV1Lib)17141": {
        "encoding": "inplace",
        "label": "contract DotnuggV1Lib",
        "numberOfBytes": "20"
      }
    }
  }
}